{"version":3,"sources":["views/MainHamber/index.js","views/UiHeader/index.js","context/AppReducer.js","service/employee.js","service/pendingLabor.js","context/GlobalState.js","views/BreadcurmbList/index.js","views/TopNavBar/index.js","views/Spinner/index.js","views/UiCard/index.js","views/UiPageHeader/index.js","constants/index.js","pages/work-cell/work-cell.js","pages/panel-shop/panel-shop.js","pages/job-posting/job-posting.js","pages/labor-activity/labor-activity.js","views/UiGrid/index.js","pages/labor-confirm/labor-confirm.js","utile/helpers.js","views/UiTimerButton/index.js","views/UiGridProgress/index.js","pages/progress-timers/progress-timers.js","pages/review-timer/review-timer.js","pages/progress-time-stop/progress-time-stop.js","views/UiTimerButtonComplete/index.js","pages/labor-record-complete/labor-record-complete.js","views/MainHamber/MaintenancePageDetailDropdown.js","pages/labor-review-and-posting/labor-review-and-posting.js","pages/labor-review-and-posting/labor-review-and-posting-edit.js","pages/labor-review-and-posting/labor-review-and-posting-view.js","pages/labor-review-and-posting/labor-review-and-posting-add.js","routes/route-config.js","pages/labor-tracker/labor-tracker.js","routes/routes.js","views/BackButton/index.js","App.js","serviceWorker.js","index.js"],"names":["MainHamber","keyValue","data","history","useHistory","useLocation","overlay","onClick","e","key","push","Item","icon","UserOutlined","MenuOutlined","Header","Layout","UiHeader","props","Fragment","className","for","state","payload","type","workCellData","panelShop","keyData","laborActivity","laborConfirm","pendingLabor","pendingLaborRecord","startTime","isActive","breadcurmbList","error","endPoint","getWorkCellService","axios","get","then","res","getPanelShopService","id","getWorkOrderService","getPendingLaborService","getProgressTimeStopService","putPendingLaborService","body","put","deletePendingLaborService","delete","getLaborPostingFilterService","wOrder","filterData","_","filter","item","STATUS","initialState","jobPosting","endTime","laborPostingFilter","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","keyEmpty","Provider","value","getWorkCell","getPendingLabor","getPanalShop","getKeyData","keyName","splice","length","getWorkOrder","DEPARTMENT_KEY","STATUS_MESSAGE","getLaborActivityService","getLaborConfirm","serviceParams","deptKey","woNo","plantKey","wcellKey","wcenterKey","employee","getLaborConfirmService","startTimer","count","isActiveFun","getPendingLaborRecord","pendingLaborKeyData","find","o","KEY","getLaborPostingFilter","getBreadcurmbList","path","name","uniqBy","breadcurmbAction","indexVal","findIndex","itemValue","BreadcurmbList","href","useContext","map","index","onClickBreadcrumb","to","TopNavBar","tempalate","location","track","pathname","Spinner","size","style","background","padding","UiCard","text","onClickHandler","xs","sm","md","lg","xl","hoverable","UiPageHeader","content","color","PlusCircleOutlined","CONSTANTS","WORKCELL","JOBPOSTING","LABORCONFIRM","WORKORDER","CUSTOMER","PLANT","DEPARTMENT","WORKCELLS","EMPLOYEE","LOBARACTIVITY","WORKCELL_PROGRESS_TIMERS","PANALSHOP","LABOR_ACTIVITY","PROGRESS_TIME","REVIEW_TIMER","LABOR_RATE","WorkCell","useState","page","useEffect","moment","duration","Constants","gutter","DEPARTMENT_NAME","WORK_CELL_NAME","panelShopClick","PanelShop","useParams","NAME","JobPosting","jobNumber","setJobNumber","onChange","event","target","workOrderPosting","LaborActivity","CODE","DESCRIPTION","code","PLANT_KEY","laborActivityClick","UiGrid","title","number","desc","seconds","setSeconds","setIsActive","interval","setInterval","clearInterval","span","WO_NUMBER","WO_DESC","CUSTOMER_NAME","PLANT_NAME","EMP_NAME","offset","tempDate","Date","tempMonth","getMonth","finaleDateTime","getDate","getFullYear","join","toLocaleString","split","EMPLOYEE_KEY","WORK_CENTER_KEY","WORK_CELL_KEY","LABOR_CLASS","WORK_ORDER_NUMBER","parseInt","START_TIME","STOP_TIME","LABOR_TIME","LABOR_RATE_TYPE","post","convertMonthToNumber","month","daySplit","undefined","convertDateTime","date","time","dateSplit","monthName","convertMS","milliseconds","hour","minute","Math","floor","day","UiTimerButton","timerHandler","hours","border","txtColor","width","height","start","setStart","setStartTimer","timer","today","getHours","getMinutes","getSeconds","startSec","_milliseconds","convt","formatConvt","console","log","UiGridProgress","employe","activity","start_time","start_time_count","employeName","wcName","woDes","styles","bold","fontWeight","colorGreen","ProgressTimers","tempalte","progressDataFilter","orderBy","EMPLOYEE_NAME","WO_DESCRIPTION","Option","Select","TextArea","Input","ReviewTimer","setPage","note","setNote","workOrderNumber","setWorkOrderNumber","setStartTime","startDate","setStartDate","stopTime","setStopTime","stopDate","setStopDate","workCell","setWorkCell","setEmploye","workCenterName","setWorkCenterName","setRaborRate","employeeUpdate","setEmployeeUpdate","workCellUpdate","setWorkCellUpdate","stop","WORKCENTER_NAME","contentHtml","contentHtmlForEmployee","onSubmit","preventDefault","stop_time","message","success","placeholder","CUST_NAME","Group","compact","defaultValue","INVENTORY_NAME","dateString","format","use12Hours","timeString","rows","ProgressTimeStop","INVENTORY_NUMBER","DEPT_CODE","DEPT_NAME","UiTimerButtonComplete","LaborRecordComplete","MaintenancePageDetailDropdown","refresh","deleteItem","setTimeout","window","reload","this","match","itemKey","allowEdit","allowDelete","menuItems","deleteTooltip","deleteFunction","url","confirm","trigger","React","Component","withRouter","LaborReviewAndPosting","assignListingData","rowData","formattedrowData","setState","handleError","errorData","errors","setErrorState","currentActivity","sourceType","details","toString","sourceName","timestamp","onSelectChange","selectedRowKeys","permissions","columnDefs","headerName","field","pinned","cellClass","cellStyle","textAlign","tooltipField","sort","cellRendererFramework","row","sortable","menuTabs","resizable","selectable","defaultColDef","printMode","test","inputValue","workOrder","handleClick","bind","onChangeHandler","catch","gridOptions","domLayout","popupParent","document","querySelector","animateRows","suppressRowClickSelection","scrollbarWidth","LaborReviewAndPostingEdit","laborPerform","setLaborPerform","laborRate","contentHtmlForRate","backgroundColor","goBack","NOTE","columns","dataIndex","render","LaborReviewAndPostingView","setData","getListLaborAuditTrail","dataSource","LaborReviewAndPostingAdd","customar","setCustomar","setLaborActivityUpdate","Routes","component","exact","isBreadcrumbVisible","LaborConfirm","workCellValue","marginRight","Router","routes","defaultRoute","route","RouteComponent","prop","crumbs","includes","rest","Object","keys","params","reduce","param","replace","Content","App","fallback","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.863a2363.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button ,Menu, Dropdown, message } from 'antd';\r\nimport { MenuOutlined , UserOutlined } from '@ant-design/icons';\r\n// Router\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\n\r\nconst MainHamber = ({keyValue,data}) => {\r\n    const history = useHistory();\r\n    let location = useLocation();\r\n    const handleMenuClick = (e) => {\r\n        if(e.key === 'add'){\r\n            history.push(`labor-review-and-posting-add-labor-record`);\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Dropdown overlay= {\r\n                <Menu onClick={handleMenuClick}>\r\n                <Menu.Item key='add' icon={<UserOutlined />}>\r\n                    Add a Labor Record \r\n                </Menu.Item>\r\n              </Menu>\r\n            } >\r\n            <Button>\r\n                 <MenuOutlined />\r\n            </Button>\r\n            </Dropdown>\r\n        </div>\r\n    )\r\n}\r\nexport default MainHamber","import React from 'react'\r\nimport { Layout } from 'antd';\r\nimport MainHamber from './../MainHamber'\r\nconst { Header } = Layout;\r\n\r\nconst UiHeader = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Header>\r\n        <div className=\"logo\">\r\n          {\r\n            props.for === 'supervisor' \r\n              ? <div className=\"supervisor\"><MainHamber />  <h3 className=\"logo-white\">Logo</h3></div>\r\n              : <h3 className=\"logo-white\">Logo</h3>\r\n          }\r\n          \r\n        </div>\r\n      </Header>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default UiHeader\r\n","export default (state, {\r\n  payload, type\r\n}) => {\r\n    switch (type) {\r\n      case \"GET_WORK_CELL\":\r\n        return {\r\n          ...state,\r\n          workCellData: payload\r\n        };\r\n        case \"GET_PANEL_SHOP\":\r\n        return {\r\n          ...state,\r\n          panelShop: payload\r\n        };\r\n        case \"GET_KEY_DATA\":\r\n        return {\r\n          ...state,\r\n          keyData: [...state.keyData, payload]\r\n        };\r\n        case \"GET_KEY_DATA_EMPTY\":\r\n          return {\r\n            ...state,\r\n            keyData: []\r\n          };\r\n        case \"GET_WORK_ORDER\":\r\n        return {\r\n          ...state,\r\n          laborActivity: payload\r\n        };\r\n        case \"GET_LABOR_CONFIRM\":\r\n          return {\r\n            ...state,\r\n            laborConfirm: payload\r\n          };\r\n        case \"GET_PENDING_LABOR\":\r\n        return {\r\n          ...state,\r\n          pendingLabor: payload\r\n        };\r\n        case \"GET_PENDING_LABOR_RECORD\":\r\n          return {\r\n            ...state,\r\n            pendingLaborRecord: payload\r\n          };\r\n        case \"GET_START_TIME\":\r\n          return {\r\n            ...state,\r\n            startTime: payload\r\n          };\r\n        case \"GET_IS_ACTIVE\":\r\n        return {\r\n          ...state,\r\n          isActive: payload\r\n        };\r\n        case \"GET_BREADCURMB\":\r\n          return {\r\n            ...state,\r\n            breadcurmbList: [...state.breadcurmbList, payload]\r\n          };\r\n        case \"ERROR\":\r\n          return {\r\n            ...state,\r\n            error: payload\r\n          };\r\n      default:\r\n        return state;\r\n    }\r\n  };","import axios from 'axios';\r\nconst endPoint = \"http://34.206.72.199:3010/api/pc\"\r\nexport const getWorkCellService = () => {\r\n    return axios.get(`${endPoint}/workCells/`).then((res) => res.data);\r\n};\r\nexport const getWorkCellIdService = (id) => {\r\n    return axios.get(`${endPoint}/workCells/${id}`).then((res) => res.data);\r\n};\r\nexport const getPanelShopService = (id) => {\r\n    return axios.get(`${endPoint}/employee/${id}`).then((res) => res.data);\r\n};\r\nexport const getWorkOrderService = (id) => {\r\n    return axios.get(`${endPoint}/checkWorkOrder/${id}`).then((res) => res.data);\r\n};\r\nexport const getLaborActivityService = (key,id) => {\r\n    return axios.get(`${endPoint}/laborActivity/${key}/${id}`).then((res) => res.data);\r\n};\r\n// export const getLaborConfirmService = ({deptKey, woNo, plantKey, wcellKey, wcenterKey, employee}) => {\r\n//     return axios.get(`${endPoint}/laborConfirm/${deptKey}/${woNo}/${plantKey}/${wcellKey}/${wcenterKey}/${employee}`).then((res) => res.data);\r\n// };\r\n// demo \r\nexport const getLaborConfirmService = ({deptKey, woNo, plantKey, wcellKey, wcenterKey, employee}) => {\r\n    return axios.get(`${endPoint}/laborConfirm/31/3443151/97/2/157/55`).then((res) => res.data);\r\n};\r\n","import axios from 'axios';\r\nimport _ from 'lodash'\r\nconst endPoint = \"http://34.206.72.199:3010/api/pc\"\r\n// Pending Labor\r\n//get\r\nexport const getPendingLaborService = () => {\r\n    return axios.get(`${endPoint}/pendingLabor`).then((res) => res.data);\r\n}\r\n//get:id\r\nexport const getProgressTimeStopService = (key) => {\r\n    return axios.get(`${endPoint}/pendingLabor/${key}`).then((res) => res.data);\r\n}\r\n//post\r\nexport const postPendingLaborService = (body) => {\r\n    return axios.post(`${endPoint}/pendingLabor`, body).then((res) => res.data);\r\n}\r\n\r\n// put\r\nexport const putPendingLaborService = (key, body) => {\r\n    return axios.put(`${endPoint}/pendingLabor/${key}`, body).then((res) => res.data);\r\n}\r\n\r\n// Delete\r\nexport const deletePendingLaborService = (key) => {\r\n    return axios.delete(`${endPoint}/pendingLabor/${key}`).then((res) => res.data);\r\n}\r\n\r\n// getLaborPostingFilter\r\nexport const getLaborPostingFilterService = (wOrder) => {\r\n    let filterData = {\r\n        wOrder:wOrder\r\n    }\r\n    return axios.get(`${endPoint}/pendingLabor/${' '}/${' '}/${filterData.wOrder}`).then((res) => {\r\n        return _.filter(res.data, function(item) { \r\n            if(item.STATUS === \"I\"){\r\n                return item\r\n            }\r\n         });\r\n    });\r\n}\r\n\r\n// listLaborAuditTrail\r\nexport const getListLaborAuditTrail = (id) => {\r\n    return axios.get(`${endPoint}/listLaborAuditTrail/${id}`).then((res) => res.data);\r\n}","import React, { createContext, useReducer } from \"react\";\r\nimport _ from 'lodash'\r\nimport AppReducer from \"./AppReducer\";\r\nimport { \r\n    getWorkCellService, \r\n    getPanelShopService, \r\n    getWorkOrderService,\r\n    getLaborActivityService,\r\n    getLaborConfirmService \r\n} from './../service/employee'\r\nimport {getPendingLaborService ,getLaborPostingFilterService} from './../service/pendingLabor'\r\nconst initialState = {\r\n  workCellData:[],\r\n  panelShop:[],\r\n  jobPosting:[],\r\n  keyData:[],\r\n  laborActivity: [],\r\n  laborConfirm: {},\r\n  pendingLabor:{},\r\n  startTime:0,\r\n  endTime:null,\r\n  isActive:false,\r\n  pendingLaborRecord:{},\r\n  laborPostingFilter:{},\r\n  error:{},\r\n  breadcurmbList:[]\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  const getWorkCell = () => {\r\n    getWorkCellService().then((res)=>{\r\n        dispatch({\r\n            type: \"GET_WORK_CELL\",\r\n            payload: res\r\n        });\r\n    })\r\n  }\r\n\r\n  const getPanalShop = (key) => {\r\n    getPanelShopService(key).then((res)=>{\r\n        dispatch({\r\n            type: \"GET_PANEL_SHOP\",\r\n            payload: res\r\n        });\r\n    })\r\n  }\r\n\r\n  const getWorkOrder = (id) => {\r\n    let key = state.keyData[0].DEPARTMENT_KEY\r\n    getWorkOrderService(id).then((res)=>{\r\n        if(res[0].STATUS_MESSAGE === null){\r\n            getLaborActivityService(key,id).then((res)=>{\r\n                dispatch({\r\n                    type: \"GET_WORK_ORDER\",\r\n                    payload: res\r\n                });\r\n            })\r\n        }else{\r\n          dispatch({\r\n            type: \"ERROR\",\r\n            payload: res\r\n        });\r\n       }\r\n    })\r\n  }\r\n\r\n  const getLaborConfirm = (serviceParams) => {\r\n    getLaborConfirmService(serviceParams).then((res)=>{\r\n        dispatch({\r\n          type: \"GET_LABOR_CONFIRM\",\r\n          payload: res\r\n      });\r\n    })\r\n  }\r\n\r\n  const getProgressTimeStop = (key) => {\r\n    getProgressTimeStop(key).then((res)=>{\r\n        dispatch({\r\n          type: \"GET_PROGRESS_TIME_STOP\",\r\n          payload: res\r\n      });\r\n    })\r\n  }\r\n  \r\n  const getKeyData = (keyName, keyValue) => {\r\n    if(keyName === 'workcell'){\r\n      keyEmpty()\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    };\r\n    if(keyName === 'panel_shop'){\r\n      let data = state.keyData\r\n      data.splice(1, data.length-1);\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    }\r\n    if(keyName === 'post_labor'){\r\n      let data = state.keyData\r\n      data.splice(2, data.length-1);\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    }\r\n    if(keyName === 'work_center'){\r\n      let data = state.keyData\r\n      data.splice(3, data.length-1);\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    }\r\n  }\r\n\r\n  const keyEmpty = () =>{\r\n    dispatch({\r\n        type: \"GET_KEY_DATA_EMPTY\",\r\n        payload: []\r\n    });\r\n  }\r\n\r\n  const getPendingLabor = () => {\r\n    getPendingLaborService().then((res)=>{\r\n      dispatch({\r\n        type: \"GET_PENDING_LABOR\",\r\n        payload: res\r\n      });\r\n    })\r\n  }\r\n\r\n  const startTimer = (count) => {\r\n    dispatch({\r\n      type: \"GET_START_TIME\",\r\n      payload: count\r\n    });\r\n  }\r\n\r\n  const isActiveFun = (value) => {\r\n    dispatch({\r\n      type: \"GET_IS_ACTIVE\",\r\n      payload: value\r\n    });\r\n  }\r\n// laborPending\r\n  const getPendingLaborRecord = (id) => {\r\n    getPendingLaborService(id).then((res)=>{\r\n      let pendingLaborKeyData = _.find(res, function(o) { \r\n        if(o.KEY == id){\r\n            return o\r\n        }\r\n      });\r\n      dispatch({\r\n        type: \"GET_PENDING_LABOR_RECORD\",\r\n        payload: pendingLaborKeyData\r\n      });\r\n    })\r\n  }\r\n// labor review posting \r\n  const getLaborPostingFilter = (wOrder) => {\r\n    getLaborPostingFilterService(wOrder).then((res)=>{\r\n      dispatch({\r\n        type: \"GET_LABOR_POSTING_FILTER\",\r\n        payload: res\r\n      });\r\n    })\r\n  }\r\n  const getBreadcurmbList = (path,name) =>{\r\n     let filterValue =  _.uniqBy(state.breadcurmbList, function (e) {\r\n        return e.name;\r\n      });\r\n    if(filterValue){\r\n      const res = {\r\n        path:path,\r\n        name:name\r\n      }\r\n      dispatch({\r\n        type: \"GET_BREADCURMB\",\r\n        payload: res\r\n      });\r\n    }\r\n  }\r\n\r\n  const breadcurmbAction = (path,name) =>{\r\n    let indexVal = state.breadcurmbList.findIndex(itemValue=>{\r\n        if(itemValue.name === name){\r\n            return itemValue\r\n        }\r\n    })\r\n    state.breadcurmbList.splice(indexVal,state.breadcurmbList.length)\r\n    }\r\n\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        workCellData: state.workCellData,\r\n        panelShop: state.panelShop,\r\n        keyData: state.keyData,\r\n        laborActivity: state.laborActivity,\r\n        laborConfirm:state.laborConfirm,\r\n        pendingLabor:state.pendingLabor,\r\n        startTime:state.startTime,\r\n        endTime:state.endTime,\r\n        isActive:state.isActive,\r\n        pendingLaborRecord:state.pendingLaborRecord,\r\n        laborPostingFilter:state.laborPostingFilter,\r\n        error:state.error,\r\n        breadcurmbList:state.breadcurmbList,\r\n        getWorkCell,\r\n        getPendingLabor,\r\n        getPanalShop,\r\n        getKeyData,\r\n        getWorkOrder,\r\n        getLaborConfirm,\r\n        keyEmpty,\r\n        startTimer,\r\n        isActiveFun,\r\n        getPendingLaborRecord,\r\n        getLaborPostingFilter,\r\n        getBreadcurmbList,\r\n        breadcurmbAction\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};","import React, {useContext,useEffect,useState} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Breadcrumb } from 'antd';\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport _ from 'lodash'\r\nconst BreadcurmbList = (props)  =>{\r\n    const { href,name } = props;\r\n    const { breadcurmbList, breadcurmbAction } = useContext(GlobalContext);\r\n    const onClickBreadcrumb =(item) =>{\r\n        breadcurmbAction(item.path, item.name)\r\n    }\r\n    return (\r\n        <>\r\n            <Breadcrumb>\r\n                { breadcurmbList.length > 0 ? breadcurmbList.map((item,index) => (\r\n                    <Breadcrumb.Item onClick={(e) => onClickBreadcrumb(item)} >\r\n                        <Link key={index} to={item.path}>\r\n                            {item.name}\r\n                        </Link>\r\n                    </Breadcrumb.Item>\r\n                )): null}\r\n            </Breadcrumb>\r\n        </>\r\n    )\r\n}\r\nexport default BreadcurmbList","import React, {useContext} from 'react'\r\nimport BreadcurmbList from './../BreadcurmbList';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nimport {  useLocation } from 'react-router-dom';\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport './topNavBar.scss'\r\nfunction TopNavBar(props) {\r\n  const { keyData } = useContext(GlobalContext);\r\n  let location = useLocation();\r\n  let track = keyData.length > 0 ? `/panel-shop/${keyData[0].DEPARTMENT_KEY}` :'/'\r\n  let tempalate\r\n    if(location.pathname === '/labor-tracker'){\r\n      return tempalate = (\r\n        <div className=\"main-flex\">\r\n          <div>\r\n              <BreadcurmbList />\r\n          </div>\r\n        </div>\r\n      )\r\n    }else{\r\n      if(location.pathname === '/progress-timers'){\r\n        return tempalate = (\r\n          <div className=\"main-flex\">\r\n            <div>\r\n                <BreadcurmbList />\r\n            </div>\r\n            <div>\r\n                <a href={track}>Track Another Job in this Work Cell</a>\r\n            </div>\r\n          </div>\r\n        )\r\n      }else{\r\n        tempalate = (\r\n          <div className=\"main-flex\">\r\n            <div>\r\n                <BreadcurmbList />\r\n            </div>\r\n            <div>\r\n            <a href=\"/progress-timers\">See All In Progress</a> \r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n    \r\n    \r\n    return (\r\n        <>\r\n          {tempalate}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TopNavBar;","import React from 'react'\r\nimport { Spin } from 'antd';\r\nimport './spinner.scss'\r\nconst Spinner = () => {\r\n    return (\r\n        <section className=\"spinner\">\r\n            <Spin size=\"large\" />\r\n        </section>\r\n    )\r\n}\r\nexport default Spinner","import React from 'react'\r\nimport { Card, Col } from 'antd';\r\nimport './ui-card.scss'\r\nconst style = { background: '#bfbfbf', padding: '8px 0' };\r\nfunction UiCard(props) {\r\n  const { text, onClickHandler, name} = props\r\n  return (\r\n    <React.Fragment>\r\n      <Col className=\"gutter-row\" xs={20} sm={20} md={10} lg={8} xl={10}>\r\n        <Card\r\n          hoverable\r\n          style={style}\r\n          className=\"card-body\" \r\n          onClick={onClickHandler}\r\n        >\r\n          <p >{text} </p>\r\n          <p>{name}</p>\r\n        </Card>\r\n      </Col>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default UiCard\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './page-header.scss'\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nexport default function UiPageHeader(props) {\r\n    const {content, track, color} = props\r\n    return (\r\n      <div className=\"page-header-flex\">\r\n        <div className=\"main-title\">\r\n          <h3 style={{color:color}}>{content}</h3>\r\n        </div>\r\n        {track \r\n          ?<div className=\"plus-icons\">\r\n             <span><PlusCircleOutlined /></span> <Link to=\"/\">Link Another Job in this Work Cell</Link>\r\n            </div> \r\n          : null\r\n        }\r\n        \r\n      </div>\r\n    )\r\n}\r\n","const CONSTANTS = {\r\n    WORKCELL: 'Clock in to a Work Cell',\r\n    JOBPOSTING: 'Which Job Are You Posting Labor To',\r\n    LABORCONFIRM:'Post Labor To',\r\n    WORKORDER:'Work Order',\r\n    CUSTOMER:'Customer',\r\n    PLANT:'Plant',\r\n    DEPARTMENT:'Department',\r\n    WORKCELLS:'Work Cell',\r\n    EMPLOYEE:'Employee',\r\n    LOBARACTIVITY: 'Labor Activity',\r\n    WORKCELL_PROGRESS_TIMERS: 'Work Cell Panal Shop In Progress Timers ',\r\n    PANALSHOP:'Which Employee is Posting Labor in Panel Shop Wiring',\r\n    LABOR_ACTIVITY:'Which labor Activity is Being Performed',\r\n    PROGRESS_TIME:'In Progress Timer',\r\n    REVIEW_TIMER:'Review Timer',\r\n    LABOR_RATE:[\r\n      \"Standard Rate\",\r\n      \"Standard Rate 2\",\r\n      \"Standard Rate 3\",\r\n      \"Standard Rate 4\"\r\n    ]\r\n  };\r\n  \r\n  export default CONSTANTS;","import React, { useState, useEffect, useContext } from 'react';\r\n//components\r\nimport UiCard from './../../views/UiCard'\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport Spinner from './../../views/Spinner'\r\n//Constants\r\nimport Constants from './../../constants'\r\n// Router\r\nimport {useHistory} from 'react-router-dom';\r\n//antd\r\nimport { Row } from 'antd';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport moment from 'moment'\r\n\r\nconst WorkCell = () => {\r\n  const [page, setPage] = useState(1);\r\n  const { getWorkCell, workCellData , getKeyData, getPanalShop, getBreadcurmbList} = useContext(GlobalContext);\r\n  const history = useHistory();\r\n    useEffect(() => {\r\n      getWorkCell()\r\n    }, [page]);\r\n\r\n  const panelShopClick = (key, name) => {\r\n    let data = workCellData\r\n    let keyValue;\r\n    data.map(item=>{\r\n        if(item.DEPARTMENT_KEY === key){\r\n            keyValue =  item\r\n        }\r\n    })\r\n    getPanalShop(key)\r\n    getKeyData('workcell', keyValue)\r\n    getBreadcurmbList('/workcell',name)\r\n    history.push(`/panel-shop/${key}`);\r\n  };\r\n  let dsec = moment.duration('23:59:59')\r\n  return (\r\n    <>\r\n      <UiPageHeader content={Constants.WORKCELL} />\r\n      <Row gutter={{ xs: 16, sm: 16, md: 16, lg: 16 }} >\r\n        {workCellData.length >= 1 ? workCellData.map((item, index)=>{\r\n          return <UiCard key={item.KEY } text={item.DEPARTMENT_NAME} name={item.WORK_CELL_NAME} onClickHandler={() => panelShopClick(item.DEPARTMENT_KEY, item.WORK_CELL_NAME)}/>\r\n        }) : <Spinner />}\r\n      </Row>\r\n    </>\r\n  ); \r\n}\r\n\r\nexport default WorkCell;","import React, {useState,useEffect, useContext} from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\n//components\r\nimport UiCard from './../../views/UiCard'\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\n//Constants\r\nimport Constants from './../../constants'\r\n// Antd\r\nimport { Row } from 'antd';\r\nimport {useHistory} from 'react-router-dom';\r\n// context\r\nimport { GlobalContext } from \"./../../context//GlobalState\";\r\n\r\nconst PanelShop = () => {\r\n    const { panelShop , getBreadcurmbList, getKeyData ,keyData} = useContext(GlobalContext);\r\n    let { id } = useParams();\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n      if(keyData.length  === 0){\r\n        history.push(`/work-cell`)\r\n      }\r\n    }, [1]);\r\n\r\n    function jobPosting (key, name) {\r\n      let data = panelShop\r\n      let keyValue;\r\n      data.map(item=>{\r\n          if(item.EMPLOYEE === key){\r\n              keyValue =  item\r\n          }\r\n      })\r\n      getKeyData('panel_shop',keyValue)\r\n      getBreadcurmbList(`/panel-shop/${id}`,name)\r\n      history.push(`/job-posting-employee/${key}`);\r\n    };\r\n  \r\n    return (\r\n        <>\r\n        <UiPageHeader content={Constants.PANALSHOP} />\r\n          <Row gutter={16}>\r\n            {panelShop.length >= 1 ? panelShop.map((item, index)=>{\r\n              return <UiCard key={index } text={`#${item.EMPLOYEE}`} name={item.NAME} onClickHandler={() => jobPosting(item.EMPLOYEE, item.NAME)}/>\r\n            }):  null}\r\n          </Row>\r\n        </>\r\n    )\r\n}\r\nexport default PanelShop","import React, {useState,useEffect, useContext} from 'react'\r\nimport { useParams, useHistory} from \"react-router-dom\";\r\n//components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n//Constants\r\nimport Constants from './../../constants'\r\nimport './job-posting.scss'\r\nimport { Input, Button  } from 'antd';\r\n\r\nconst JobPosting = (props) => {\r\n    let { id } = useParams();\r\n    const [page, setPage] = useState(1);\r\n    const [jobNumber, setJobNumber] = useState();\r\n    const { keyData, getWorkOrder, getKeyData, getBreadcurmbList} = useContext(GlobalContext);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if(keyData.length  === 0){\r\n            history.push(`/work-cell`)\r\n          }\r\n      }, [page]);\r\n\r\n    function onChangeHandler(event) {\r\n        setJobNumber(event.target.value)\r\n    }\r\n\r\n    const onSubmitHandler = () => {\r\n        let workOrderPosting = {\r\n            workOrderPosting:jobNumber\r\n        }\r\n        getWorkOrder(jobNumber)\r\n        getKeyData('post_labor', workOrderPosting)\r\n        getBreadcurmbList(`/job-posting-employee/${id}`,`WO ${jobNumber}`)\r\n        history.push(`/labor-activity/${jobNumber}`);\r\n    }\r\n    return (\r\n        <>\r\n            <UiPageHeader content={Constants.JOBPOSTING} />\r\n            <div className=\"job-posting\">\r\n                <div>\r\n                    WO #\r\n                </div>\r\n                <div>\r\n                    <Input onChange={onChangeHandler} />\r\n                </div>\r\n                <div>\r\n                    <Button type=\"primary\" onClick={onSubmitHandler}>Enter</Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default JobPosting","\r\nimport React, {useContext, useEffect} from 'react'\r\n//components\r\nimport UiCard from './../../views/UiCard'\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n//Constants\r\nimport Constants from './../../constants'\r\n// Antd\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport { Row } from 'antd';\r\n\r\n\r\n const LaborActivity = (props) => {\r\n    const { keyData, laborActivity,getBreadcurmbList, getKeyData, getLaborConfirm} = useContext(GlobalContext);\r\n    const history = useHistory();\r\n    let { id } = useParams();\r\n    useEffect(() => {\r\n      if(keyData.length  === 0){\r\n          history.push(`/work-cell`)\r\n        }\r\n    }, [1]);\r\n\r\n    const laborActivityClick = (code, name) => {\r\n      let data = laborActivity\r\n      let keyValue;\r\n      data.map(item=>{\r\n          if(item.CODE === code){\r\n              keyValue =  item\r\n          }\r\n      })\r\n      let serviceParams = {\r\n        deptKey : keyData[0].DEPARTMENT_KEY,\r\n        woNo:keyData[2].workOrderPosting,\r\n        plantKey:keyData[0].PLANT_KEY,\r\n        wcellKey:keyData[0].KEY,\r\n        wcenterKey:keyValue.KEY,\r\n        employee:keyValue.CODE\r\n      }\r\n      getLaborConfirm(serviceParams);\r\n      getKeyData('work_center', keyValue)\r\n      getBreadcurmbList(`/labor-activity/${id}`,`${code} ${name}`)  \r\n      history.push(`/labor-confirm`);\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <UiPageHeader content={Constants.LABOR_ACTIVITY} />\r\n          <Row gutter={16}>\r\n            {laborActivity.length > 0 ? laborActivity.map((item, index)=>{\r\n              return <UiCard \r\n                        key={index }  \r\n                        text={`#${item.CODE}`} \r\n                        name={item.DESCRIPTION} \r\n                        onClickHandler={() => laborActivityClick(item.CODE, item.DESCRIPTION)}\r\n                      />\r\n            }): 'No Data'}\r\n          </Row>\r\n        </>\r\n    )\r\n}\r\nexport default LaborActivity","\r\nimport React from 'react'\r\nfunction UiGrid({title,number,desc, children}) {\r\n    return (\r\n    <React.Fragment>\r\n        <div className=\"ui-grid\">\r\n            <p>{title}</p>\r\n            <p>{number || children}</p>\r\n            <p>{desc}</p>\r\n        </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nexport default UiGrid\r\n            ","\r\nimport React, {useContext,useState,useEffect} from 'react'\r\n//components\r\nimport UiGrid from './../../views/UiGrid'\r\nimport UiPageHeader from './../../views/UiPageHeader';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n//Constants\r\nimport Constants from './../../constants'\r\nimport _ from 'lodash'\r\nimport {useHistory} from 'react-router-dom';\r\nimport { Button,Row, Col } from 'antd';\r\n//SCSS\r\nimport './labor-confirm.scss'\r\n// service\r\nimport { postPendingLaborService } from './../../service/pendingLabor'\r\n\r\n const LaborActivity = (props) => {\r\n    const { keyData , getPendingLabor,startTime,laborActivity,startTimer, laborConfirm} = useContext(GlobalContext);\r\n    const [seconds, setSeconds] = useState(0);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if(keyData.length  === 0){\r\n            history.push(`/work-cell`)\r\n          }\r\n        let interval = null;\r\n        if (isActive) {\r\n          interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            startTimer(seconds)\r\n          }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n          clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n      }, [isActive, seconds]);\r\n     \r\n    const startHandler = () => {\r\n        // Date and Time Conveter script\r\n        setIsActive(!isActive)\r\n        let tempDate = new Date()\r\n        let months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \r\n        \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\r\n        let tempMonth = months[tempDate.getMonth()]\r\n        let finalDate = [tempDate.getDate(), tempMonth, tempDate.getFullYear()].join('-')\r\n        let tempTime = new Date().toLocaleString('en-GB');\r\n        let splitTime = tempTime.split(',')\r\n        let time = splitTime[1]\r\n        let finaleDateTime = [finalDate,time].join(' ')\r\n        let serviceParams = {\r\n            PLANT_KEY: keyData[0].PLANT_KEY,\r\n            DEPARTMENT_KEY: keyData[0].DEPARTMENT_KEY,\r\n            EMPLOYEE_KEY: keyData[1].EMPLOYEE,\r\n            WORK_CENTER_KEY: keyData[3].KEY,\r\n            WORK_CELL_KEY: keyData[0].KEY,\r\n            LABOR_CLASS: null,\r\n            WORK_ORDER_NUMBER: parseInt(keyData[2].workOrderPosting),\r\n            START_TIME: finaleDateTime,\r\n            STOP_TIME: null,\r\n            LABOR_TIME: null,\r\n            LABOR_RATE_TYPE: null,\r\n            STATUS: \"I\"\r\n        }\r\n        postPendingLaborService(serviceParams).then(res=>{\r\n            history.push('/progress-timers')\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n        {laborConfirm.length > 0 ? \r\n            <>  \r\n                <UiPageHeader content={Constants.LABORCONFIRM} />\r\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                    <Col className=\"gutter-row\" span={24}>\r\n                    <div>\r\n                        <UiGrid title={Constants.WORKORDER} number={laborConfirm[0].WO_NUMBER} desc={laborConfirm[0].WO_DESC} />\r\n                        <UiGrid title={Constants.CUSTOMER} number={laborConfirm[0].CUSTOMER} desc={laborConfirm[0].CUSTOMER_NAME}/>\r\n                        <UiGrid title={Constants.PLANT} number={laborConfirm[0].PLANT} desc={laborConfirm[0].PLANT_NAME} />\r\n                        <UiGrid title={Constants.DEPARTMENT} number='' desc=\"\" />\r\n                        <UiGrid title={Constants.WORKCELLS} number='' desc={laborConfirm[0].NAME} />\r\n                        <UiGrid title={Constants.EMPLOYEE} number={laborConfirm[0].EMPLOYEE} desc={laborConfirm[0].EMP_NAME} />\r\n                        <UiGrid title={Constants.LOBARACTIVITY}  number={laborConfirm[0].CODE} desc={laborConfirm[0].DESCRIPTION} />\r\n                    </div>\r\n                    </Col>\r\n                    \r\n                    <Col className=\"gutter-row\" offset={8} span={8}>\r\n                        <div ><Button type=\"primary\" className=\"start-button green\" onClick={startHandler} >Start Tracking</Button> </div>\r\n                    </Col>\r\n                </Row>\r\n            </> : null }\r\n            \r\n        </>\r\n    )\r\n}\r\nexport default LaborActivity","// lodash\r\nimport _ from 'lodash'\r\nexport const convertMonthToNumber = (month) =>{\r\n    let daySplit = month !== undefined ? month.split(\"-\"):''\r\n    let months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \r\n      \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\r\n    let number = _.findIndex(months, function(o) { return o == daySplit[1] });\r\n    if(number < 10){\r\n      return `${daySplit[0]}-0${number}-${daySplit[2]}`\r\n    }else{\r\n      return `${daySplit[0]}-${number}-${daySplit[2]}`\r\n    }\r\n}\r\nexport const convertDateTime = (date, time) =>{\r\n    let months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \r\n    \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\r\n    let dateSplit = date !== undefined ? date.split('-'):''\r\n    let monthName = months[parseInt(dateSplit[1], 10)]\r\n    let finalNameDate =  `${dateSplit[0]}-${monthName}-${dateSplit[1]}`\r\n    return [finalNameDate,time].join(' ')\r\n}\r\nexport const convertMS = ( milliseconds ) => {\r\n  var day, hour, minute, seconds;\r\n  seconds = Math.floor(milliseconds / 1000);\r\n  minute = Math.floor(seconds / 60);\r\n  seconds = seconds % 60;\r\n  hour = Math.floor(minute / 60);\r\n  minute = minute % 60;\r\n  day = Math.floor(hour / 24);\r\n  hour = hour % 24;\r\n  return {\r\n      day: day,\r\n      hour: hour,\r\n      minute: minute,\r\n      seconds: seconds\r\n  };\r\n}","\r\nimport React, {useState,useEffect,useContext} from 'react'\r\nimport moment from 'moment'\r\nimport './ui-timer-buuton.scss'\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport {convertMS} from './../../utile/helpers'\r\nfunction UiTimerButton(props) {\r\n    const { timerHandler,name,time,hours, color, border,txtColor, width, height} = props;\r\n    const [start, setStart] = useState(0);\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [startTimer , setStartTimer] = useState(time)\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (isActive) {\r\n        interval = setInterval(() => {\r\n            setStart(start => start + 1);\r\n            if(startTimer !== 'null'){\r\n                var timer = time !== undefined ? time.split(' '):\"0 0\"\r\n                var today = new Date();\r\n                var endTime = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n                // var endTime = moment().format('h:mm:ss')\r\n                var startSec = moment.duration(timer[1])\r\n                var stopSec = moment.duration(endTime)\r\n                var seconds = stopSec._milliseconds-startSec._milliseconds\r\n                var convt = convertMS(seconds)\r\n                var formatConvt = convt.hour + \":\" + convt.minute + \":\" + convt.seconds\r\n                console.log(formatConvt)\r\n                setStart(start => start + 1);\r\n                setStartTimer(formatConvt)\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && start !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive,start]);\r\n\r\n    return (\r\n    <React.Fragment>\r\n       <div className=\"ui-timer-button\" \r\n            style={{background:color, border:`1px solid ${border}`,color:txtColor,width:width,height:height}} \r\n            onClick={timerHandler}>\r\n            <p>{name}</p>\r\n            <p>{startTimer !== 'null' ? startTimer : 'and' }</p>\r\n            <p>{hours}</p>\r\n       </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nexport default UiTimerButton\r\n            ","\r\nimport React from 'react'\r\nimport UiTimerButton from './../UiTimerButton'\r\n//antd\r\nimport { Row,Col } from 'antd';\r\nimport './ui-grid-progress.scss'\r\nfunction UiGridProgress(props) {\r\n    const { employe,wOrder,activity,start_time,start_time_count, employeName,wcName,woDes, timerHandler} = props;\r\n    const style = {  padding: '8px 0' };\r\n    const styles = {\r\n        bold:{\r\n            fontWeight:'bold'\r\n        },\r\n        colorGreen:{\r\n            color:'green',\r\n            padding: '8px 0',\r\n            fontWeight: '500'\r\n        }\r\n    }\r\n    return (\r\n    <React.Fragment>\r\n         <div className=\"ui-grid-progress\" >\r\n            <hr></hr>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                <Col className=\"gutter-row\" span={3}>\r\n                    <div style={style} >\r\n                        <p>Employee</p>\r\n                        <p>Work Order</p>\r\n                        <p>Labor Activity</p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={3}>\r\n                    <div style={styles.bold} className=\"ui-grid-progress__grid\">\r\n                        <p>{employe}</p>\r\n                        <p>{wOrder}</p>\r\n                        <p>{activity}</p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    <div style={style} className=\"ui-grid-progress__grid\">\r\n                        <p style={styles.bold}>{employeName}</p>\r\n                        <p>{woDes} </p>\r\n                        <p style={styles.bold}>{wcName} </p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={4}>\r\n                    <div className=\"ui-grid-progress__grid\">\r\n                        <p style={styles.colorGreen}>Start Time</p>\r\n                        <p style={styles.bold}>{start_time}</p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row end\" span={6}>\r\n                    <div style={style} className=\"ui-grid-progress__grid\">\r\n                        <UiTimerButton name=\"Elasped\" time={start_time_count} hours='HoursMinutes' color=\"green\" timerHandler={timerHandler}/>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nexport default UiGridProgress\r\n            ","import React, { useState, useEffect, useContext } from 'react';\r\n//components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport UiTimerButton from './../../views/UiTimerButton'\r\nimport UiGridProgress from './../../views/UiGridProgress'\r\nimport Spinner from './../../views/Spinner'\r\n// Router\r\nimport {useHistory} from 'react-router-dom';\r\n//Constants\r\nimport Constants from './../../constants'\r\n//antd\r\nimport { Row,Col } from 'antd';\r\n// context\r\nimport { GlobalContext } from \"./../../context//GlobalState\";\r\nimport _ from 'lodash';\r\nimport moment from 'moment'\r\n\r\nconst ProgressTimers = () => {\r\n  const { getPendingLabor , pendingLabor, startTime} = useContext(GlobalContext);\r\n  const [page, setPage] = useState(1);\r\n  const history = useHistory();\r\n    useEffect(() => {\r\n      getPendingLabor()\r\n    }, [page]);\r\n    const timerHandler = (key) =>{\r\n      history.push(`/progress-time-stop/${key}`)\r\n    }\r\n    const progressDataFilter = pendingLabor.length > 0 ? _.orderBy(pendingLabor, ['KEY'], ['desc']) : null\r\n    let tempalte\r\n    if(progressDataFilter){\r\n      let data =  _.filter(progressDataFilter, function(item) { return item.STOP_TIME === null });\r\n      tempalte = (\r\n        data.map((item, index)=>{\r\n          let itemStartTime = _.split(item.START_TIME, ' ');\r\n          let time = itemStartTime[1]\r\n          return  <UiGridProgress \r\n                key={index}\r\n                employe={item.EMPLOYEE_KEY} \r\n                wOrder={item.WORK_ORDER_NUMBER} \r\n                activity=\"22\" \r\n                start_time={time}\r\n                start_time_count={item.START_TIME}\r\n                employeName={item.EMPLOYEE_NAME}\r\n                wcName={item.WORK_CELL_NAME}\r\n                woDes={item.WO_DESCRIPTION}\r\n                timerHandler={() => timerHandler(item.KEY)} \r\n            />\r\n        })\r\n      )\r\n    }else{\r\n      return <Spinner />\r\n    }\r\n  return (\r\n    <>\r\n      <UiPageHeader content={Constants.WORKCELL_PROGRESS_TIMERS} />\r\n      {tempalte }\r\n    </>\r\n  ); \r\n}\r\n\r\nexport default ProgressTimers;","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Radio,\r\n    Select,\r\n    Input,\r\n    Col,\r\n    DatePicker,\r\n    TimePicker,\r\n    Row,\r\n    Button,\r\n    message\r\n  } from 'antd';\r\n\r\nimport moment from 'moment';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport {useHistory} from 'react-router-dom';\r\n  //components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport UiGrid from './../../views/UiGrid'\r\n//Constants\r\nimport Constants from './../../constants'\r\n// lodash\r\nimport _ from 'lodash'\r\n//scss \r\nimport './review-timer.scss'\r\n  // service\r\nimport { getProgressTimeStopService, putPendingLaborService } from './../../service/pendingLabor'\r\nimport { getPanelShopService,getWorkOrderService, getLaborActivityService } from './../../service/employee';\r\nimport { convertMonthToNumber, convertDateTime } from './../../utile/helpers' \r\n\r\nconst { Option } = Select;\r\nconst format = 'HH:mm';\r\nconst { TextArea } = Input;\r\nconst dateFormat = 'DD-MM-YYYY';\r\n\r\nconst ReviewTimer = () => {\r\n  const history = useHistory();\r\n  const {pendingLaborRecord, workCellData, getWorkCell } = useContext(GlobalContext);\r\n  const [page, setPage] = useState([]);\r\n  const [note, setNote] = useState('');\r\n  const [workOrderNumber, setWorkOrderNumber] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [stopTime, setStopTime] = useState('');\r\n  const [stopDate, setStopDate] = useState('');\r\n  const [workCell, setWorkCell] = useState('');\r\n  const [employe, setEmploye] = useState('');\r\n  const [workCenterName, setWorkCenterName] = useState('');\r\n  const [laborRate, setRaborRate] = useState(Constants.LABOR_RATE[0]);\r\n  const [employeeUpdate, setEmployeeUpdate] = useState([]);\r\n  const [workCellUpdate, setWorkCellUpdate] = useState(null)\r\n\r\n    useEffect(() => {\r\n       getWorkCell()\r\n       getProgressTimeStopService(pendingLaborRecord.KEY).then(res=>{\r\n        setPage(res[0])\r\n        let start = res[0].START_TIME.split(\" \");\r\n        let stop = res[0].STOP_TIME.split(\" \")\r\n        console.log(convertMonthToNumber(start[0]))\r\n        setStartTime(start[1])\r\n        setStartDate(convertMonthToNumber(start[0]))\r\n        setStopTime(stop[1])\r\n        setStopDate(convertMonthToNumber(stop[0]))\r\n        setWorkCell(res[0].WORK_CELL_NAME)\r\n        setEmploye(res[0].EMPLOYEE_NAME)\r\n        setWorkOrderNumber(res[0].WORK_ORDER_NUMBER);\r\n        setWorkCenterName(res[0].WORKCENTER_NAME)\r\n      });\r\n       getPanelShopService(pendingLaborRecord.DEPARTMENT_KEY).then(res=>{\r\n        setEmployeeUpdate(res)\r\n      })\r\n    }, [1]);\r\n\r\n    const onChange = (e) => {\r\n      setNote(e.target.value);\r\n  }\r\n    const onChangeWorkCell = (e) => {\r\n      workCellData.map(item =>{\r\n        if(item.WORK_CELL_NAME === e){\r\n          setWorkCell(e)\r\n          setWorkCellUpdate(item)\r\n          getPanelShopService(item.DEPARTMENT_KEY).then(res=>{\r\n            setEmployeeUpdate(res)\r\n            setEmploye(res[0].NAME)\r\n          })\r\n        }\r\n      })\r\n    }\r\n    const onChangeEmployee = (e) =>{\r\n      let update = workCellData.map(item=>{\r\n        if(e === item.WORK_CELL_NAME){\r\n          return item\r\n        }\r\n      })    \r\n      setEmploye(e)\r\n    }\r\n    const completeStartNew = () =>{\r\n      history.push('/')\r\n    }\r\n    const onChangeStartTime = (time, timeString) =>{\r\n        setStartTime(timeString);\r\n    }\r\n    const onChangeStopTime = (time, timeString) =>{\r\n        setStopTime(timeString);\r\n    }\r\n    const onChangeStartDate = (date, dateString) =>{\r\n        setStartDate(dateString);\r\n    }\r\n    const onChangeStopDate = (date, dateString) =>{\r\n        setStopDate(dateString);\r\n    }\r\n    const onChangeRate = (value) =>{\r\n        setRaborRate(value)\r\n    }\r\n    const onChangeWorkOrder =(e) =>{\r\n      setWorkOrderNumber(e.target.value)\r\n    }\r\n    const onSubmit = (e) => {\r\n      e.preventDefault();\r\n      let start_time = convertDateTime(startDate,startTime)\r\n      let stop_time = convertDateTime(stopDate,stopTime)\r\n      let serviceParams = {\r\n          PLANT_KEY: workCellUpdate === null ? page.PLANT_KEY : workCellUpdate.PLANT_KEY,\r\n          DEPARTMENT_KEY: workCellUpdate === null ? page.DEPARTMENT_KEY : workCellUpdate.DEPARTMENT_KEY,\r\n          EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n          WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n          WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n          LABOR_CLASS: null,\r\n          WORK_ORDER_NUMBER: workOrderNumber,\r\n          START_TIME: start_time,\r\n          STOP_TIME: stop_time,\r\n          LABOR_TIME: null,\r\n          LABOR_RATE_TYPE: null,\r\n          STATUS: \"C\"\r\n      }\r\n      let serviceParams1 = {\r\n        PLANT_KEY: pendingLaborRecord.PLANT_KEY,\r\n        DEPARTMENT_KEY: pendingLaborRecord.DEPARTMENT_KEY,\r\n        EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n        WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n        WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n        LABOR_CLASS: null,\r\n        WORK_ORDER_NUMBER: pendingLaborRecord.WORK_ORDER_NUMBER,\r\n        START_TIME: pendingLaborRecord.START_TIME,\r\n        STOP_TIME: pendingLaborRecord.STOP_TIME,\r\n        LABOR_TIME: null,\r\n        LABOR_RATE_TYPE: null,\r\n        STATUS: \"C\"\r\n    }\r\n      putPendingLaborService(pendingLaborRecord.KEY, serviceParams).then((res)=>{\r\n        message.success({ content: 'Successfully Recorded ' });\r\n        history.push(`/labor-record-complete/${pendingLaborRecord.KEY}`)\r\n      })\r\n    }\r\n\r\n    const contentHtml = <>\r\n      {workCellData.length > 0 ? workCellData.map((item, index)=><Option key={index} value={item.WORK_CELL_NAME} >{item.WORK_CELL_NAME}</Option>) : null}\r\n    </>;\r\n    const contentHtmlForEmployee = <>\r\n      {employeeUpdate.length > 0 ? employeeUpdate.map((item, index)=><Option key={index} value={item.NAME} >{item.NAME}</Option>) : null}\r\n    </>;\r\n    // const contentHtmlForWorkCenter = <>\r\n    //   {apiFetchData.laborActivityUpdate.length > 0 ? apiFetchData.laborActivityUpdate.map((item, index)=><Option key={index} value={item.CUSTOMER_NAME} >{item.CUSTOMER_NAME}</Option>) : null}\r\n    // </>;\r\n    const contentHtmlForRate = <>\r\n        {Constants.LABOR_RATE.map((item, index)=><Option key={index} value={item} >{item}</Option>)}\r\n    </>;\r\n    \r\n    return (\r\n      <>\r\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n      <form  onSubmit={onSubmit} className=\"labor-record-form\">\r\n        <Col className=\"gutter-row\" span={12}>\r\n          <div>\r\n            <UiPageHeader content={Constants.REVIEW_TIMER} color=\"green\"/>\r\n            <UiGrid title=\"Work Order\">\r\n              <Input placeholder=\"\" name=\"workOrder\" value={workOrderNumber} onChange={onChangeWorkOrder} />\r\n            </UiGrid>\r\n            <UiGrid title=\"Customar \" number={page.CUST_NAME} />\r\n            <UiGrid title=\"Plant \" number={workCellUpdate === null ? page.PLANT_KEY : workCellUpdate.PLANT_KEY}  />\r\n            <UiGrid title=\"Departement \" \r\n              number={workCellUpdate === null ? page.DEPARTMENT_KEY : workCellUpdate.DEPARTMENT_KEY} \r\n              desc={workCellUpdate === null ? page.DEPARTMENT_NAME : workCellUpdate.DEPARTMENT_NAME} \r\n            />\r\n            <UiGrid title=\"Work Cell\" >\r\n              <Input.Group compact>\r\n                <Select value={workCell} onChange={onChangeWorkCell}>\r\n                  {contentHtml}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Employee\" >\r\n              <Input.Group compact>\r\n                <Select value={employe} onChange={onChangeEmployee}>\r\n                  {contentHtmlForEmployee}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Activity\" >\r\n              <Input.Group compact>\r\n                <Select value={workCenterName} >\r\n                  <Option >{workCenterName}</Option>\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Performed\" >\r\n              <Input.Group compact>\r\n                <Select defaultValue={page.INVENTORY_NAME} value={page.INVENTORY_NAME} onChange={onChangeRate} name=\"laborPerformed\">\r\n                  <Option >{page.INVENTORY_NAME}</Option>\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Start Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact >\r\n                    <DatePicker onChange={onChangeStartDate} value={moment(startDate, 'DD-MM-YY')} format={dateFormat}/>\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStartTime} value={moment(startTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Stop Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact>\r\n                    <DatePicker onChange={onChangeStopDate} value={moment(stopDate, dateFormat)} format={dateFormat} />\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStopTime} value={moment(stopTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Hours\" number={pendingLaborRecord.LABOR_TIME} />\r\n          </div>\r\n        </Col>\r\n        <Col className=\"gutter-row\" span={12}>\r\n            <div>\r\n              <p>Note *</p>\r\n              <TextArea rows={4} name='note' value={note} onChange={onChange} placeholder=\"Note\"/>\r\n            </div>\r\n            <div className=\"check-time-button\">\r\n              <input type=\"submit\" className=\"time-button yellow\" value=\"Complete Tracking\" />\r\n              <Button type=\"primary\" className=\"time-button\" onClick={completeStartNew} >Complete Tracking And Start New Job</Button>  \r\n            </div>\r\n        </Col>\r\n      </form>\r\n    </Row> \r\n      </>\r\n    )\r\n}\r\nexport default ReviewTimer","\r\nimport React, {useContext,useState, useEffect} from 'react'\r\n//components\r\nimport UiGrid from './../../views/UiGrid'\r\nimport UiPageHeader from './../../views/UiPageHeader';\r\nimport UiTimerButton from './../../views/UiTimerButton'\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n//Constants\r\nimport Constants from './../../constants'\r\nimport _ from 'lodash'\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { Button,Row, Col } from 'antd';\r\n\r\n// service\r\nimport { putPendingLaborService } from './../../service/pendingLabor'\r\n\r\n const ProgressTimeStop = (props) => {\r\n    const { pendingLaborRecord, getPendingLaborRecord } = useContext(GlobalContext);\r\n    let { id } = useParams();\r\n    const [page, setPage] = useState(1);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        getPendingLaborRecord(id)\r\n      }, [page]);\r\n\r\n \r\n    const stopTimer = () =>{\r\n        let tempDate = new Date()\r\n        let months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \r\n        \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\r\n        let tempMonth = months[tempDate.getMonth()]\r\n        let finalDate = [tempDate.getDate(), tempMonth, tempDate.getFullYear()].join('-')\r\n        let tempTime = new Date().toLocaleString('en-GB');\r\n        let splitTime = tempTime.split(',')\r\n        let time = splitTime[1]\r\n        let stopTime = [finalDate, time].join(' ')\r\n        let serviceParams = {\r\n            PLANT_KEY: pendingLaborRecord.PLANT_KEY,\r\n            DEPARTMENT_KEY: pendingLaborRecord.DEPARTMENT_KEY,\r\n            EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n            WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n            WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n            LABOR_CLASS: null,\r\n            WORK_ORDER_NUMBER: pendingLaborRecord.WORK_ORDER_NUMBER,\r\n            START_TIME: pendingLaborRecord.START_TIME,\r\n            STOP_TIME: stopTime,\r\n            LABOR_TIME: null,\r\n            LABOR_RATE_TYPE: null,\r\n            STATUS: \"I\"\r\n        }\r\n        putPendingLaborService(id, serviceParams).then((res)=>{\r\n            if(res){\r\n                history.push('/review-timer')\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { pendingLaborRecord !== undefined ?\r\n                <> \r\n                    <UiPageHeader content={Constants.PROGRESS_TIME} />\r\n                    <Row gutter={{ xs: 24, sm: 24, md: 24, lg: 32 }}>\r\n                        <Col className=\"gutter-row\" span={24}>\r\n                        <div>\r\n                            {console.log(pendingLaborRecord.START_TIME)}\r\n                            <UiGrid title={Constants.WORKORDER} number={pendingLaborRecord.WORK_ORDER_NUMBER} desc={pendingLaborRecord.WO_DESCRIPTION} />\r\n                            <UiGrid title={Constants.CUSTOMER} number={pendingLaborRecord.CUST_NAME} />\r\n                            <UiGrid title={Constants.PLANT} number={pendingLaborRecord.INVENTORY_NUMBER} desc={pendingLaborRecord.INVENTORY_NAME} />\r\n                            <UiGrid title={Constants.DEPARTMENT} number={pendingLaborRecord.DEPT_CODE} desc={pendingLaborRecord.DEPT_NAME} />\r\n                            <UiGrid title={Constants.WORKCELLS} number={pendingLaborRecord.WORK_CELL_KEY} desc={pendingLaborRecord.WORK_CELL_NAME} />\r\n                            <UiGrid title={Constants.EMPLOYEE} number={pendingLaborRecord.EMPLOYEE_KEY} desc={pendingLaborRecord.EMPLOYEE_NAME} />\r\n                            <UiGrid title={Constants.LOBARACTIVITY}  number={pendingLaborRecord.WORKCENTER_NAME} />\r\n                        </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter={{ xs: 24, sm: 24, md: 24, lg: 32 }}>\r\n                        <Col className=\"gutter-row\" offset={8} span={5}>\r\n                            <div>\r\n                            <UiTimerButton name=\"Elasped\" time={pendingLaborRecord.START_TIME} hours='HoursMinutes' color=\"green\" />\r\n                            </div>\r\n                        </Col>\r\n                        <Col className=\"gutter-row\" offset={3} span={5}>\r\n                            <div>\r\n                                <UiTimerButton name=\"Stop Timer\" time='null' hours='Review Labor' color=\"red\" timerHandler={stopTimer}/>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                 </> \r\n                : null}\r\n           \r\n        </>\r\n    )\r\n}\r\nexport default ProgressTimeStop","\r\nimport React, {useState,useEffect,useContext} from 'react'\r\nimport moment from 'moment'\r\nimport './ui-button-complete.scss'\r\n// Helper\r\nimport {convertMS} from './../../utile/helpers'\r\nfunction UiTimerButtonComplete(props) {\r\n    const { timerHandler,name,time,hours, color, border,txtColor, width, height} = props;\r\n    const [start, setStart] = useState(0);\r\n    const [startTimer , setStartTimer] = useState(time)\r\n    useEffect(() => {\r\n        var today = new Date();\r\n        var timer = time !== undefined ? time.split(' '):\"0 0\"\r\n        var endTime = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        // var endTime = moment().format('h:mm:ss')\r\n        var startSec = moment.duration(timer[1])\r\n        var stopSec = moment.duration(endTime)\r\n        var seconds = stopSec._milliseconds-startSec._milliseconds\r\n        var convt = convertMS(seconds)\r\n        var formatConvt = convt.hour + \":\" + convt.minute + \":\" + convt.seconds\r\n        console.log(formatConvt)\r\n        setStart(start => start + 1);\r\n        setStartTimer(formatConvt)\r\n    }, [1]);\r\n\r\n    return (\r\n    <React.Fragment>\r\n       <div className=\"ui-timer-button\" \r\n            style={{background:color, border:`1px solid ${border}`,color:txtColor,width:width,height:height}} \r\n            onClick={timerHandler}>\r\n            <p>{name}</p>\r\n            <p>{startTimer !== 'null' ? startTimer : 'and' }</p>\r\n            <p>{hours}</p>\r\n       </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nexport default UiTimerButtonComplete\r\n            ","\r\nimport React, {useContext,useState, useEffect} from 'react'\r\n//components\r\nimport UiGrid from './../../views/UiGrid'\r\nimport UiPageHeader from './../../views/UiPageHeader';\r\nimport UiTimerButtonComplete from './../../views/UiTimerButtonComplete'\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n//Constants\r\nimport Constants from './../../constants'\r\nimport _ from 'lodash'\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { Button,Row, Col } from 'antd';\r\n//scss\r\nimport './labor-record-complete.scss'\r\n// service\r\nimport { putPendingLaborService } from './../../service/pendingLabor'\r\n\r\n const LaborRecordComplete = (props) => {\r\n    const {pendingLabor, pendingLaborRecord, getPendingLaborRecord } = useContext(GlobalContext);\r\n    let { id } = useParams();\r\n    const [page, setPage] = useState(0);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        getPendingLaborRecord(id)\r\n      }, [page]);\r\n\r\n \r\n    const stopTimer = () =>{\r\n        let serviceParams = {\r\n            STOP_TIME: null,\r\n        }\r\n        // putPendingLaborService(id, serviceParams).then((res)=>{\r\n        //     console.log(res)\r\n        // })\r\n        history.push('/review-timer')\r\n        console.log('stop')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { pendingLaborRecord !== undefined ?\r\n                <> \r\n                    <UiPageHeader content={Constants.LABORCONFIRM} track />\r\n                    <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                        <Col className=\"gutter-row\" span={12}>\r\n                            <div>\r\n                                <UiGrid title={Constants.WORKORDER} number={pendingLaborRecord.WORK_ORDER_NUMBER} desc={pendingLaborRecord.WO_DESCRIPTION} />\r\n                                <UiGrid title={Constants.CUSTOMER} number={pendingLaborRecord.CUST_NAME} />\r\n                                <UiGrid title={Constants.PLANT} number={pendingLaborRecord.INVENTORY_NUMBER} desc={pendingLaborRecord.INVENTORY_NAME} />\r\n                                <UiGrid title={Constants.DEPARTMENT} number={pendingLaborRecord.DEPT_CODE} desc={pendingLaborRecord.DEPT_NAME} />\r\n                                <UiGrid title={Constants.WORKCELLS} number={pendingLaborRecord.WORK_CELL_KEY} desc={pendingLaborRecord.WORK_CELL_NAME} />\r\n                                <UiGrid title={Constants.EMPLOYEE} number={pendingLaborRecord.EMPLOYEE_KEY} desc={pendingLaborRecord.EMPLOYEE_NAME} />\r\n                                <UiGrid title={Constants.LOBARACTIVITY}  number={pendingLaborRecord.WORKCENTER_NAME} />\r\n                            </div>\r\n                        </Col>\r\n                        <Col className=\"gutter-row\" span={12}>\r\n                            <div className=\"big-timer\">\r\n                                <UiTimerButtonComplete \r\n                                    name=\"Complete\" \r\n                                    time={pendingLaborRecord.START_TIME}\r\n                                    hours='HoursMinutes' \r\n                                    txtColor=\"black\" \r\n                                    color=\"white\" \r\n                                    border=\"black\"\r\n                                    width=\"250px\" \r\n                                    height=\"250px\"\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n                        {/* <Col className=\"gutter-row\" span={5}>\r\n                            <div>\r\n                                <UiTimerButton name=\"Stop Timer\" time='and' hours='Review Labor' color=\"red\" timerHandler={stopTimer}/>\r\n                            </div>\r\n                        </Col> */}\r\n                    </Row>\r\n                 </> \r\n                : null}\r\n           \r\n        </>\r\n    )\r\n}\r\nexport default LaborRecordComplete","import React from 'react'\r\nimport { Dropdown, Icon, Menu, Tooltip, message } from 'antd'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport { MenuOutlined , UserOutlined } from '@ant-design/icons';\r\nimport {deletePendingLaborService} from './../../service/pendingLabor'\r\nclass MaintenancePageDetailDropdown extends React.Component {\r\n  refresh = () => true\r\n  deleteItem = (e) =>{\r\n    return deletePendingLaborService(e).then(res=>{\r\n        if(res){\r\n            message.success('successfully deleted');\r\n            setTimeout(function(){ window.location.reload(false); }, 2000);\r\n        }\r\n    })\r\n}\r\n  render() {\r\n    const {\r\n      match,\r\n      itemKey,\r\n      allowDelete = true,\r\n      allowEdit,\r\n      deleteTooltip,\r\n      deleteFunction,\r\n    } = this.props\r\n\r\n    const menuItems = (\r\n      <Menu>\r\n        <Menu.Item key=\"0\">\r\n            <Link to={`${match.url}/${itemKey}`}>View</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"1\">\r\n          <Link to={`${match.url}/edit/${itemKey}`}>{allowEdit ? 'Edit' : 'View'}</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key='delete' icon={<UserOutlined />}>  \r\n            <a href=\"#\" onClick={(e) => { if (window.confirm('Are you sure you wish to delete this item?')) this.deleteItem(itemKey) } }>\r\n                Delete\r\n            </a>\r\n        </Menu.Item>\r\n      </Menu>\r\n    )\r\n\r\n    return (\r\n      <Dropdown overlay={menuItems} trigger={['click']}>\r\n        <a className=\"ant-dropdown-link\" href=\"#\">\r\n         <MenuOutlined />\r\n        </a>\r\n      </Dropdown>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(MaintenancePageDetailDropdown)","import React, { Component } from 'react';\r\nimport { Input, Button, Select, Table ,Menu, Dropdown, message } from 'antd';\r\nimport './labor-review-and-posting.scss'\r\nimport { getLaborPostingFilterService, getPendingLaborService, deletePendingLaborService } from './../../service/pendingLabor'\r\nimport Spinner from './../../views/Spinner'\r\nimport MaintenancePageDetailDropdown from './../../views/MainHamber/MaintenancePageDetailDropdown'\r\nimport { AgGridReact } from 'ag-grid-react'\r\n\r\nclass LaborReviewAndPosting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { match, permissions } = this.props\r\n        this.state = {\r\n          columnDefs: [\r\n            {\r\n              headerName: 'KEY',\r\n              field: 'KEY',\r\n              pinned: true,\r\n              cellClass: ['lock-pinned', 'stringType'],\r\n              width: 125,\r\n              filter: 'agTextColumnFilter',\r\n            },\r\n            {\r\n              headerName: 'WORK_ORDER_NUMBER',\r\n              field: 'WORK_ORDER_NUMBER',\r\n              pinned: true,\r\n              cellClass: ['lock-pinned', 'stringType'],\r\n              width: 125,\r\n              filter: 'agTextColumnFilter',\r\n            },\r\n            {\r\n              headerName: 'CUST_NAME',\r\n              field: 'CUST_NAME',\r\n              width: 200,\r\n              filter: 'agTextColumnFilter',\r\n            },\r\n            {\r\n              headerName: 'EMPLOYEE_NAME',\r\n              field: 'EMPLOYEE_NAME',\r\n              width: 200,\r\n              filter: 'agTextColumnFilter',\r\n            },\r\n            {\r\n              headerName: 'LABOR_CLASS',\r\n              field: 'LABOR_CLASS',\r\n              cellStyle: { textAlign: 'center' },\r\n              width: 150,\r\n              filter: 'agNumberColumnFilter',\r\n              tooltipField: 'LABOR_CLASS',\r\n            },\r\n            {\r\n              headerName: 'WORK_CELL_NAME',\r\n              field: 'WORK_CELL_NAME',\r\n              cellStyle: { textAlign: 'center' },\r\n              width: 145,\r\n              filter: 'agNumberColumnFilter',\r\n              tooltipField: 'WORK_CELL_NAME',\r\n            },\r\n            {\r\n              headerName: 'START_TIME',\r\n              field: 'START_TIME',\r\n              cellStyle: { textAlign: 'left' },\r\n              filter: 'agTextColumnFilter',\r\n              width: 190,\r\n            },\r\n            {\r\n              headerName: 'STOP_TIME',\r\n              field: 'STOP_TIME',\r\n              cellStyle: { textAlign: 'left' },\r\n              filter: 'agTextColumnFilter',\r\n              width: 190,\r\n            },\r\n            {\r\n              headerName: 'LABOR_TIME',\r\n              field: 'LABOR_TIME',\r\n              cellStyle: { textAlign: 'center' },\r\n              width: 150,\r\n              sort: 'desc',\r\n            },\r\n            {\r\n              headerName: 'LABOR_RATE_TYPE',\r\n              field: 'LABOR_RATE_TYPE',\r\n              cellStyle: { textAlign: 'center' },\r\n              width: 150,\r\n              sort: 'desc',\r\n            },\r\n            {\r\n              headerName: null,\r\n              cellStyle: { border: '0px' },\r\n              cellRendererFramework: row => (\r\n                <MaintenancePageDetailDropdown\r\n                  itemKey={row.data.KEY}\r\n                  allowDelete={true}\r\n                  allowEdit={true}\r\n                  deleteTooltip=\"Sales Classes cannot be deleted\"\r\n                />\r\n              ),\r\n              width: 50,\r\n              pinned: 'right',\r\n              sortable: false,\r\n              filter: false,\r\n              menuTabs: [],\r\n              resizable: false,\r\n              selectable: false,\r\n            },\r\n          ],\r\n          defaultColDef: { sortable: true, filter: true, resizable: true, menuTabs: ['filterMenuTab'] },\r\n          rowData: [],\r\n          errors: [],\r\n          printMode: /print/g.test(match),\r\n          inputValue:{\r\n            workOrder:''\r\n          }\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.onChangeHandler = this.onChangeHandler.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        getPendingLaborService(this.state.inputValue.workOrder)\r\n        .then(this.assignListingData)\r\n        .catch(error => console.log(error))\r\n    }\r\n    assignListingData = rowData => {\r\n      if (rowData) {\r\n        const formattedrowData = rowData.map(data => {\r\n          return {\r\n            KEY:data.KEY,\r\n            WORK_ORDER_NUMBER: data.WORK_ORDER_NUMBER,\r\n            CUST_NAME: data.CUST_NAME,\r\n            EMPLOYEE_NAME: data.EMPLOYEE_NAME,\r\n            LABOR_CLASS: data.LABOR_CLASS,\r\n            WORK_CELL_NAME: data.WORK_CELL_NAME,\r\n            START_TIME: data.START_TIME,\r\n            STOP_TIME: data.STOP_TIME,\r\n            LABOR_TIME: data.LABOR_TIME,\r\n            LABOR_RATE_TYPE: data.LABOR_RATE_TYPE\r\n          }\r\n        })\r\n        this.setState({ rowData: formattedrowData })\r\n      }\r\n    }\r\n\r\n    handleError = (e, title) => {\r\n      const { errors } = this.state\r\n      const { setErrorState } = this.props\r\n      let errorData\r\n      const currentActivity = 'selecting Data to Display Sales Class Listing'\r\n      if (e.data) {\r\n        errorData = { ...e.data, currentActivity }\r\n      } else {\r\n        errorData = {\r\n          title,\r\n          sourceType: 'Network',\r\n          details: e.toString(),\r\n          sourceName: 'SalesClassListing.js',\r\n          currentActivity,\r\n          timestamp: Date().toString(),\r\n        }\r\n      }\r\n      console.log(e)\r\n      errors.push(errorData)\r\n      this.setState({ errors })\r\n      // setErrorState()\r\n    }\r\n\r\n    handleClick(event) {\r\n        event.preventDefault();\r\n        getLaborPostingFilterService(this.state.inputValue.workOrder)\r\n        .then((res) => this.setState({ rowData: res }))\r\n        .catch(error => console.log(error))\r\n    }\r\n    onChangeHandler(event){\r\n        this.setState({\r\n            inputValue:{\r\n                workOrder:event.target.value\r\n            }\r\n        })\r\n    }\r\n    onSelectChange = selectedRowKeys => {\r\n        console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n        this.setState({ selectedRowKeys });\r\n    };\r\n    render() {\r\n      const { Option } = Select;\r\n      const { columnDefs, defaultColDef, rowData, errors, printMode, selectedRowKeys, inputValue } = this.state\r\n      const rowSelection = {\r\n        selectedRowKeys,\r\n        onChange: this.onSelectChange,\r\n      };\r\n      const gridOptions = {\r\n        domLayout: printMode ? 'print' : 'normal',\r\n        popupParent: document.querySelector('body')\r\n        // rowClassRules: {\r\n        //   'inactive-row-item': params => params.data.ACTIVE_SALES_CLASS !== 'Yes',\r\n        // },\r\n      }\r\n      return errors.length ? (\r\n            \"\"\r\n          ) : (\r\n            <div\r\n            className=\"ag-theme-balham\"\r\n            style={{ height: '600px'}}\r\n        >\r\n            <div className=\"labor-review-filter\">\r\n                <div className=\"__work-order\">\r\n                    <div className=\"__mr-2\">\r\n                        <p>Plant</p>\r\n                    </div>\r\n                    <div>\r\n                    <Input.Group compact>\r\n                        <Select defaultValue={'All'}  name=\"plant\">\r\n                            <Option value=\"one\" >{\"one\"}</Option>\r\n                        </Select>\r\n                    </Input.Group>\r\n                    </div>\r\n                </div>\r\n                <div className=\"__work-order mt-2 mb-2\">\r\n                    <div className=\"__mr-1\">\r\n                        <p>Work Order</p>\r\n                    </div>\r\n                    <div>\r\n                        <Input name=\"workOrder\" onChange={this.onChangeHandler} value={inputValue.workOrder} />\r\n                    </div>\r\n                    <div className=\"ml-10\">\r\n                        <Button type=\"primary\" onClick={this.handleClick}>Enter</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <AgGridReact\r\n              animateRows\r\n              suppressRowClickSelection\r\n              defaultColDef={defaultColDef}\r\n              columnDefs={columnDefs}\r\n              rowData={rowData}\r\n              gridOptions={gridOptions}\r\n              scrollbarWidth={8}\r\n            />\r\n        </div>\r\n      )\r\n    }\r\n}\r\nexport default LaborReviewAndPosting","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Radio,\r\n    Select,\r\n    Input,\r\n    Col,\r\n    DatePicker,\r\n    TimePicker,\r\n    Row,\r\n    Button,\r\n    message\r\n  } from 'antd';\r\n\r\nimport moment from 'moment';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\r\n  //components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport UiGrid from './../../views/UiGrid'\r\nimport UiTimerButton from './../../views/UiTimerButton'\r\nimport Spinner from './../../views/Spinner'\r\nimport { convertMonthToNumber, convertDateTime } from './../../utile/helpers' \r\n//Constants\r\nimport Constants from './../../constants'\r\n//scss \r\nimport './labor-review-and-posting.scss'\r\n  // service\r\nimport { getProgressTimeStopService, putPendingLaborService } from './../../service/pendingLabor'\r\nconst { Option } = Select;\r\nconst format = 'HH:mm';\r\nconst { TextArea } = Input;\r\nconst dateFormat = 'DD-MM-YYYY';\r\n\r\nconst LaborReviewAndPostingEdit = () => {\r\n  const history = useHistory();\r\n  const {pendingLaborRecord,panelShop, workCellData, getWorkCell, getPanalShop, getPendingLaborRecord } = useContext(GlobalContext);\r\n  const [page, setPage] = useState([]);\r\n  const [note, setNote] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [stopTime, setStopTime] = useState('');\r\n  const [stopDate, setStopDate] = useState('');\r\n  const [laborPerform, setLaborPerform] = useState('');\r\n  const [laborRate, setRaborRate] = useState(Constants.LABOR_RATE[0]);\r\n  let { id } = useParams();\r\n    useEffect(() => {\r\n      getProgressTimeStopService(id).then(res=>{\r\n        setPage(res[0])\r\n        let start = res[0].START_TIME.split(\" \");\r\n        let stop = res[0].STOP_TIME !== null ? res[0].STOP_TIME.split(\" \"): ''\r\n        console.log(convertMonthToNumber(start[0]))\r\n        setStartTime(start[1])\r\n        setStartDate(convertMonthToNumber(start[0]))\r\n        setStopTime(stop[1])\r\n        setStopDate(convertMonthToNumber(stop[0]))\r\n        setLaborPerform(res[0].INVENTORY_NAME)\r\n      })\r\n    }, [1]);\r\n\r\n    const onChange = (e) => {\r\n      setNote(e.target.value);\r\n    }\r\n    const onChangeStartTime = (time, timeString) =>{\r\n      setStartTime(timeString);\r\n    }\r\n    const onChangeStopTime = (time, timeString) =>{\r\n        setStopTime(timeString);\r\n    }\r\n    const onChangeStartDate = (date, dateString) =>{\r\n        setStartDate(dateString);\r\n    }\r\n    const onChangeStopDate = (date, dateString) =>{\r\n        setStopDate(dateString);\r\n    }\r\n    const onChangeRate = (value) =>{\r\n      setRaborRate(value)\r\n    }\r\n    const onChangeLaborPerform = (value) =>{\r\n      setLaborPerform(value)\r\n    }\r\n    const cancleChanges = () =>{\r\n      history.goBack();\r\n    }\r\n    const saveChange = () =>{\r\n      let start_time = convertDateTime(startDate,startTime)\r\n      let stop_time = convertDateTime(stopDate,stopTime)\r\n        let serviceParams = {\r\n            PLANT_KEY: page.PLANT_KEY,\r\n            DEPARTMENT_KEY: page.DEPARTMENT_KEY,\r\n            EMPLOYEE_KEY: page.EMPLOYEE_KEY,\r\n            WORK_CENTER_KEY: page.WORK_CENTER_KEY,\r\n            WORK_CELL_KEY: page.WORK_CELL_KEY,\r\n            LABOR_CLASS: null,\r\n            WORK_ORDER_NUMBER: page.WORK_ORDER_NUMBER,\r\n            START_TIME: start_time,\r\n            STOP_TIME: stop_time,\r\n            LABOR_TIME: null,\r\n            LABOR_RATE_TYPE: null,\r\n            NOTE:note,\r\n            STATUS: \"C\"\r\n        }\r\n        console.log(laborRate, start_time, stop_time)\r\n        putPendingLaborService(page.KEY, serviceParams).then((res)=>{\r\n          message.success({ content: 'Successfully Updated ' });\r\n          history.push(`/labor-review-and-posting`)\r\n        })\r\n    }\r\n    const contentHtmlForRate = <>\r\n        {Constants.LABOR_RATE.map((item, index)=><Option key={index} value={item} >{item}</Option>)}\r\n    </>;\r\n    \r\n    return (\r\n      <>\r\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n      <form  className=\"labor-record-form\">\r\n        <Col className=\"gutter-row\" span={20}>\r\n          <div>\r\n            <UiPageHeader content={Constants.WORKCELL_PROGRESS_TIMERS} />\r\n            <UiGrid title=\"Work Order \" number={page.WORK_ORDER_NUMBER} />\r\n            <UiGrid title=\"Customar \" number={page.CUST_NAME} />\r\n            <UiGrid title=\"Work Cell \" number={page.WORK_CELL_NAME} />\r\n            <UiGrid title=\"Employee \" number={page.EMPLOYEE_NAME} />\r\n            <UiGrid title=\"Labor Performed\" >\r\n              <Input.Group compact>\r\n              <Select value={laborPerform} onChange={onChangeLaborPerform} name=\"laborPerformed\">\r\n                <Option value={page.INVENTORY_NAME} onChange={onChange}>{page.INVENTORY_NAME}</Option>\r\n              </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Start Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact >\r\n                    <DatePicker onChange={onChangeStartDate} value={moment(startDate, 'DD-MM-YY')} format={dateFormat}/>\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStartTime} value={moment(startTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Stop Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact>\r\n                    <DatePicker onChange={onChangeStopDate} value={moment(stopDate, dateFormat)} format={dateFormat} />\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStopTime} value={moment(stopTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Rate\" >\r\n              <Input.Group compact>\r\n                <Select value={laborRate} onChange={onChangeRate} name=\"laborRate\">\r\n                  {contentHtmlForRate}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Hours\" number={pendingLaborRecord.LABOR_TIME} />\r\n            <div>\r\n              <p>Note *</p>\r\n              <TextArea rows={4} name='note' value={note} onChange={onChange} placeholder=\"Note\"/>\r\n            </div>\r\n            <div className=\"footer-button\">\r\n                <Button \r\n                    type=\"primary\" \r\n                    style={{backgroundColor:'red'}} \r\n                    className=\"time-button\" \r\n                    onClick={cancleChanges} \r\n                > <b>Cancel <br></br> Do not save changes </b>\r\n                </Button>\r\n                <Button \r\n                    type=\"primary\" \r\n                    className=\"time-button\" \r\n                    onClick={saveChange} \r\n                    style={{padding: '27px'}} \r\n                > <b>Save Changes</b> \r\n                </Button>  \r\n            </div>\r\n          </div>\r\n        </Col>\r\n        </form>\r\n    </Row> \r\n      </>\r\n    )\r\n}\r\nexport default LaborReviewAndPostingEdit","import React, {useState, useEffect, useContext} from 'react'\r\n// ant\r\nimport { Table, Tag , Button} from 'antd';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n// Router\r\nimport {useHistory, useParams} from 'react-router-dom';\r\n// service\r\nimport { getListLaborAuditTrail } from './../../service/pendingLabor'\r\nimport Spinner from './../../views/Spinner'\r\nconst columns = [\r\n    {\r\n        title: '',\r\n        dataIndex: 'TRANSACTION_TYPE',\r\n        key: '',\r\n    },\r\n    {\r\n        title: 'Date',\r\n        dataIndex: 'ENTRY_DATE',\r\n        key: 'ENTRY_DATE',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Edit by',\r\n        dataIndex: 'ENTRY_FORM',\r\n        key: 'ENTRY_FORM',\r\n    },\r\n    {\r\n        title: 'Work Order',\r\n        dataIndex: 'ORIGINAL_WORK_ORDER_NUMBER',\r\n        key: 'ORIGINAL_WORK_ORDER_NUMBER',\r\n    },\r\n    {\r\n        title: 'Work Cell',\r\n        dataIndex: 'ORIGINAL_WORK_CELL_KEY',\r\n        key: 'ORIGINAL_WORK_CELL_KEY',\r\n    },\r\n    {\r\n        title: 'Employee',\r\n        dataIndex: 'ORIGINAL_EMPLOYEE_KEY',\r\n        key: 'ORIGINAL_EMPLOYEE_KEY',\r\n    },\r\n    {\r\n        title: 'Labor Performed',\r\n        dataIndex: 'ORIGINAL_WORK_CELL_KEY',\r\n        key: 'ORIGINAL_WORK_CELL_KEY',\r\n    },\r\n    {\r\n        title: 'Start Time',\r\n        dataIndex: 'ORIGINAL_START_TIME',\r\n        key: 'ORIGINAL_START_TIME',\r\n    },\r\n    {\r\n        title: 'Stop Time',\r\n        dataIndex: 'ORIGINAL_STOP_TIME',\r\n        key: 'ORIGINAL_STOP_TIME',\r\n    },\r\n    {\r\n      title: 'Note',\r\n      key: 'NOTE',\r\n      dataIndex: 'NOTE',\r\n      render: text => <a>{text}</a>\r\n    }\r\n  ];\r\nconst LaborReviewAndPostingView = () => {\r\n    const [page, setPage] = useState(1);\r\n    const [data, setData] = useState(1);\r\n    const { getWorkCell, workCellData , getKeyData, keyData, getPanalShop ,keyEmpty} = useContext(GlobalContext);\r\n    const history = useHistory();\r\n    let { id } = useParams();\r\n    useEffect(() => {\r\n        getListLaborAuditTrail(id).then(res=>setData(res))\r\n    }, [page]);\r\n    const cancleChanges = () =>{\r\n        history.goBack();\r\n    }\r\n    return (\r\n        <div>\r\n            {data.length > 0 ?<Table columns={columns} dataSource={data} /> : \"NO DATA\" }\r\n            <div className=\"footer-cancle\">\r\n                <Button \r\n                    type=\"primary\" \r\n                    className=\"time-button\" \r\n                    onClick={cancleChanges}\r\n                    style={{backgroundColor:'rgba(0, 0, 0, 0.65)'}}  \r\n                > <b>Close This Page</b> \r\n                </Button>  \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LaborReviewAndPostingView","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Radio,\r\n    Select,\r\n    Input,\r\n    Col,\r\n    DatePicker,\r\n    TimePicker,\r\n    Row,\r\n    Button,\r\n    message\r\n  } from 'antd';\r\n\r\nimport moment from 'moment';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\r\n  //components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport { convertMonthToNumber, convertDateTime } from './../../utile/helpers' \r\nimport UiGrid from './../../views/UiGrid'\r\n//Constants\r\nimport Constants from './../../constants'\r\n//scss \r\nimport './labor-review-and-posting.scss'\r\n  // service\r\nimport { getProgressTimeStopService, putPendingLaborService } from './../../service/pendingLabor'\r\nimport { getPanelShopService,getWorkOrderService, getWorkCellService } from './../../service/employee';\r\n\r\nconst { Option } = Select;\r\nconst format = 'HH:mm';\r\nconst { TextArea } = Input;\r\nconst dateFormat = 'YYYY-MM-DD';\r\n\r\nconst LaborReviewAndPostingAdd = () => {\r\n  const history = useHistory();\r\n  const {pendingLaborRecord,panelShop, workCellData, getWorkCell, getPanalShop, getPendingLaborRecord } = useContext(GlobalContext);\r\n  const [customar, setCustomar] = useState('');\r\n  const [page, setPage] = useState([]);\r\n  const [note, setNote] = useState('');\r\n  const [workOrderNumber, setWorkOrderNumber] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [stopTime, setStopTime] = useState('');\r\n  const [stopDate, setStopDate] = useState('');\r\n  const [workCell, setWorkCell] = useState('');\r\n  const [employe, setEmploye] = useState('');\r\n  const [workCenterName, setWorkCenterName] = useState('');\r\n  const [laborRate, setRaborRate] = useState(Constants.LABOR_RATE[0]);\r\n  const [employeeUpdate, setEmployeeUpdate] = useState([]);\r\n  const [workCellUpdate, setWorkCellUpdate] = useState([])\r\n  const [laborActivityUpdate, setLaborActivityUpdate] = useState([])\r\n  let { id } = useParams();\r\n    useEffect(() => {\r\n      getWorkCellService().then(res=>{\r\n        setWorkCell(res[0].WORK_CELL_NAME)\r\n        setWorkCellUpdate(res)\r\n      })\r\n    }, [1]);\r\n    const onChangeWorkCell = (e) => {\r\n      workCellUpdate.map(item =>{\r\n        if(item.WORK_CELL_NAME === e){\r\n          setWorkCell(e)\r\n          getPanelShopService(item.DEPARTMENT_KEY).then(res=>{\r\n            setWorkCenterName(res[0].DESCRIPTION)\r\n            setEmployeeUpdate(res)\r\n            setEmploye(res[0].NAME)\r\n          })\r\n        }\r\n      })\r\n    }\r\n    const onChangeCustomar = (e) =>{\r\n      setCustomar(e.target.value);\r\n    }\r\n    const onChange = (e) => {\r\n      setNote(e.target.value);\r\n    }\r\n    const onChangeEmployee = (e) =>{\r\n      let update = workCellData.map(item=>{\r\n        if(e === item.WORK_CELL_NAME){\r\n          return item\r\n        }\r\n      })    \r\n      setEmploye(e)\r\n    }\r\n    const completeStartNew = () =>{\r\n      history.push('/')\r\n    }\r\n    const onChangeStartTime = (time, timeString) =>{\r\n        setStartTime(timeString);\r\n    }\r\n    const onChangeStopTime = (time, timeString) =>{\r\n        setStopTime(timeString);\r\n    }\r\n    const onChangeStartDate = (date, dateString) =>{\r\n        setStartDate(dateString);\r\n    }\r\n    const onChangeStopDate = (date, dateString) =>{\r\n        setStopDate(dateString);\r\n    }\r\n    const onChangeRate = (value) =>{\r\n        setRaborRate(value)\r\n    }\r\n    const onChangeWorkOrder =(e) =>{\r\n      getWorkOrderService(e.target.value).then(res=>{\r\n        setLaborActivityUpdate(res)\r\n        console.log(res)\r\n      })\r\n      \r\n      setWorkOrderNumber(e.target.value)\r\n    }\r\n    const cancleChanges = () =>{\r\n      history.goBack();\r\n    }\r\n    const saveChange = () =>{\r\n      let start_time = convertDateTime(startDate,startTime)\r\n      let stop_time = convertDateTime(stopDate,stopTime)\r\n      let serviceParams = {\r\n          PLANT_KEY: workCellUpdate === null ? page.PLANT_KEY : workCellUpdate.PLANT_KEY,\r\n          DEPARTMENT_KEY: workCellUpdate === null ? page.DEPARTMENT_KEY : workCellUpdate.DEPARTMENT_KEY,\r\n          EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n          WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n          WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n          LABOR_CLASS: null,\r\n          WORK_ORDER_NUMBER: workOrderNumber,\r\n          START_TIME: start_time,\r\n          STOP_TIME: stop_time,\r\n          LABOR_TIME: null,\r\n          LABOR_RATE_TYPE: null,\r\n          STATUS: \"C\"\r\n      }\r\n        console.log('saveChange', {\r\n          start_time,\r\n          stop_time,\r\n            note,\r\n            laborRate,\r\n            startTime,\r\n            startDate,\r\n            workOrderNumber,\r\n            customar\r\n        })\r\n        message.success({ content: 'please check data in console '});\r\n        // putPendingLaborService(pendingLaborRecord.KEY, serviceParams).then((res)=>{\r\n        //   history.push(`/labor-record-complete/${pendingLaborRecord.KEY}`)\r\n        // })\r\n    }\r\n    const contentHtml = <>\r\n      {workCellUpdate.length > 0 ? workCellUpdate.map((item, index)=><Option key={index} value={item.WORK_CELL_NAME} >{item.WORK_CELL_NAME}</Option>) : null}\r\n    </>;\r\n    const contentHtmlForEmployee = <>\r\n      {employeeUpdate.length > 0 ? employeeUpdate.map((item, index)=><Option key={index} value={item.NAME} >{item.NAME}</Option>) : null}\r\n    </>;\r\n\r\n    return (\r\n      <>\r\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n        <Col className=\"gutter-row\" span={20}>\r\n          <div>\r\n            <UiPageHeader content={Constants.WORKCELL_PROGRESS_TIMERS} />\r\n            <UiGrid title=\"Work Order\" >\r\n              <Input placeholder=\"Enter Work Order\" value={workOrderNumber} name=\"workOrder\" onChange={onChangeWorkOrder} />\r\n            </UiGrid>\r\n            <UiGrid title=\"Customar\" >\r\n              <Input placeholder=\"Customar\" name=\"customar\" value={customar} onChange={onChangeCustomar} />\r\n            </UiGrid>\r\n            <UiGrid title=\"Work Cell\" >\r\n              <Input.Group compact>\r\n                <Select value={workCell} onChange={onChangeWorkCell}>\r\n                  {contentHtml}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Employee\" >\r\n              <Input.Group compact>\r\n                <Select value={employe} onChange={onChangeEmployee}>\r\n                  {contentHtmlForEmployee}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Activity\" >\r\n              <Input.Group compact>\r\n                <Select value={workCenterName} >\r\n                  {/* <Option >{workCenterName}</Option> */}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Start Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact >\r\n                    <DatePicker onChange={onChangeStartDate}  format={dateFormat}/>\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStartTime}  />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Stop Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact>\r\n                    <DatePicker onChange={onChangeStopDate}  format={dateFormat} />\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStopTime}  />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Hours\" number={pendingLaborRecord.LABOR_TIME} />\r\n            <div >\r\n                <p>Note *</p>\r\n                <TextArea rows={4} name='note' value={note}  placeholder=\"Note\"/>\r\n            </div>\r\n            <div className=\"footer-button\">\r\n                <Button \r\n                    type=\"primary\" \r\n                    style={{backgroundColor:'red'}} \r\n                    className=\"time-button\" \r\n                    onClick={cancleChanges} \r\n                > <b>Cancel <br></br> Do not save changes </b>\r\n                </Button>\r\n                <Button \r\n                    type=\"primary\" \r\n                    className=\"time-button\" \r\n                    onClick={saveChange} \r\n                    style={{padding: '27px'}} \r\n                > <b>Save Changes</b> \r\n                </Button>  \r\n            </div>\r\n          </div>\r\n        </Col>\r\n\r\n    </Row>\r\n      </>\r\n    )\r\n}\r\nexport default LaborReviewAndPostingAdd","import WorkCell from './../pages/work-cell/work-cell';\r\nimport PanelShop from './../pages/panel-shop/panel-shop';\r\nimport JobPosting from './../pages/job-posting/job-posting';\r\nimport LaborActivity from './../pages/labor-activity/labor-activity';\r\nimport LaborConfirm from './../pages/labor-confirm/labor-confirm';\r\nimport ProgressTimers from './../pages/progress-timers/progress-timers';\r\nimport ReviewTimer from './../pages/review-timer/review-timer';\r\nimport ProgressTimeStop from './../pages/progress-time-stop/progress-time-stop';\r\nimport LaborRecordComplete from './../pages/labor-record-complete/labor-record-complete'\r\nimport LaborReviewAndPosting from './../pages/labor-review-and-posting/labor-review-and-posting';\r\nimport LaborReviewAndPostingEdit from  './../pages/labor-review-and-posting/labor-review-and-posting-edit'\r\nimport LaborReviewAndPostingView from './../pages/labor-review-and-posting/labor-review-and-posting-view'\r\nimport LaborReviewAndPostingAdd from './../pages/labor-review-and-posting/labor-review-and-posting-add'\r\nimport LaborTracker from './../pages/labor-tracker/labor-tracker'\r\nexport const Routes = [\r\n    {\r\n        component: WorkCell,\r\n        path: '/work-cell',\r\n        exact: true,\r\n        title: 'Work Cell'\r\n    },\r\n    {\r\n        component: PanelShop,\r\n        path: '/panel-shop/:id',\r\n        isBreadcrumbVisible: true,\r\n        exact: true,\r\n        title: 'PanelShop'\r\n    },\r\n    {\r\n        component: JobPosting,\r\n        path: '/job-posting-employee/:id',\r\n        exact: true,\r\n        title: 'JobPosting'\r\n    },\r\n    {\r\n        component: LaborActivity,\r\n        path: '/labor-activity/:id',\r\n        exact: true,\r\n        title: 'LaborActivity'\r\n    },\r\n    {\r\n        component: LaborConfirm,\r\n        path: '/labor-confirm',\r\n        exact: true,\r\n        title: 'labor-confirm'\r\n    },\r\n    {\r\n        component: ProgressTimers,\r\n        path: '/progress-timers',\r\n        exact: true,\r\n        title: 'ProgressTimers'\r\n    },\r\n    {\r\n        component: ReviewTimer,\r\n        path: '/review-timer',\r\n        exact: true,\r\n        title: 'ReviewTimer'\r\n    },\r\n    {\r\n        component: ProgressTimeStop,\r\n        path: '/progress-time-stop/:id',\r\n        exact: true,\r\n        title: 'ProgressTimeStop'\r\n    },\r\n    {\r\n        component: LaborRecordComplete,\r\n        path: '/labor-record-complete/:id',\r\n        exact: true,\r\n        title: 'LaborRecordComplete'\r\n    },\r\n    {\r\n        component: LaborReviewAndPosting,\r\n        path: '/labor-review-and-posting',\r\n        exact: true,\r\n        title: 'LaborReviewAndPosting'\r\n    },\r\n    {\r\n        component: LaborReviewAndPostingEdit,\r\n        path: '/labor-review-and-posting/edit/:id',\r\n        exact: true,\r\n        title: 'LaborReviewAndPostingEdit'\r\n    },\r\n    {\r\n        component: LaborReviewAndPostingView,\r\n        path: '/labor-review-and-posting/:id',\r\n        exact: true,\r\n        title: 'LaborReviewAndPosting'\r\n    },\r\n    {\r\n        component: LaborReviewAndPostingAdd,\r\n        path: '/labor-review-and-posting-add-labor-record',\r\n        exact: true,\r\n        title: 'LaborReviewAndPostingAdd'\r\n    },\r\n    {\r\n        component: LaborTracker,\r\n        path: '/labor-tracker',\r\n        exact: true,\r\n        title: 'LaborTracker'\r\n    }\r\n];\r\n","import React, { useState, useEffect, useContext } from 'react';\r\n//components\r\nimport UiGridProgress from './../../views/UiGridProgress'\r\nimport Spinner from './../../views/Spinner'\r\n// Router\r\nimport {useHistory} from 'react-router-dom';\r\n//antd\r\nimport { Input, Button, Select, Table ,Menu, Dropdown, message } from 'antd';\r\n// context\r\nimport { GlobalContext } from \"./../../context//GlobalState\";\r\nimport _ from 'lodash';\r\nimport moment from 'moment'\r\nimport './labor-tracker.scss'\r\n\r\nconst LaborTracker = () => {\r\n  const { getPendingLabor , pendingLabor, startTime} = useContext(GlobalContext);\r\n  const [page, setPage] = useState(1);\r\n  const [workCellValue, setWorkCellValue] = useState(\"All\");\r\n  const { Option } = Select;\r\n  const history = useHistory();\r\n    useEffect(() => {\r\n      getPendingLabor()\r\n    }, [page]);\r\n    const timerHandler = (key) =>{\r\n      history.push(`/progress-time-stop/${key}`)\r\n    }\r\n    const progressDataFilter = pendingLabor.length > 0 ? _.orderBy(pendingLabor, ['KEY'], ['desc']) : null\r\n    let tempalte\r\n    if(progressDataFilter){\r\n      let data =  _.filter(progressDataFilter, function(item) { return item.STOP_TIME === null });\r\n      tempalte = (\r\n        data.map((item, index)=>{\r\n          let itemStartTime = _.split(item.START_TIME, ' ');\r\n          let time = itemStartTime[1]\r\n          return  <UiGridProgress \r\n                key={index}\r\n                employe={item.EMPLOYEE_KEY} \r\n                wOrder={item.WORK_ORDER_NUMBER} \r\n                activity=\"22\" \r\n                start_time={time}\r\n                start_time_count={item.START_TIME}\r\n                employeName={item.EMPLOYEE_NAME}\r\n                wcName={item.WORK_CELL_NAME}\r\n                woDes={item.WO_DESCRIPTION}\r\n                timerHandler={() => timerHandler(item.KEY)} \r\n            />\r\n        })\r\n      )\r\n    }else{\r\n      return <Spinner />\r\n    }\r\n\r\n  return (\r\n    <>\r\n        <div className=\"labor-tracker\">\r\n            <div className=\"__work-order\">\r\n                <div className=\"__mr-2\">\r\n                    <p>Work Cell</p>\r\n                </div>\r\n                <div>\r\n                <Input.Group compact>\r\n                    <Select value={workCellValue}  name=\"workCell\">\r\n                        <Option value=\"All\" >{\"All\"}</Option>\r\n                    </Select>\r\n                </Input.Group>\r\n                </div>\r\n            </div>\r\n            <div style={{marginRight: \"25px\",textAlign:\"center\"}}>\r\n                <p >Click a timer to access <br></br> the job </p>\r\n            </div>\r\n        </div>\r\n        {tempalte}\r\n      \r\n    </>\r\n  ); \r\n}\r\n\r\nexport default LaborTracker;","import React, {useContext} from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport Breadcrumbs from './../views/Breadcrumbs'\r\n// context\r\nimport { GlobalContext } from \"./../context/GlobalState\";\r\nexport const Router = (props) => {\r\n    const { routes, defaultRoute } = props;\r\n    const { keyData } = useContext(GlobalContext);\r\n    return (\r\n        <Switch>\r\n            {routes.map((route, index) => {\r\n                const { component: RouteComponent, exact, path } = route;\r\n                return <Route\r\n                    exact={exact}\r\n                    key={index}\r\n                    path={path}\r\n                    render={(prop) =>{\r\n                        const crumbs = props.routes.filter(({ path }) => prop.match.path.includes(path)).map(({ path, ...rest }) => ({\r\n                          path: Object.keys(prop.match.params).length\r\n                            ? Object.keys(prop.match.params).reduce(\r\n                               (path, param) => path.replace(\r\n                                 `:${param}`, prop.match.params[param]\r\n                               ), path\r\n                              )\r\n                            : path,\r\n                          ...rest\r\n                        }));\r\n                        console.log(`Generated crumbs for ${crumbs}`);\r\n                        crumbs.map(({ title, path }) => console.log({ title, path }));\r\n                        return <div className=\"p-8\">\r\n                            {/* <Breadcrumbs crumbs={crumbs} /> */}\r\n                            <RouteComponent {...props} {...route} />\r\n                        </div>\r\n                        }\r\n                    } />;\r\n            })} \r\n            <Redirect to={defaultRoute} />\r\n        </Switch>\r\n    );\r\n};\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ArrowLeftOutlined  } from '@ant-design/icons';\r\nimport { Layout, Button } from 'antd';\r\nconst { Content } = Layout;\r\nexport default function BackButton() {\r\n    const history = useHistory();\r\n    let tempalate\r\n    // Back Button\r\n    const goBack = () => {\r\n        history.goBack();\r\n    }\r\n    console.log('---',window.location.pathname )\r\n    if(window.location.pathname === \"/work-cell\"){\r\n        tempalate= null\r\n    }else{\r\n        tempalate = (<Layout className=\"layout\">\r\n        <Content style={{ padding: '0 50px' }} > \r\n          <Button type=\"primary\" className=\"back-button\" onClick={goBack} icon={<ArrowLeftOutlined  />}>Back</Button>\r\n        </Content>\r\n      </Layout>)\r\n    }\r\n    if(window.location.pathname.includes(\"/labor-review-and-posting\")){\r\n        tempalate= null\r\n    }\r\n    if(window.location.pathname === \"/labor-tracker\"){\r\n        tempalate=null\r\n    }\r\n    return (\r\n        <>\r\n            {tempalate}\r\n        </>\r\n    )\r\n}\r\n","import React, { Suspense, useContext } from 'react';\nimport './App.scss';\n// Components\nimport UiHeader from './views/UiHeader';\nimport TopNavBar from './views/TopNavBar';\nimport Spinner from './views/Spinner';\n// Routers\nimport { Routes, Router } from './routes';\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\n// context\nimport { GlobalContext } from './context/GlobalState';\nimport { GlobalProvider } from './context/GlobalState';\n\n// Antd\nimport { Layout, Button } from 'antd';\nimport BackButton from './views/BackButton';\nconst { Content } = Layout;\n\nconst App = (props) => {\n  let location = useLocation();\n  const { keyData, getKeyData, getPendingLabor, isActive, isActiveFun } = useContext(GlobalContext);\n  let { id } = useParams();\n  return (\n    <GlobalProvider>\n      <Suspense fallback={<Spinner />}>\n        {' '}\n        {/* Show a loader component here as a fallback*/}\n        {location.pathname.includes('labor-review-and-posting') ? (\n          <UiHeader for=\"supervisor\" />\n        ) : (\n          <>\n            <UiHeader />\n            <TopNavBar />\n          </>\n        )}\n        <Layout className=\"layout\">\n          <Content style={{ padding: '0 50px' }}>\n            <Router routes={Routes} defaultRoute={Routes[0].path} />\n          </Content>\n        </Layout>\n        {/* <BackButton /> */}\n      </Suspense>\n    </GlobalProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\n//Grid\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}