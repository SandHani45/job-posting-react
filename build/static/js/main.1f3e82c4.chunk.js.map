{"version":3,"sources":["views/MainHamber/index.js","views/UiHeader/index.js","context/AppReducer.js","service/employee.js","service/pendingLabor.js","context/GlobalState.js","views/TopNavBar/index.js","views/Spinner/index.js","views/UiCard/index.js","views/UiPageHeader/index.js","constants/index.js","pages/work-cell/work-cell.js","pages/panel-shop/panel-shop.js","pages/job-posting/job-posting.js","pages/labor-activity/labor-activity.js","views/UiGrid/index.js","pages/labor-confirm/labor-confirm.js","views/UiTimerButton/index.js","views/UiGridProgress/index.js","pages/progress-timers/progress-timers.js","pages/review-timer/review-timer.js","pages/progress-time-stop/progress-time-stop.js","pages/labor-record-complete/labor-record-complete.js","views/HamberMenu/index.js","pages/labor-review-and-posting/labor-review-and-posting.js","pages/labor-review-and-posting/labor-review-and-posting-edit.js","pages/labor-review-and-posting/labor-review-and-posting-view.js","pages/labor-review-and-posting/labor-review-and-posting-add.js","routes/route-config.js","routes/routes.js","App.js","serviceWorker.js","index.js"],"names":["MainHamber","keyValue","data","history","useHistory","location","useLocation","overlay","onClick","e","key","push","pathname","Item","icon","UserOutlined","MenuOutlined","Header","Layout","UiHeader","props","Fragment","className","for","state","payload","type","workCellData","panelShop","keyData","laborActivity","laborConfirm","pendingLabor","pendingLaborRecord","startTime","isActive","laborPostingFilter","error","endPoint","getPanelShopService","id","axios","get","then","res","getPendingLaborService","getProgressTimeStopService","putPendingLaborService","body","put","getLaborPostingFilterService","wOrder","filterData","_","filter","item","STATUS","initialState","jobPosting","endTime","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","keyEmpty","Provider","value","getWorkCell","getPendingLabor","getPanalShop","getKeyData","keyName","splice","length","getWorkOrder","DEPARTMENT_KEY","getWorkOrderService","STATUS_MESSAGE","getLaborActivityService","getLaborConfirm","serviceParams","deptKey","woNo","plantKey","wcellKey","wcenterKey","employee","getLaborConfirmService","startTimer","count","isActiveFun","getPendingLaborRecord","pendingLaborKeyData","find","o","KEY","getLaborPostingFilter","TopNavBar","useContext","track","href","to","Spinner","size","style","background","padding","UiCard","text","onClickHandler","name","span","hoverable","UiPageHeader","content","PlusCircleOutlined","CONSTANTS","WORKCELL","JOBPOSTING","LABORCONFIRM","WORKORDER","CUSTOMER","PLANT","DEPARTMENT","WORKCELLS","EMPLOYEE","LOBARACTIVITY","WORKCELL_PROGRESS_TIMERS","LABOR_RATE","WorkCell","useState","page","useEffect","Constants","gutter","map","index","DEPARTMENT_NAME","WORK_CELL_NAME","panelShopClick","PanelShop","useParams","NAME","JobPosting","jobNumber","setJobNumber","onChange","event","target","workOrderPosting","LaborActivity","console","log","CODE","DESCRIPTION","code","PLANT_KEY","laborActivityClick","UiGrid","title","number","desc","seconds","setSeconds","setIsActive","interval","setInterval","clearInterval","xs","sm","md","lg","WO_NUMBER","WO_DESC","CUSTOMER_NAME","PLANT_NAME","EMP_NAME","offset","tempDate","Date","tempMonth","getMonth","finaleDateTime","getDate","getFullYear","join","toLocaleString","split","EMPLOYEE_KEY","WORK_CENTER_KEY","WORK_CELL_KEY","LABOR_CLASS","WORK_ORDER_NUMBER","parseInt","START_TIME","STOP_TIME","LABOR_TIME","LABOR_RATE_TYPE","post","UiTimerButton","timerHandler","time","hours","color","border","txtColor","width","height","UiGridProgress","employe","lactivity","start_time","start_time_count","employeName","wcName","woDes","styles","bold","fontWeight","colorGreen","ProgressTimers","progressDataFilter","orderBy","EMPLOYEE_NAME","WO_DESCRIPTION","Option","Select","TextArea","Input","ReviewTimer","setPage","note","setNote","workOrderNumber","setWorkOrderNumber","setStartTime","startDate","setStartDate","stopTime","setStopTime","stopDate","setStopDate","workCell","setWorkCell","setEmploye","workCenterName","setWorkCenterName","setRaborRate","employeeUpdate","setEmployeeUpdate","workCellUpdate","setWorkCellUpdate","convertMonthToNumber","month","daySplit","findIndex","convertDateTime","date","dateSplit","monthName","start","stop","WORKCENTER_NAME","contentHtml","contentHtmlForEmployee","onSubmit","preventDefault","stop_time","message","success","placeholder","CUST_NAME","Group","compact","defaultValue","INVENTORY_NAME","dateString","moment","format","use12Hours","timeString","rows","ProgressTimeStop","undefined","INVENTORY_NUMBER","DEPT_CODE","DEPT_NAME","LaborRecordComplete","withRouter","match","deleteItem","delete","setTimeout","window","reload","url","confirm","columns","dataIndex","render","record","LaborReviewAndPosting","onSelectChange","selectedRowKeys","setState","rowData","inputValue","workOrder","handleClick","bind","onChangeHandler","this","catch","rowSelection","rowKey","dataSource","Component","LaborReviewAndPostingEdit","laborRate","onChangeRate","contentHtmlForRate","backgroundColor","goBack","LaborReviewAndPostingView","setData","getListLaborAuditTrail","Routes","component","path","exact","LaborConfirm","Router","routes","defaultRoute","route","RouteComponent","Content","App","fallback","includes","ArrowLeftOutlined","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f3e82c4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button ,Menu, Dropdown, message } from 'antd';\r\nimport { MenuOutlined , UserOutlined } from '@ant-design/icons';\r\n// Router\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\n\r\nconst MainHamber = ({keyValue,data}) => {\r\n    const history = useHistory();\r\n    let location = useLocation();\r\n    const handleMenuClick = (e) => {\r\n        if(e.key === 'add'){\r\n            history.push(`${location.pathname}-add-labor-record`);\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Dropdown overlay= {\r\n                <Menu onClick={handleMenuClick}>\r\n                <Menu.Item key='add' icon={<UserOutlined />}>\r\n                    Add a Labor Record \r\n                </Menu.Item>\r\n              </Menu>\r\n            } >\r\n            <Button>\r\n                 <MenuOutlined />\r\n            </Button>\r\n            </Dropdown>\r\n        </div>\r\n    )\r\n}\r\nexport default MainHamber","import React from 'react'\r\nimport { Layout } from 'antd';\r\nimport MainHamber from './../MainHamber'\r\nconst { Header } = Layout;\r\n\r\nconst UiHeader = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Header>\r\n        <div className=\"logo\">\r\n          {\r\n            props.for === 'supervisor' \r\n              ? <div className=\"supervisor\"><MainHamber />  <h3 className=\"logo-white\">Logo</h3></div>\r\n              : <h3 className=\"logo-white\">Logo</h3>\r\n          }\r\n          \r\n        </div>\r\n      </Header>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default UiHeader\r\n","export default (state, {\r\n  payload, type\r\n}) => {\r\n    switch (type) {\r\n      case \"GET_WORK_CELL\":\r\n        return {\r\n          ...state,\r\n          workCellData: payload\r\n        };\r\n        case \"GET_PANEL_SHOP\":\r\n        return {\r\n          ...state,\r\n          panelShop: payload\r\n        };\r\n        case \"GET_KEY_DATA\":\r\n        return {\r\n          ...state,\r\n          keyData: [...state.keyData, payload]\r\n        };\r\n        case \"GET_KEY_DATA_EMPTY\":\r\n          return {\r\n            ...state,\r\n            keyData: []\r\n          };\r\n        case \"GET_WORK_ORDER\":\r\n        return {\r\n          ...state,\r\n          laborActivity: payload\r\n        };\r\n        case \"GET_LABOR_CONFIRM\":\r\n          return {\r\n            ...state,\r\n            laborConfirm: payload\r\n          };\r\n        case \"GET_PENDING_LABOR\":\r\n        return {\r\n          ...state,\r\n          pendingLabor: payload\r\n        };\r\n        case \"GET_PENDING_LABOR_RECORD\":\r\n          return {\r\n            ...state,\r\n            pendingLaborRecord: payload\r\n          };\r\n        case \"GET_START_TIME\":\r\n          return {\r\n            ...state,\r\n            startTime: payload\r\n          };\r\n        case \"GET_IS_ACTIVE\":\r\n        return {\r\n          ...state,\r\n          isActive: payload\r\n        };\r\n        case \"GET_LABOR_POSTING_FILTER\":\r\n          return {\r\n            ...state,\r\n            laborPostingFilter: payload\r\n          };\r\n        case \"ERROR\":\r\n          return {\r\n            ...state,\r\n            error: payload\r\n          };\r\n      default:\r\n        return state;\r\n    }\r\n  };","import axios from 'axios';\r\nconst endPoint = \"http://34.206.72.199:3010/api/pc\"\r\nexport const getWorkCellService = () => {\r\n    return axios.get(`${endPoint}/workCells/`).then((res) => res.data);\r\n};\r\nexport const getWorkCellIdService = (id) => {\r\n    return axios.get(`${endPoint}/workCells/${id}`).then((res) => res.data);\r\n};\r\nexport const getPanelShopService = (id) => {\r\n    return axios.get(`${endPoint}/employee/${id}`).then((res) => res.data);\r\n};\r\nexport const getWorkOrderService = (id) => {\r\n    return axios.get(`${endPoint}/checkWorkOrder/${id}`).then((res) => res.data);\r\n};\r\nexport const getLaborActivityService = (key,id) => {\r\n    return axios.get(`${endPoint}/laborActivity/${key}/${id}`).then((res) => res.data);\r\n};\r\n// export const getLaborConfirmService = ({deptKey, woNo, plantKey, wcellKey, wcenterKey, employee}) => {\r\n//     return axios.get(`${endPoint}/laborConfirm/${deptKey}/${woNo}/${plantKey}/${wcellKey}/${wcenterKey}/${employee}`).then((res) => res.data);\r\n// };\r\n// demo \r\nexport const getLaborConfirmService = ({deptKey, woNo, plantKey, wcellKey, wcenterKey, employee}) => {\r\n    return axios.get(`${endPoint}/laborConfirm/31/3443151/97/2/157/55`).then((res) => res.data);\r\n};\r\n","import axios from 'axios';\r\nimport _ from 'lodash'\r\nconst endPoint = \"http://34.206.72.199:3010/api/pc\"\r\n// Pending Labor\r\n//get\r\nexport const getPendingLaborService = () => {\r\n    return axios.get(`${endPoint}/pendingLabor`).then((res) => res.data);\r\n}\r\n//get:id\r\nexport const getProgressTimeStopService = (key) => {\r\n    return axios.get(`${endPoint}/pendingLabor/${key}`).then((res) => res.data);\r\n}\r\n//post\r\nexport const postPendingLaborService = (body) => {\r\n    return axios.post(`${endPoint}/pendingLabor`, body).then((res) => res.data);\r\n}\r\n\r\n// put\r\nexport const putPendingLaborService = (key, body) => {\r\n    return axios.put(`${endPoint}/pendingLabor/${key}`, body).then((res) => res.data);\r\n}\r\n\r\n// Delete\r\nexport const deletePendingLaborService = (key) => {\r\n    return axios.delete(`${endPoint}/pendingLabor/${key}`).then((res) => res.data);\r\n}\r\n\r\n// getLaborPostingFilter\r\nexport const getLaborPostingFilterService = (wOrder) => {\r\n    let filterData = {\r\n        wOrder:wOrder\r\n    }\r\n    return axios.get(`${endPoint}/pendingLabor/${' '}/${' '}/${filterData.wOrder}`).then((res) => {\r\n        return _.filter(res.data, function(item) { \r\n            if(item.STATUS === \"I\"){\r\n                return item\r\n            }\r\n         });\r\n    });\r\n}\r\n\r\n// listLaborAuditTrail\r\nexport const getListLaborAuditTrail = (id) => {\r\n    return axios.get(`${endPoint}/listLaborAuditTrail/${id}`).then((res) => res.data);\r\n}","import React, { createContext, useReducer } from \"react\";\r\nimport _ from 'lodash'\r\nimport AppReducer from \"./AppReducer\";\r\nimport { \r\n    getWorkCellService, \r\n    getPanelShopService, \r\n    getWorkOrderService,\r\n    getLaborActivityService,\r\n    getLaborConfirmService \r\n} from './../service/employee'\r\nimport {getPendingLaborService ,getLaborPostingFilterService} from './../service/pendingLabor'\r\nconst initialState = {\r\n  workCellData:[],\r\n  panelShop:[],\r\n  jobPosting:[],\r\n  keyData:[],\r\n  laborActivity: [],\r\n  laborConfirm: {},\r\n  pendingLabor:{},\r\n  startTime:0,\r\n  endTime:null,\r\n  isActive:false,\r\n  pendingLaborRecord:{},\r\n  laborPostingFilter:{},\r\n  error:{}\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  const getWorkCell = () => {\r\n    getWorkCellService().then((res)=>{\r\n        dispatch({\r\n            type: \"GET_WORK_CELL\",\r\n            payload: res\r\n        });\r\n    })\r\n  }\r\n\r\n  const getPanalShop = (key) => {\r\n    getPanelShopService(key).then((res)=>{\r\n        dispatch({\r\n            type: \"GET_PANEL_SHOP\",\r\n            payload: res\r\n        });\r\n    })\r\n  }\r\n\r\n  const getWorkOrder = (id) => {\r\n    let key = state.keyData[0].DEPARTMENT_KEY\r\n    getWorkOrderService(id).then((res)=>{\r\n        if(res[0].STATUS_MESSAGE === null){\r\n            getLaborActivityService(key,id).then((res)=>{\r\n                dispatch({\r\n                    type: \"GET_WORK_ORDER\",\r\n                    payload: res\r\n                });\r\n            })\r\n        }else{\r\n          dispatch({\r\n            type: \"ERROR\",\r\n            payload: res\r\n        });\r\n       }\r\n    })\r\n  }\r\n\r\n  const getLaborConfirm = (serviceParams) => {\r\n    getLaborConfirmService(serviceParams).then((res)=>{\r\n        dispatch({\r\n          type: \"GET_LABOR_CONFIRM\",\r\n          payload: res\r\n      });\r\n    })\r\n  }\r\n\r\n  const getProgressTimeStop = (key) => {\r\n    getProgressTimeStop(key).then((res)=>{\r\n        dispatch({\r\n          type: \"GET_PROGRESS_TIME_STOP\",\r\n          payload: res\r\n      });\r\n    })\r\n  }\r\n  \r\n  const getKeyData = (keyName, keyValue) => {\r\n    if(keyName === 'workcell'){\r\n      keyEmpty()\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    };\r\n    if(keyName === 'panel_shop'){\r\n      let data = state.keyData\r\n      data.splice(1, data.length-1);\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    }\r\n    if(keyName === 'post_labor'){\r\n      let data = state.keyData\r\n      data.splice(2, data.length-1);\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    }\r\n    if(keyName === 'work_center'){\r\n      let data = state.keyData\r\n      data.splice(3, data.length-1);\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    }\r\n  }\r\n\r\n  const keyEmpty = () =>{\r\n    dispatch({\r\n        type: \"GET_KEY_DATA_EMPTY\",\r\n        payload: []\r\n    });\r\n  }\r\n  \r\n  const getPendingLabor = () => {\r\n    getPendingLaborService().then((res)=>{\r\n      dispatch({\r\n        type: \"GET_PENDING_LABOR\",\r\n        payload: res\r\n      });\r\n    })\r\n  }\r\n\r\n  const startTimer = (count) => {\r\n    dispatch({\r\n      type: \"GET_START_TIME\",\r\n      payload: count\r\n    });\r\n  }\r\n\r\n  const isActiveFun = (value) => {\r\n    dispatch({\r\n      type: \"GET_IS_ACTIVE\",\r\n      payload: value\r\n    });\r\n  }\r\n// laborPending\r\n  const getPendingLaborRecord = (id) => {\r\n    getPendingLaborService(id).then((res)=>{\r\n      let pendingLaborKeyData = _.find(res, function(o) { \r\n        if(o.KEY == id){\r\n            return o\r\n        }\r\n      });\r\n      dispatch({\r\n        type: \"GET_PENDING_LABOR_RECORD\",\r\n        payload: pendingLaborKeyData\r\n      });\r\n    })\r\n  }\r\n// labor review posting \r\n  const getLaborPostingFilter = (wOrder) => {\r\n    getLaborPostingFilterService(wOrder).then((res)=>{\r\n      dispatch({\r\n        type: \"GET_LABOR_POSTING_FILTER\",\r\n        payload: res\r\n      });\r\n    })\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        workCellData: state.workCellData,\r\n        panelShop: state.panelShop,\r\n        keyData: state.keyData,\r\n        laborActivity: state.laborActivity,\r\n        laborConfirm:state.laborConfirm,\r\n        pendingLabor:state.pendingLabor,\r\n        startTime:state.startTime,\r\n        endTime:state.endTime,\r\n        isActive:state.isActive,\r\n        pendingLaborRecord:state.pendingLaborRecord,\r\n        laborPostingFilter:state.laborPostingFilter,\r\n        error:state.error,\r\n        getWorkCell,\r\n        getPendingLabor,\r\n        getPanalShop,\r\n        getKeyData,\r\n        getWorkOrder,\r\n        getLaborConfirm,\r\n        keyEmpty,\r\n        startTimer,\r\n        isActiveFun,\r\n        getPendingLaborRecord,\r\n        getLaborPostingFilter\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};","import React, {useContext} from 'react'\r\nimport { Breadcrumb } from 'antd';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nimport {  useLocation } from 'react-router-dom';\r\nimport { GlobalContext } from \"./../../context//GlobalState\";\r\nimport './topNavBar.scss'\r\nfunction TopNavBar() {\r\n  const { keyData } = useContext(GlobalContext);\r\n  let location = useLocation();\r\n  let track = keyData.length > 0 ? `/panel-shop/${keyData[0].DEPARTMENT_KEY}` :'/'\r\n    return (\r\n        <div className=\"main-flex\">\r\n          <Breadcrumb>\r\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n            <Breadcrumb.Item>\r\n              <a href=\"\">Application Center</a>\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n          <div>\r\n            {location.pathname !== '/progress-timers' ? \r\n              <Link to=\"/progress-timers\">See All In Progress</Link> \r\n              : <Link to={track}>Track Another Job in this Work Cell</Link> \r\n              }\r\n              \r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopNavBar;","import React from 'react'\r\nimport { Spin } from 'antd';\r\nimport './spinner.scss'\r\nconst Spinner = () => {\r\n    return (\r\n        <section className=\"spinner\">\r\n            <Spin size=\"large\" />\r\n        </section>\r\n    )\r\n}\r\nexport default Spinner","import React from 'react'\r\nimport { Card, Col } from 'antd';\r\nimport './ui-card.scss'\r\nconst style = { background: '#bfbfbf', padding: '8px 0' };\r\nfunction UiCard(props) {\r\n  const { text, onClickHandler, name} = props\r\n  return (\r\n    <React.Fragment>\r\n      <Col className=\"gutter-row\" span={6}>\r\n        <Card\r\n          hoverable\r\n          style={style}\r\n          className=\"card-body\" \r\n          onClick={onClickHandler}\r\n        >\r\n          <p  >{text}   </p>\r\n          <p>{name}</p>\r\n        </Card>\r\n      </Col>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default UiCard\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './page-header.scss'\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nexport default function UiPageHeader(props) {\r\n    const {content, track} = props\r\n    return (\r\n      <div className=\"page-header-flex\">\r\n        <div className=\"main-title\">\r\n          <h3>{content}</h3>\r\n        </div>\r\n        {track \r\n          ?<div className=\"plus-icons\">\r\n             <span><PlusCircleOutlined /></span> <Link to=\"/\">Link Another Job in this Work Cell</Link>\r\n            </div> \r\n          : null\r\n        }\r\n        \r\n      </div>\r\n    )\r\n}\r\n","const CONSTANTS = {\r\n    WORKCELL: 'CLock in to a Work Cell',\r\n    JOBPOSTING: 'Which Job Are You Posting Labor To',\r\n    LABORCONFIRM:'Post Labor To',\r\n    WORKORDER:'Work Order',\r\n    CUSTOMER:'Customer',\r\n    PLANT:'Plant',\r\n    DEPARTMENT:'Department',\r\n    WORKCELLS:'Work Cell',\r\n    EMPLOYEE:'Employee',\r\n    LOBARACTIVITY: 'Labor Activity',\r\n    WORKCELL_PROGRESS_TIMERS: 'Work Cell Panal Shop In Progress Timers ',\r\n    LABOR_RATE:[\r\n      \"Standard Rate\",\r\n      \"Standard Rate 2\",\r\n      \"Standard Rate 3\",\r\n      \"Standard Rate 4\"\r\n    ]\r\n  };\r\n  \r\n  export default CONSTANTS;","import React, { useState, useEffect, useContext } from 'react';\r\n//components\r\nimport UiCard from './../../views/UiCard'\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport Spinner from './../../views/Spinner'\r\n//Constants\r\nimport Constants from './../../constants'\r\n// Router\r\nimport {useHistory} from 'react-router-dom';\r\n//antd\r\nimport { Row } from 'antd';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n\r\nconst WorkCell = () => {\r\n  const [page, setPage] = useState(1);\r\n  const { getWorkCell, workCellData , getKeyData, getPanalShop} = useContext(GlobalContext);\r\n  const history = useHistory();\r\n    useEffect(() => {\r\n      getWorkCell()\r\n    }, [page]);\r\n\r\n  const panelShopClick = (key) => {\r\n    let data = workCellData\r\n    let keyValue;\r\n    data.map(item=>{\r\n        if(item.DEPARTMENT_KEY === key){\r\n            keyValue =  item\r\n        }\r\n    })\r\n    getPanalShop(key)\r\n    getKeyData('workcell', keyValue)\r\n    history.push(`/panel-shop/${key}`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <UiPageHeader content={Constants.WORKCELL} />\r\n      <Row gutter={16}>\r\n        {workCellData.length >= 1 ? workCellData.map((item, index)=>{\r\n          return <UiCard key={item.KEY } text={item.DEPARTMENT_NAME} name={item.WORK_CELL_NAME} onClickHandler={() => panelShopClick(item.DEPARTMENT_KEY)}/>\r\n        }) : <Spinner />}\r\n      </Row>\r\n    </>\r\n  ); \r\n}\r\n\r\nexport default WorkCell;","import React, {useState,useEffect, useContext} from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\n//components\r\nimport UiCard from './../../views/UiCard'\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\n//Constants\r\nimport Constants from './../../constants'\r\n// Antd\r\nimport { Row } from 'antd';\r\nimport {useHistory} from 'react-router-dom';\r\n// context\r\nimport { GlobalContext } from \"./../../context//GlobalState\";\r\n\r\nconst PanelShop = (props) => {\r\n    const { panelShop , getKeyData ,keyData} = useContext(GlobalContext);\r\n    let { id } = useParams();\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n      if(keyData.length  === 0){\r\n        history.push(`/work-cell`)\r\n      }\r\n    }, [1]);\r\n\r\n    function jobPosting (key) {\r\n      let data = panelShop\r\n      let keyValue;\r\n      data.map(item=>{\r\n          if(item.EMPLOYEE === key){\r\n              keyValue =  item\r\n          }\r\n      })\r\n      getKeyData('panel_shop',keyValue)\r\n      history.push(`/job-posting-employee/${key}`);\r\n    };\r\n  \r\n    return (\r\n        <>\r\n        <UiPageHeader content={Constants.WORKCELL} />\r\n          <Row gutter={16}>\r\n            {panelShop.length >= 1 ? panelShop.map((item, index)=>{\r\n              return <UiCard key={index } text={`#${item.EMPLOYEE}`} name={item.NAME} onClickHandler={() => jobPosting(item.EMPLOYEE)}/>\r\n            }):  null}\r\n          </Row>\r\n        </>\r\n    )\r\n}\r\nexport default PanelShop","import React, {useState,useEffect, useContext} from 'react'\r\nimport { useParams, useHistory} from \"react-router-dom\";\r\n//components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n//Constants\r\nimport Constants from './../../constants'\r\nimport './job-posting.scss'\r\nimport { Input, Button  } from 'antd';\r\n\r\nconst JobPosting = (props) => {\r\n    let { id } = useParams();\r\n    const [page, setPage] = useState(1);\r\n    const [jobNumber, setJobNumber] = useState();\r\n    const { keyData, getWorkOrder, getKeyData} = useContext(GlobalContext);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if(keyData.length  === 0){\r\n            history.push(`/work-cell`)\r\n          }\r\n      }, [page]);\r\n\r\n    function onChangeHandler(event) {\r\n        setJobNumber(event.target.value)\r\n    }\r\n\r\n    const onSubmitHandler = () => {\r\n        let workOrderPosting = {\r\n            workOrderPosting:jobNumber\r\n        }\r\n        getWorkOrder(jobNumber)\r\n        getKeyData('post_labor', workOrderPosting)\r\n        history.push(`/labor-activity/${jobNumber}`);\r\n    }\r\n    return (\r\n        <>\r\n            <UiPageHeader content={Constants.JOBPOSTING} />\r\n            <div className=\"job-posting\">\r\n                <div>\r\n                    WO #\r\n                </div>\r\n                <div>\r\n                    <Input onChange={onChangeHandler} />\r\n                </div>\r\n                <div>\r\n                    <Button type=\"primary\" onClick={onSubmitHandler}>Enter</Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default JobPosting","\r\nimport React, {useContext, useEffect} from 'react'\r\n//components\r\nimport UiCard from './../../views/UiCard'\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n//Constants\r\nimport Constants from './../../constants'\r\n// Antd\r\nimport {useHistory} from 'react-router-dom';\r\nimport { Row } from 'antd';\r\n\r\n\r\n const LaborActivity = (props) => {\r\n    const { keyData, laborActivity, getKeyData, getLaborConfirm} = useContext(GlobalContext);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n      if(keyData.length  === 0){\r\n          history.push(`/work-cell`)\r\n        }\r\n    }, [1]);\r\n\r\n    const laborActivityClick = (code) => {\r\n      let data = laborActivity\r\n      let keyValue;\r\n      data.map(item=>{\r\n          if(item.CODE === code){\r\n              keyValue =  item\r\n          }\r\n      })\r\n      let serviceParams = {\r\n        deptKey : keyData[0].DEPARTMENT_KEY,\r\n        woNo:keyData[2].workOrderPosting,\r\n        plantKey:keyData[0].PLANT_KEY,\r\n        wcellKey:keyData[0].KEY,\r\n        wcenterKey:keyValue.KEY,\r\n        employee:keyValue.CODE\r\n      }\r\n      getLaborConfirm(serviceParams);\r\n      getKeyData('work_center', keyValue)  \r\n      history.push(`/labor-confirm`);\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <UiPageHeader content={Constants.WORKCELL} />\r\n        {console.log(laborActivity)}\r\n          <Row gutter={16}>\r\n            {laborActivity.length > 0 ? laborActivity.map((item, index)=>{\r\n              return <UiCard \r\n                        key={index }  \r\n                        text={`#${item.CODE}`} \r\n                        name={item.DESCRIPTION} \r\n                        onClickHandler={() => laborActivityClick(item.CODE)}\r\n                      />\r\n            }): 'No Data'}\r\n          </Row>\r\n        </>\r\n    )\r\n}\r\nexport default LaborActivity","\r\nimport React from 'react'\r\nfunction UiGrid({title,number,desc, children}) {\r\n    return (\r\n    <React.Fragment>\r\n        <div className=\"ui-grid\">\r\n            <p>{title}</p>\r\n            <p>{number || children}</p>\r\n            <p>{desc}</p>\r\n        </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nexport default UiGrid\r\n            ","\r\nimport React, {useContext,useState,useEffect} from 'react'\r\n//components\r\nimport UiGrid from './../../views/UiGrid'\r\nimport UiPageHeader from './../../views/UiPageHeader';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n//Constants\r\nimport Constants from './../../constants'\r\nimport _ from 'lodash'\r\nimport {useHistory} from 'react-router-dom';\r\nimport { Button,Row, Col } from 'antd';\r\n//SCSS\r\nimport './labor-confirm.scss'\r\n// service\r\nimport { postPendingLaborService } from './../../service/pendingLabor'\r\n\r\n const LaborActivity = (props) => {\r\n    const { keyData , getPendingLabor,startTime,laborActivity,startTimer, laborConfirm} = useContext(GlobalContext);\r\n    const [seconds, setSeconds] = useState(0);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if(keyData.length  === 0){\r\n            history.push(`/work-cell`)\r\n          }\r\n        let interval = null;\r\n        if (isActive) {\r\n          interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            startTimer(seconds)\r\n          }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n          clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n      }, [isActive, seconds]);\r\n     \r\n    const startHandler = () => {\r\n        // Date and Time Conveter script\r\n        setIsActive(!isActive)\r\n        let tempDate = new Date()\r\n        let months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \r\n        \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\r\n        let tempMonth = months[tempDate.getMonth()]\r\n        let finalDate = [tempDate.getDate(), tempMonth, tempDate.getFullYear()].join('-')\r\n        let tempTime = new Date().toLocaleString('en-GB');\r\n        let splitTime = tempTime.split(',')\r\n        let time = splitTime[1]\r\n        let finaleDateTime = [finalDate,time].join(' ')\r\n        let serviceParams = {\r\n            PLANT_KEY: keyData[0].PLANT_KEY,\r\n            DEPARTMENT_KEY: keyData[0].DEPARTMENT_KEY,\r\n            EMPLOYEE_KEY: keyData[1].EMPLOYEE,\r\n            WORK_CENTER_KEY: keyData[3].KEY,\r\n            WORK_CELL_KEY: keyData[0].KEY,\r\n            LABOR_CLASS: null,\r\n            WORK_ORDER_NUMBER: parseInt(keyData[2].workOrderPosting),\r\n            START_TIME: finaleDateTime,\r\n            STOP_TIME: null,\r\n            LABOR_TIME: null,\r\n            LABOR_RATE_TYPE: null,\r\n            STATUS: \"I\"\r\n        }\r\n        postPendingLaborService(serviceParams).then(res=>{\r\n            history.push('/progress-timers')\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n        {laborConfirm.length > 0 ? \r\n            <>  \r\n                <UiPageHeader content={Constants.LABORCONFIRM} />\r\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                    <Col className=\"gutter-row\" span={24}>\r\n                    <div>\r\n                        <UiGrid title={Constants.WORKORDER} number={laborConfirm[0].WO_NUMBER} desc={laborConfirm[0].WO_DESC} />\r\n                        <UiGrid title={Constants.CUSTOMER} number={laborConfirm[0].CUSTOMER} desc={laborConfirm[0].CUSTOMER_NAME}/>\r\n                        <UiGrid title={Constants.PLANT} number={laborConfirm[0].PLANT} desc={laborConfirm[0].PLANT_NAME} />\r\n                        <UiGrid title={Constants.DEPARTMENT} number='' desc=\"\" />\r\n                        <UiGrid title={Constants.WORKCELLS} number='' desc={laborConfirm[0].NAME} />\r\n                        <UiGrid title={Constants.EMPLOYEE} number={laborConfirm[0].EMPLOYEE} desc={laborConfirm[0].EMP_NAME} />\r\n                        <UiGrid title={Constants.LOBARACTIVITY}  number={laborConfirm[0].CODE} desc={laborConfirm[0].DESCRIPTION} />\r\n                    </div>\r\n                    </Col>\r\n                    \r\n                    <Col className=\"gutter-row\" offset={8} span={8}>\r\n                        <div ><Button type=\"primary\" className=\"start-button green\" onClick={startHandler} >Start Tracking</Button> </div>\r\n                    </Col>\r\n                </Row>\r\n            </> : null }\r\n            \r\n        </>\r\n    )\r\n}\r\nexport default LaborActivity","\r\nimport React from 'react'\r\nimport './ui-timer-buuton.scss'\r\n// context\r\nfunction UiTimerButton(props) {\r\n\r\n    const { timerHandler,name,time,hours, color, border,txtColor, width, height} = props\r\n    return (\r\n    <React.Fragment>\r\n       <div className=\"ui-timer-button\" \r\n            style={{background:color, border:`1px solid ${border}`,color:txtColor,width:width,height:height}} \r\n            onClick={timerHandler}>\r\n            <p>{name}</p>\r\n            <p>{time}</p>\r\n            <p>{hours}</p>\r\n       </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nexport default UiTimerButton\r\n            ","\r\nimport React from 'react'\r\nimport UiTimerButton from './../UiTimerButton'\r\n//antd\r\nimport { Row,Col } from 'antd';\r\nimport './ui-grid-progress.scss'\r\nfunction UiGridProgress(props) {\r\n    const { employe,wOrder,lactivity,start_time,start_time_count, employeName,wcName,woDes, timerHandler} = props;\r\n    const style = {  padding: '8px 0' };\r\n    const styles = {\r\n        bold:{\r\n            fontWeight:'bold'\r\n        },\r\n        colorGreen:{\r\n            color:'green',\r\n            padding: '8px 0',\r\n            fontWeight: '500'\r\n        }\r\n    }\r\n    return (\r\n    <React.Fragment>\r\n         <div className=\"ui-grid-progress\" >\r\n            <hr></hr>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                <Col className=\"gutter-row\" span={3}>\r\n                    <div style={style} >\r\n                        <p>Employee</p>\r\n                        <p>Work Order</p>\r\n                        <p>Labor Activity</p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={3}>\r\n                    <div style={styles.bold} className=\"ui-grid-progress__grid\">\r\n                        <p>{employe}</p>\r\n                        <p>{wOrder}</p>\r\n                        <p>{lactivity}</p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    <div style={style} className=\"ui-grid-progress__grid\">\r\n                        <p style={styles.bold}>{employeName}</p>\r\n                        <p>{woDes} </p>\r\n                        <p style={styles.bold}>{wcName} </p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={4}>\r\n                    <div className=\"ui-grid-progress__grid\">\r\n                        <p style={styles.colorGreen}>Start Time</p>\r\n                        <p style={styles.bold}>{start_time}</p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={6}>\r\n                    <div style={style} className=\"ui-grid-progress__grid\">\r\n                        <UiTimerButton name=\"Elasped\" time={start_time_count} hours='HoursMinutes' color=\"green\" timerHandler={timerHandler}/>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nexport default UiGridProgress\r\n            ","import React, { useState, useEffect, useContext } from 'react';\r\n//components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport UiTimerButton from './../../views/UiTimerButton'\r\nimport UiGridProgress from './../../views/UiGridProgress'\r\nimport Spinner from './../../views/Spinner'\r\n// Router\r\nimport {useHistory} from 'react-router-dom';\r\n//Constants\r\nimport Constants from './../../constants'\r\n//antd\r\nimport { Row,Col } from 'antd';\r\n// context\r\nimport { GlobalContext } from \"./../../context//GlobalState\";\r\nimport _ from 'lodash';\r\nimport moment from 'moment'\r\n\r\nconst ProgressTimers = () => {\r\n  const { getPendingLabor , pendingLabor, startTime} = useContext(GlobalContext);\r\n  const [page, setPage] = useState(1);\r\n  const history = useHistory();\r\n    useEffect(() => {\r\n      getPendingLabor()\r\n    }, [page]);\r\n    const timerHandler = (key) =>{\r\n      history.push(`/progress-time-stop/${key}`)\r\n    }\r\n    const progressDataFilter = pendingLabor.length > 0 ? _.orderBy(pendingLabor, ['KEY'], ['desc']) : null\r\n  return (\r\n    <>\r\n        <UiPageHeader content={Constants.WORKCELL_PROGRESS_TIMERS} />\r\n        {progressDataFilter ? progressDataFilter.map((item, index)=>{\r\n          let itemStartTime = _.split(item.START_TIME, ' ');\r\n          let time = itemStartTime[1]\r\n          return  <UiGridProgress \r\n                    key={index} \r\n                    employe={item.EMPLOYEE_KEY} \r\n                    wOrder={item.WORK_ORDER_NUMBER} \r\n                    lactivity=\"22\" \r\n                    start_time={time}\r\n                    start_time_count={startTime}\r\n                    employeName={item.EMPLOYEE_NAME}\r\n                    wcName={item.WORK_CELL_NAME}\r\n                    woDes={item.WO_DESCRIPTION}\r\n                    timerHandler={() => timerHandler(item.KEY)} \r\n                  />\r\n        }) :  <Spinner />}\r\n      \r\n    </>\r\n  ); \r\n}\r\n\r\nexport default ProgressTimers;","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Radio,\r\n    Select,\r\n    Input,\r\n    Col,\r\n    DatePicker,\r\n    TimePicker,\r\n    Row,\r\n    Button,\r\n    message\r\n  } from 'antd';\r\n\r\nimport moment from 'moment';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport {useHistory} from 'react-router-dom';\r\n  //components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport UiGrid from './../../views/UiGrid'\r\n//Constants\r\nimport Constants from './../../constants'\r\n// lodash\r\nimport _ from 'lodash'\r\n//scss \r\nimport './review-timer.scss'\r\n  // service\r\nimport { getProgressTimeStopService, putPendingLaborService } from './../../service/pendingLabor'\r\nimport { getPanelShopService,getWorkOrderService, getLaborActivityService } from './../../service/employee'\r\n\r\nconst { Option } = Select;\r\nconst format = 'HH:mm';\r\nconst { TextArea } = Input;\r\nconst dateFormat = 'DD-MM-YYYY';\r\n\r\nconst ReviewTimer = () => {\r\n  const history = useHistory();\r\n  const {pendingLaborRecord,panelShop, workCellData, getWorkCell, getPanalShop, getPendingLaborRecord } = useContext(GlobalContext);\r\n  const [page, setPage] = useState([]);\r\n  const [note, setNote] = useState('');\r\n  const [workOrderNumber, setWorkOrderNumber] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [stopTime, setStopTime] = useState('');\r\n  const [stopDate, setStopDate] = useState('');\r\n  const [workCell, setWorkCell] = useState('');\r\n  const [employe, setEmploye] = useState('');\r\n  const [workCenterName, setWorkCenterName] = useState('');\r\n  const [laborRate, setRaborRate] = useState(Constants.LABOR_RATE[0]);\r\n  const [employeeUpdate, setEmployeeUpdate] = useState([]);\r\n  const [workCellUpdate, setWorkCellUpdate] = useState(null)\r\n  function convertMonthToNumber(month){\r\n    let daySplit = month.split(\"-\")\r\n    let months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \r\n      \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\r\n    let number = _.findIndex(months, function(o) { return o == daySplit[1] });\r\n    if(number < 10){\r\n      return `${daySplit[0]}-0${number}-${daySplit[2]}`\r\n    }else{\r\n      return `${daySplit[0]}-${number}-${daySplit[2]}`\r\n    }\r\n    \r\n  }\r\n  function convertDateTime(date, time){\r\n    let months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \r\n    \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\r\n    let dateSplit = date.split('-');\r\n    let monthName = months[parseInt(dateSplit[1], 10)]\r\n    let finalNameDate =  `${dateSplit[0]}-${monthName}-${dateSplit[1]}`\r\n    return [finalNameDate,time].join(' ')\r\n  }\r\n    useEffect(() => {\r\n       getWorkCell()\r\n       getProgressTimeStopService(pendingLaborRecord.KEY).then(res=>{\r\n        setPage(res[0])\r\n        let start = res[0].START_TIME.split(\" \");\r\n        let stop = res[0].STOP_TIME.split(\" \")\r\n        console.log(convertMonthToNumber(start[0]))\r\n        setStartTime(start[1])\r\n        setStartDate(convertMonthToNumber(start[0]))\r\n        setStopTime(stop[1])\r\n        setStopDate(convertMonthToNumber(stop[0]))\r\n        setWorkCell(res[0].WORK_CELL_NAME)\r\n        setEmploye(res[0].EMPLOYEE_NAME)\r\n        setWorkOrderNumber(res[0].WORK_ORDER_NUMBER);\r\n        setWorkCenterName(res[0].WORKCENTER_NAME)\r\n      });\r\n       getPanelShopService(pendingLaborRecord.DEPARTMENT_KEY).then(res=>{\r\n        setEmployeeUpdate(res)\r\n      })\r\n    }, [1]);\r\n\r\n    const onChange = (e) => {\r\n      setNote(e.target.value);\r\n  }\r\n    const onChangeWorkCell = (e) => {\r\n      workCellData.map(item =>{\r\n        if(item.WORK_CELL_NAME === e){\r\n          setWorkCell(e)\r\n          setWorkCellUpdate(item)\r\n          getPanelShopService(item.DEPARTMENT_KEY).then(res=>{\r\n            setEmployeeUpdate(res)\r\n            setEmploye(res[0].NAME)\r\n          })\r\n        }\r\n      })\r\n    }\r\n    const onChangeEmployee = (e) =>{\r\n      let update = workCellData.map(item=>{\r\n        if(e === item.WORK_CELL_NAME){\r\n          return item\r\n        }\r\n      })    \r\n      setEmploye(e)\r\n    }\r\n    const completeStartNew = () =>{\r\n      history.push('/')\r\n    }\r\n    const onChangeStartTime = (time, timeString) =>{\r\n        setStartTime(timeString);\r\n    }\r\n    const onChangeStopTime = (time, timeString) =>{\r\n        setStopTime(timeString);\r\n    }\r\n    const onChangeStartDate = (date, dateString) =>{\r\n        setStartDate(dateString);\r\n    }\r\n    const onChangeStopDate = (date, dateString) =>{\r\n        setStopDate(dateString);\r\n    }\r\n    const onChangeRate = (value) =>{\r\n        setRaborRate(value)\r\n    }\r\n    const onChangeWorkOrder =(e) =>{\r\n      setWorkOrderNumber(e.target.value)\r\n    }\r\n    const onSubmit = (e) => {\r\n      e.preventDefault();\r\n      let start_time = convertDateTime(startDate,startTime)\r\n      let stop_time = convertDateTime(stopDate,stopTime)\r\n      let serviceParams = {\r\n          PLANT_KEY: workCellUpdate === null ? page.PLANT_KEY : workCellUpdate.PLANT_KEY,\r\n          DEPARTMENT_KEY: workCellUpdate === null ? page.DEPARTMENT_KEY : workCellUpdate.DEPARTMENT_KEY,\r\n          EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n          WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n          WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n          LABOR_CLASS: null,\r\n          WORK_ORDER_NUMBER: workOrderNumber,\r\n          START_TIME: start_time,\r\n          STOP_TIME: stop_time,\r\n          LABOR_TIME: null,\r\n          LABOR_RATE_TYPE: null,\r\n          STATUS: \"C\"\r\n      }\r\n      let serviceParams1 = {\r\n        PLANT_KEY: pendingLaborRecord.PLANT_KEY,\r\n        DEPARTMENT_KEY: pendingLaborRecord.DEPARTMENT_KEY,\r\n        EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n        WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n        WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n        LABOR_CLASS: null,\r\n        WORK_ORDER_NUMBER: pendingLaborRecord.WORK_ORDER_NUMBER,\r\n        START_TIME: pendingLaborRecord.START_TIME,\r\n        STOP_TIME: pendingLaborRecord.STOP_TIME,\r\n        LABOR_TIME: null,\r\n        LABOR_RATE_TYPE: null,\r\n        STATUS: \"C\"\r\n    }\r\n      putPendingLaborService(pendingLaborRecord.KEY, serviceParams).then((res)=>{\r\n        message.success({ content: 'Successfully Recorded ' });\r\n        history.push(`/labor-record-complete/${pendingLaborRecord.KEY}`)\r\n      })\r\n    }\r\n\r\n    const contentHtml = <>\r\n      {workCellData.length > 0 ? workCellData.map((item, index)=><Option key={index} value={item.WORK_CELL_NAME} >{item.WORK_CELL_NAME}</Option>) : null}\r\n    </>;\r\n    const contentHtmlForEmployee = <>\r\n      {employeeUpdate.length > 0 ? employeeUpdate.map((item, index)=><Option key={index} value={item.NAME} >{item.NAME}</Option>) : null}\r\n    </>;\r\n    // const contentHtmlForWorkCenter = <>\r\n    //   {apiFetchData.laborActivityUpdate.length > 0 ? apiFetchData.laborActivityUpdate.map((item, index)=><Option key={index} value={item.CUSTOMER_NAME} >{item.CUSTOMER_NAME}</Option>) : null}\r\n    // </>;\r\n    const contentHtmlForRate = <>\r\n        {Constants.LABOR_RATE.map((item, index)=><Option key={index} value={item} >{item}</Option>)}\r\n    </>;\r\n    \r\n    return (\r\n      <>\r\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n      <form  onSubmit={onSubmit} className=\"labor-record-form\">\r\n        <Col className=\"gutter-row\" span={20}>\r\n          <div>\r\n            <UiPageHeader content={Constants.WORKCELL_PROGRESS_TIMERS} />\r\n            <UiGrid title=\"Work Order\">\r\n              <Input placeholder=\"\" name=\"workOrder\" value={workOrderNumber} onChange={onChangeWorkOrder} />\r\n            </UiGrid>\r\n            <UiGrid title=\"Customar \" number={page.CUST_NAME} />\r\n            <UiGrid title=\"Plant \" number={workCellUpdate === null ? page.PLANT_KEY : workCellUpdate.PLANT_KEY}  />\r\n            <UiGrid title=\"Departement \" \r\n              number={workCellUpdate === null ? page.DEPARTMENT_KEY : workCellUpdate.DEPARTMENT_KEY} \r\n              desc={workCellUpdate === null ? page.DEPARTMENT_NAME : workCellUpdate.DEPARTMENT_NAME} \r\n            />\r\n            <UiGrid title=\"Work Cell\" >\r\n              <Input.Group compact>\r\n                <Select value={workCell} onChange={onChangeWorkCell}>\r\n                  {contentHtml}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Employee\" >\r\n              <Input.Group compact>\r\n                <Select value={employe} onChange={onChangeEmployee}>\r\n                  {contentHtmlForEmployee}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Activity\" >\r\n              <Input.Group compact>\r\n                <Select value={workCenterName} >\r\n                  <Option >{workCenterName}</Option>\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Performed\" >\r\n              <Input.Group compact>\r\n                <Select defaultValue={page.INVENTORY_NAME} value={page.INVENTORY_NAME} onChange={onChangeRate} name=\"laborPerformed\">\r\n                  <Option >{page.INVENTORY_NAME}</Option>\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Start Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact >\r\n                    <DatePicker onChange={onChangeStartDate} value={moment(startDate, 'DD-MM-YY')} format={dateFormat}/>\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss A\" onChange={onChangeStartTime} value={moment(startTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Stop Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact>\r\n                    <DatePicker onChange={onChangeStopDate} value={moment(stopDate, dateFormat)} format={dateFormat} />\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss A\" onChange={onChangeStopTime} value={moment(stopTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Hours\" number={pendingLaborRecord.LABOR_TIME} />\r\n            <div>\r\n                <p>Note *</p>\r\n                <TextArea rows={4} name='note' value={note} onChange={onChange} placeholder=\"Note\"/>\r\n            </div>\r\n            <div className=\"check-time-button\">\r\n              <input type=\"submit\" className=\"time-button yellow\" value=\"Complete Tracking\" />\r\n              <Button type=\"primary\" className=\"time-button\" onClick={completeStartNew} >Complete Tracking And Start New Job</Button>  \r\n            </div>\r\n          </div>\r\n        </Col>\r\n        </form>\r\n    </Row> \r\n      </>\r\n    )\r\n}\r\nexport default ReviewTimer","\r\nimport React, {useContext,useState, useEffect} from 'react'\r\n//components\r\nimport UiGrid from './../../views/UiGrid'\r\nimport UiPageHeader from './../../views/UiPageHeader';\r\nimport UiTimerButton from './../../views/UiTimerButton'\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n//Constants\r\nimport Constants from './../../constants'\r\nimport _ from 'lodash'\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { Button,Row, Col } from 'antd';\r\n\r\n// service\r\nimport { putPendingLaborService } from './../../service/pendingLabor'\r\n\r\n const ProgressTimeStop = (props) => {\r\n    const {keyData, pendingLaborRecord, getPendingLaborRecord } = useContext(GlobalContext);\r\n    let { id } = useParams();\r\n    const [page, setPage] = useState(0);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        getPendingLaborRecord(id)\r\n      }, [page]);\r\n\r\n \r\n    const stopTimer = () =>{\r\n        let tempDate = new Date()\r\n        let months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \r\n        \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\r\n        let tempMonth = months[tempDate.getMonth()]\r\n        let finalDate = [tempDate.getDate(), tempMonth, tempDate.getFullYear()].join('-')\r\n        let tempTime = new Date().toLocaleString('en-GB');\r\n        let splitTime = tempTime.split(',')\r\n        let time = splitTime[1]\r\n        let stopTime = [finalDate, time].join(' ')\r\n        let serviceParams = {\r\n            PLANT_KEY: pendingLaborRecord.PLANT_KEY,\r\n            DEPARTMENT_KEY: pendingLaborRecord.DEPARTMENT_KEY,\r\n            EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n            WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n            WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n            LABOR_CLASS: null,\r\n            WORK_ORDER_NUMBER: pendingLaborRecord.WORK_ORDER_NUMBER,\r\n            START_TIME: pendingLaborRecord.START_TIME,\r\n            STOP_TIME: stopTime,\r\n            LABOR_TIME: null,\r\n            LABOR_RATE_TYPE: null,\r\n            STATUS: \"I\"\r\n        }\r\n        putPendingLaborService(id, serviceParams).then((res)=>{\r\n            if(res){\r\n                history.push('/review-timer')\r\n            }\r\n        })\r\n        // history.push('/review-timer')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { pendingLaborRecord !== undefined ?\r\n                <> \r\n                    <UiPageHeader content={Constants.LABORCONFIRM} />\r\n                    <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                        <Col className=\"gutter-row\" span={24}>\r\n                        <div>\r\n                            <UiGrid title={Constants.WORKORDER} number={pendingLaborRecord.WORK_ORDER_NUMBER} desc={pendingLaborRecord.WO_DESCRIPTION} />\r\n                            <UiGrid title={Constants.CUSTOMER} number={pendingLaborRecord.CUST_NAME} />\r\n                            <UiGrid title={Constants.PLANT} number={pendingLaborRecord.INVENTORY_NUMBER} desc={pendingLaborRecord.INVENTORY_NAME} />\r\n                            <UiGrid title={Constants.DEPARTMENT} number={pendingLaborRecord.DEPT_CODE} desc={pendingLaborRecord.DEPT_NAME} />\r\n                            <UiGrid title={Constants.WORKCELLS} number={pendingLaborRecord.WORK_CELL_KEY} desc={pendingLaborRecord.WORK_CELL_NAME} />\r\n                            <UiGrid title={Constants.EMPLOYEE} number={pendingLaborRecord.EMPLOYEE_KEY} desc={pendingLaborRecord.EMPLOYEE_NAME} />\r\n                            <UiGrid title={Constants.LOBARACTIVITY}  number={pendingLaborRecord.WORKCENTER_NAME} />\r\n                        </div>\r\n                        </Col>\r\n                        <Col className=\"gutter-row\" offset={8} span={5}>\r\n                            <div>\r\n                            <UiTimerButton name=\"Elasped\" time='100' hours='HoursMinutes' color=\"green\" />\r\n                            </div>\r\n                        </Col>\r\n                        <Col className=\"gutter-row\" span={5}>\r\n                            <div>\r\n                                <UiTimerButton name=\"Stop Timer\" time='and' hours='Review Labor' color=\"red\" timerHandler={stopTimer}/>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                 </> \r\n                : null}\r\n           \r\n        </>\r\n    )\r\n}\r\nexport default ProgressTimeStop","\r\nimport React, {useContext,useState, useEffect} from 'react'\r\n//components\r\nimport UiGrid from './../../views/UiGrid'\r\nimport UiPageHeader from './../../views/UiPageHeader';\r\nimport UiTimerButton from './../../views/UiTimerButton'\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n//Constants\r\nimport Constants from './../../constants'\r\nimport _ from 'lodash'\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { Button,Row, Col } from 'antd';\r\n//scss\r\nimport './labor-record-complete.scss'\r\n// service\r\nimport { putPendingLaborService } from './../../service/pendingLabor'\r\n\r\n const LaborRecordComplete = (props) => {\r\n    const {pendingLabor, pendingLaborRecord, getPendingLaborRecord } = useContext(GlobalContext);\r\n    let { id } = useParams();\r\n    const [page, setPage] = useState(0);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        getPendingLaborRecord(id)\r\n      }, [page]);\r\n\r\n \r\n    const stopTimer = () =>{\r\n        let serviceParams = {\r\n            STOP_TIME: null,\r\n        }\r\n        // putPendingLaborService(id, serviceParams).then((res)=>{\r\n        //     console.log(res)\r\n        // })\r\n        history.push('/review-timer')\r\n        console.log('stop')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { pendingLaborRecord !== undefined ?\r\n                <> \r\n                    <UiPageHeader content={Constants.LABORCONFIRM} track />\r\n                    <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                        <Col className=\"gutter-row\" span={12}>\r\n                            <div>\r\n                                <UiGrid title={Constants.WORKORDER} number={pendingLaborRecord.WORK_ORDER_NUMBER} desc={pendingLaborRecord.WO_DESCRIPTION} />\r\n                                <UiGrid title={Constants.CUSTOMER} number={pendingLaborRecord.CUST_NAME} />\r\n                                <UiGrid title={Constants.PLANT} number={pendingLaborRecord.INVENTORY_NUMBER} desc={pendingLaborRecord.INVENTORY_NAME} />\r\n                                <UiGrid title={Constants.DEPARTMENT} number={pendingLaborRecord.DEPT_CODE} desc={pendingLaborRecord.DEPT_NAME} />\r\n                                <UiGrid title={Constants.WORKCELLS} number={pendingLaborRecord.WORK_CELL_KEY} desc={pendingLaborRecord.WORK_CELL_NAME} />\r\n                                <UiGrid title={Constants.EMPLOYEE} number={pendingLaborRecord.EMPLOYEE_KEY} desc={pendingLaborRecord.EMPLOYEE_NAME} />\r\n                                <UiGrid title={Constants.LOBARACTIVITY}  number={pendingLaborRecord.WORKCENTER_NAME} />\r\n                            </div>\r\n                        </Col>\r\n                        <Col className=\"gutter-row\" span={12}>\r\n                            <div className=\"big-timer\">\r\n                                <UiTimerButton \r\n                                    name=\"Complete\" \r\n                                    time='1:10' \r\n                                    hours='HoursMinutes' \r\n                                    txtColor=\"black\" \r\n                                    color=\"white\" \r\n                                    border=\"black\"\r\n                                    width=\"250px\" \r\n                                    height=\"250px\"\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n                        {/* <Col className=\"gutter-row\" span={5}>\r\n                            <div>\r\n                                <UiTimerButton name=\"Stop Timer\" time='and' hours='Review Labor' color=\"red\" timerHandler={stopTimer}/>\r\n                            </div>\r\n                        </Col> */}\r\n                    </Row>\r\n                 </> \r\n                : null}\r\n           \r\n        </>\r\n    )\r\n}\r\nexport default LaborRecordComplete","import React from 'react'\r\nimport { Button ,Menu, Dropdown, message, Popconfirm } from 'antd';\r\nimport { MenuOutlined , UserOutlined } from '@ant-design/icons';\r\n// Router\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\n//Service\r\nimport {deletePendingLaborService} from './../../service/pendingLabor'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nconst HamberMenu = ({keyValue,data,match,title}) => {\r\n    const history = useHistory();\r\n    let location = useLocation();\r\n    // const handleMenuClick = (e) => {\r\n    //     switch (e.key) {\r\n    //         case \"delete\":\r\n    //         var del=confirm(\"Are you sure you want to delete this record?\");\r\n    //         if (del==true){\r\n    //             return deletePendingLaborService(keyValue).then(res=>{\r\n    //                 message.success('This is a success message');\r\n    //                 history.push(`${location.pathname}`);\r\n    //             })\r\n    //          }else{\r\n    //              alert(\"Record Not Deleted\")\r\n    //          }\r\n    //          return del;\r\n            \r\n    //         case \"edit\":\r\n    //         return history.push(`${location.pathname}/edit/${keyValue}`);\r\n    //         case \"view\":\r\n    //         return history.push(`${location.pathname}/${data.WORK_CELL_KEY}`);\r\n    //         default:\r\n    //             return history.push(`${location.pathname}/${data.WORK_CELL_KEY}`);\r\n    //     }\r\n    // }\r\n    const deleteItem = (e) =>{  \r\n        e.preventDefault()\r\n        return deletePendingLaborService(keyValue).then(res=>{\r\n            if(res){\r\n                message.success('successfully deleted');\r\n                setTimeout(function(){ window.location.reload(false); }, 2000);\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <span>\r\n            <Dropdown overlay= {\r\n                <Menu >\r\n                <Menu.Item key='edit' icon={<UserOutlined />}>\r\n                    <Link to={`${match.url}/edit/${keyValue}`}>Edit</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='view' icon={<UserOutlined />}>\r\n                    <Link to={`${match.url}/${data.WORK_CELL_KEY}`}>View</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='delete' icon={<UserOutlined />}>  \r\n                    <a href=\"#\" onClick={(e) => { if (window.confirm('Are you sure you wish to delete this item?')) deleteItem(e) } }>\r\n                        Delete\r\n                    </a>\r\n                </Menu.Item>\r\n              </Menu>\r\n            } >\r\n            <Button>\r\n                 <MenuOutlined />\r\n            </Button>\r\n            </Dropdown>\r\n        </span>\r\n    )\r\n}\r\nexport default withRouter(HamberMenu)","import React, { Component } from 'react';\r\nimport { Input, Button, Select, Table ,Menu, Dropdown, message } from 'antd';\r\nimport './labor-review-and-posting.scss'\r\nimport { getLaborPostingFilterService, getPendingLaborService } from './../../service/pendingLabor'\r\nimport Spinner from './../../views/Spinner'\r\nimport HamberMenu from './../../views/HamberMenu'\r\nconst columns = [\r\n    {title: 'WORK_ORDER_NUMBER', dataIndex: 'WORK_ORDER_NUMBER', key: 'KEY'},\r\n    {title: 'CUST_NAME', dataIndex: 'CUST_NAME', key: 'KEY'},\r\n    {title: 'EMPLOYEE_NAME', dataIndex: 'EMPLOYEE_NAME', key: 'KEY'},\r\n    {title: 'LABOR_CLASS', dataIndex: 'LABOR_CLASS', key: 'KEY'},\r\n    {title: 'WORK_CELL_NAME', dataIndex: 'WORK_CELL_NAME', key: 'KEY'},\r\n    {title: 'START_TIME', dataIndex: 'START_TIME', key: 'KEY'},\r\n    {title: 'STOP_TIME', dataIndex: 'STOP_TIME', key: 'KEY'},\r\n    {title: 'LABOR_TIME', dataIndex: 'LABOR_TIME',key: 'KEY'},\r\n    {title: 'LABOR_RATE_TYPE', dataIndex: 'LABOR_RATE_TYPE',key: 'KEY'},\r\n    {\r\n        title: 'Action',\r\n        key: 'KEY',\r\n        dataIndex: 'KEY',\r\n        render: (text, record) => (\r\n        <HamberMenu keyValue={text} data={record} />\r\n        )\r\n    }\r\n  ];\r\nclass LaborReviewAndPosting extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rowData: [],\r\n            selectedRowKeys: [], // Check here to configure the default column\r\n            inputValue:{\r\n                workOrder:''\r\n            }\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.onChangeHandler = this.onChangeHandler.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        getPendingLaborService(this.state.inputValue.workOrder)\r\n        .then((res) => this.setState({ rowData: res }))\r\n        .catch(error => console.log(error))\r\n    }\r\n    handleClick(event) {\r\n        event.preventDefault();\r\n        getLaborPostingFilterService(this.state.inputValue.workOrder)\r\n        .then((res) => this.setState({ rowData: res }))\r\n        .catch(error => console.log(error))\r\n    }\r\n    onChangeHandler(event){\r\n        this.setState({\r\n            inputValue:{\r\n                workOrder:event.target.value\r\n            }\r\n        })\r\n    }\r\n    onSelectChange = selectedRowKeys => {\r\n        console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n        this.setState({ selectedRowKeys });\r\n    };\r\n      \r\n    render() {\r\n        const { Option } = Select;\r\n        const { selectedRowKeys, inputValue } = this.state;\r\n        const rowSelection = {\r\n            selectedRowKeys,\r\n            onChange: this.onSelectChange,\r\n          };\r\n        return (\r\n            <div\r\n                className=\"ag-theme-balham\"\r\n                style={{ height: '600px'}}\r\n            >\r\n                <div className=\"labor-review-filter\">\r\n                    <div className=\"__work-order\">\r\n                        <div className=\"__mr-2\">\r\n                            <p>Plant</p>\r\n                        </div>\r\n                        <div>\r\n                        <Input.Group compact>\r\n                            <Select defaultValue={'All'}  name=\"plant\">\r\n                                <Option value=\"one\" >{\"one\"}</Option>\r\n                            </Select>\r\n                        </Input.Group>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"__work-order mt-2 mb-2\">\r\n                        <div className=\"__mr-1\">\r\n                            <p>Work Order</p>\r\n                        </div>\r\n                        <div>\r\n                            <Input name=\"workOrder\" onChange={this.onChangeHandler} value={inputValue.workOrder} />\r\n                        </div>\r\n                        <div className=\"ml-10\">\r\n                            <Button type=\"primary\" onClick={this.handleClick}>Enter</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {<Table rowKey={record => record.KEY} rowSelection={rowSelection} columns={columns} dataSource={this.state.rowData} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default LaborReviewAndPosting","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Radio,\r\n    Select,\r\n    Input,\r\n    Col,\r\n    DatePicker,\r\n    TimePicker,\r\n    Row,\r\n    Button\r\n  } from 'antd';\r\n\r\nimport moment from 'moment';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\r\n  //components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport UiGrid from './../../views/UiGrid'\r\nimport UiTimerButton from './../../views/UiTimerButton'\r\nimport Spinner from './../../views/Spinner'\r\n//Constants\r\nimport Constants from './../../constants'\r\n//scss \r\nimport './labor-review-and-posting.scss'\r\n  // service\r\nimport { getProgressTimeStopService, putPendingLaborService } from './../../service/pendingLabor'\r\nconst { Option } = Select;\r\nconst format = 'HH:mm';\r\nconst { TextArea } = Input;\r\nconst dateFormat = 'YYYY-MM-DD';\r\n\r\nconst LaborReviewAndPostingEdit = () => {\r\n  const history = useHistory();\r\n  const {pendingLaborRecord,panelShop, workCellData, getWorkCell, getPanalShop, getPendingLaborRecord } = useContext(GlobalContext);\r\n  const [page, setPage] = useState([]);\r\n  const [note, setNote] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [stopTime, setStopTime] = useState('');\r\n  const [stopDate, setStopDate] = useState('');\r\n  const [laborRate, setRaborRate] = useState(Constants.LABOR_RATE[0]);\r\n  let { id } = useParams();\r\n    useEffect(() => {\r\n      getProgressTimeStopService(id).then(res=>{\r\n        setPage(res[0])\r\n        setStartTime(res[0].START_TIME)\r\n        setStopTime(res[0].STOP_TIME)\r\n      })\r\n    }, [1]);\r\n\r\n    const onChange = (e) => {\r\n        setNote(e.target.value);\r\n    }\r\n    const onChangeStartTime = (time) =>{\r\n        setStartTime(time);\r\n    }\r\n    const onChangeStopTime = (time) =>{\r\n        setStopTime(time);\r\n    }\r\n    const onChangeStartDate = (date) =>{\r\n        setStartDate(date);\r\n    }\r\n    const onChangeStopDate = (date) =>{\r\n        setStopDate(date);\r\n    }\r\n    const onChangeRate = (value) =>{\r\n        setRaborRate(value)\r\n    }\r\n    const cancleChanges = () =>{\r\n      history.goBack();\r\n    }\r\n    const saveChange = () =>{\r\n        let serviceParams = {\r\n            PLANT_KEY: pendingLaborRecord.PLANT_KEY,\r\n            DEPARTMENT_KEY: pendingLaborRecord.DEPARTMENT_KEY,\r\n            EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n            WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n            WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n            LABOR_CLASS: null,\r\n            WORK_ORDER_NUMBER: pendingLaborRecord.WORK_ORDER_NUMBER,\r\n            START_TIME: pendingLaborRecord.START_TIME,\r\n            STOP_TIME: pendingLaborRecord.STOP_TIME,\r\n            LABOR_TIME: null,\r\n            LABOR_RATE_TYPE: laborRate,\r\n            NOTE:note,\r\n            STATUS: \"C\"\r\n        }\r\n        console.log('saveChange', {\r\n            stopTime,\r\n            stopDate,\r\n            note,\r\n            laborRate,\r\n            startTime,\r\n            startDate\r\n        })\r\n    }\r\n    const onSubmit = (e) => {\r\n      e.preventDefault();\r\n      let serviceParams = {\r\n          PLANT_KEY: pendingLaborRecord.PLANT_KEY,\r\n          DEPARTMENT_KEY: pendingLaborRecord.DEPARTMENT_KEY,\r\n          EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n          WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n          WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n          LABOR_CLASS: null,\r\n          WORK_ORDER_NUMBER: pendingLaborRecord.WORK_ORDER_NUMBER,\r\n          START_TIME: pendingLaborRecord.START_TIME,\r\n          STOP_TIME: pendingLaborRecord.STOP_TIME,\r\n          LABOR_TIME: null,\r\n          LABOR_RATE_TYPE: null,\r\n          STATUS: \"C\"\r\n      }\r\n      putPendingLaborService(pendingLaborRecord.KEY, serviceParams).then((res)=>{\r\n        history.push(`/labor-record-complete/${pendingLaborRecord.KEY}`)\r\n      })\r\n    }\r\n\r\n    const contentHtml = <>\r\n      {workCellData.length > 0 ? workCellData.map((item, index)=><Option key={index} value={item.WORK_CELL_NAME} >{item.WORK_CELL_NAME}</Option>) : null}\r\n    </>;\r\n    const contentHtmlForEmployee = <>\r\n      {panelShop.length > 0 ? panelShop.map((item, index)=><Option key={index} value={item.NAME} >{item.NAME}</Option>) : null}\r\n    </>;\r\n    const contentHtmlForRate = <>\r\n        {Constants.LABOR_RATE.map((item, index)=><Option key={index} value={item} >{item}</Option>)}\r\n    </>;\r\n    \r\n    return (\r\n      <>\r\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n      <form  className=\"labor-record-form\">\r\n        <Col className=\"gutter-row\" span={20}>\r\n          <div>\r\n            <UiPageHeader content={Constants.WORKCELL_PROGRESS_TIMERS} />\r\n            <UiGrid title=\"Work Order \" number={page.WORK_ORDER_NUMBER} />\r\n            <UiGrid title=\"Customar \" number={page.CUST_NAME} />\r\n            <UiGrid title=\"Work Cell \" number={page.WORK_CELL_NAME} />\r\n            <UiGrid title=\"Employee \" number={page.EMPLOYEE_NAME} />\r\n            {/* <UiGrid title=\"Labor Performed \" number={pendingLaborRecord.INVENTORY_NAME} /> */}\r\n            {/* <UiGrid title=\"Labor Performed\" >\r\n              <Input.Group compact>\r\n                <Select defaultValue={pendingLaborRecord.INVENTORY_NAME} name=\"laborPerformed\" onChange={onChangeWorkCell}>\r\n                  {contentHtml}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid> */}\r\n            {/* <UiGrid title=\"Employee\" >\r\n              <Input.Group compact>\r\n                <Select defaultValue={apiFetchData.employeeUpdate.length > 0 ?  '': pendingLaborRecord.EMPLOYEE_NAME}  name=\"employee\">\r\n                  {contentHtmlForEmployee}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid> */}\r\n            <UiGrid title=\"Labor Performed\" >\r\n              <Input.Group compact>\r\n              <Select defaultValue={page.INVENTORY_NAME} value={page.INVENTORY_NAME} onChange={onChangeRate} name=\"laborPerformed\">\r\n                <Option value={page.INVENTORY_NAME} onChange={onChange}>{page.INVENTORY_NAME}</Option>\r\n              </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Start Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact >\r\n                    <DatePicker onChange={onChangeStartDate} defaultValue={moment(startDate, dateFormat)} format={dateFormat}/>\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss A\" onChange={onChangeStartTime} value={moment(startTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Stop Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact>\r\n                    <DatePicker onChange={onChangeStopDate} defaultValue={moment(stopDate, dateFormat)} format={dateFormat} />\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss A\" onChange={onChangeStopTime} value={moment(stopTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Hours \" number={pendingLaborRecord.LABOR_TIME} />\r\n            <UiGrid title=\"Labar Rate\" >\r\n              <Input.Group compact>\r\n                <Select defaultValue={laborRate} value={laborRate} onChange={onChangeRate} >\r\n                  {contentHtmlForRate}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <div >\r\n                <p>Note *</p>\r\n                <TextArea rows={4} name='note' value={note} onChange={onChange} placeholder=\"Note\"/>\r\n            </div>\r\n            <div className=\"footer-button\">\r\n                <Button \r\n                    type=\"primary\" \r\n                    style={{backgroundColor:'red'}} \r\n                    className=\"time-button\" \r\n                    onClick={cancleChanges} \r\n                > <b>Cancel <br></br> Do not save changes </b>\r\n                </Button>\r\n                <Button \r\n                    type=\"primary\" \r\n                    className=\"time-button\" \r\n                    onClick={saveChange} \r\n                    style={{padding: '27px'}} \r\n                > <b>Save Changes</b> \r\n                </Button>  \r\n            </div>\r\n          </div>\r\n        </Col>\r\n        </form>\r\n    </Row> \r\n      </>\r\n    )\r\n}\r\nexport default LaborReviewAndPostingEdit","import React, {useState, useEffect, useContext} from 'react'\r\n// ant\r\nimport { Table, Tag , Button} from 'antd';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n// Router\r\nimport {useHistory, useParams} from 'react-router-dom';\r\n// service\r\nimport { getListLaborAuditTrail } from './../../service/pendingLabor'\r\nimport Spinner from './../../views/Spinner'\r\nconst columns = [\r\n    {\r\n        title: '',\r\n        dataIndex: 'TRANSACTION_TYPE',\r\n        key: '',\r\n    },\r\n    {\r\n        title: 'Date',\r\n        dataIndex: 'ENTRY_DATE',\r\n        key: 'ENTRY_DATE',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Edit by',\r\n        dataIndex: 'ENTRY_FORM',\r\n        key: 'ENTRY_FORM',\r\n    },\r\n    {\r\n        title: 'Work Order',\r\n        dataIndex: 'ORIGINAL_WORK_ORDER_NUMBER',\r\n        key: 'ORIGINAL_WORK_ORDER_NUMBER',\r\n    },\r\n    {\r\n        title: 'Work Cell',\r\n        dataIndex: 'ORIGINAL_WORK_CELL_KEY',\r\n        key: 'ORIGINAL_WORK_CELL_KEY',\r\n    },\r\n    {\r\n        title: 'Employee',\r\n        dataIndex: 'ORIGINAL_EMPLOYEE_KEY',\r\n        key: 'ORIGINAL_EMPLOYEE_KEY',\r\n    },\r\n    {\r\n        title: 'Labor Performed',\r\n        dataIndex: 'ORIGINAL_WORK_CELL_KEY',\r\n        key: 'ORIGINAL_WORK_CELL_KEY',\r\n    },\r\n    {\r\n        title: 'Start Time',\r\n        dataIndex: 'ORIGINAL_START_TIME',\r\n        key: 'ORIGINAL_START_TIME',\r\n    },\r\n    {\r\n        title: 'Stop Time',\r\n        dataIndex: 'ORIGINAL_STOP_TIME',\r\n        key: 'ORIGINAL_STOP_TIME',\r\n    },\r\n    {\r\n      title: 'Note',\r\n      key: 'NOTE',\r\n      dataIndex: 'NOTE',\r\n      render: text => <a>{text}</a>\r\n    }\r\n  ];\r\nconst LaborReviewAndPostingView = () => {\r\n    const [page, setPage] = useState(1);\r\n    const [data, setData] = useState(1);\r\n    const { getWorkCell, workCellData , getKeyData, keyData, getPanalShop ,keyEmpty} = useContext(GlobalContext);\r\n    const history = useHistory();\r\n    let { id } = useParams();\r\n    useEffect(() => {\r\n        getListLaborAuditTrail(id).then(res=>setData(res))\r\n    }, [page]);\r\n    const cancleChanges = () =>{\r\n        history.goBack();\r\n    }\r\n    return (\r\n        <div>\r\n            {data.length > 0 ?<Table columns={columns} dataSource={data} /> : <Spinner /> }\r\n            <div className=\"footer-cancle\">\r\n                <Button \r\n                    type=\"primary\" \r\n                    className=\"time-button\" \r\n                    onClick={cancleChanges}\r\n                    style={{backgroundColor:'rgba(0, 0, 0, 0.65)'}}  \r\n                > <b>Close This Page</b> \r\n                </Button>  \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LaborReviewAndPostingView","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Radio,\r\n    Select,\r\n    Input,\r\n    Col,\r\n    DatePicker,\r\n    TimePicker,\r\n    Row,\r\n    Button\r\n  } from 'antd';\r\n\r\nimport moment from 'moment';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\r\n  //components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport UiGrid from './../../views/UiGrid'\r\nimport UiTimerButton from './../../views/UiTimerButton'\r\n//Constants\r\nimport Constants from './../../constants'\r\n//scss \r\nimport './labor-review-and-posting.scss'\r\n  // service\r\nimport { getProgressTimeStopService, putPendingLaborService } from './../../service/pendingLabor'\r\nconst { Option } = Select;\r\nconst format = 'HH:mm';\r\nconst { TextArea } = Input;\r\nconst dateFormat = 'YYYY-MM-DD';\r\n\r\nconst LaborReviewAndPostingAdd = () => {\r\n  const history = useHistory();\r\n  const {pendingLaborRecord,panelShop, workCellData, getWorkCell, getPanalShop, getPendingLaborRecord } = useContext(GlobalContext);\r\n  const [page, setPage] = useState([]);\r\n  const [note, setNote] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [stopTime, setStopTime] = useState('');\r\n  const [stopDate, setStopDate] = useState('');\r\n  const [laborRate, setRaborRate] = useState(Constants.LABOR_RATE[0]);\r\n  let { id } = useParams();\r\n    useEffect(() => {\r\n\r\n    }, [1]);\r\n\r\n    const onChange = (e) => {\r\n        setNote(e.target.value);\r\n    }\r\n    const onChangeStartTime = (time) =>{\r\n        setStartTime(time);\r\n    }\r\n    const onChangeStopTime = (time) =>{\r\n        setStopTime(time);\r\n    }\r\n    const onChangeStartDate = (date) =>{\r\n        setStartDate(date);\r\n    }\r\n    const onChangeStopDate = (date) =>{\r\n        setStopDate(date);\r\n    }\r\n    const onChangeRate = (value) =>{\r\n        setRaborRate(value)\r\n    }\r\n    const cancleChanges = () =>{\r\n      history.goBack();\r\n    }\r\n    const saveChange = () =>{\r\n        let serviceParams = {\r\n            PLANT_KEY: pendingLaborRecord.PLANT_KEY,\r\n            DEPARTMENT_KEY: pendingLaborRecord.DEPARTMENT_KEY,\r\n            EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n            WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n            WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n            LABOR_CLASS: null,\r\n            WORK_ORDER_NUMBER: pendingLaborRecord.WORK_ORDER_NUMBER,\r\n            START_TIME: pendingLaborRecord.START_TIME,\r\n            STOP_TIME: pendingLaborRecord.STOP_TIME,\r\n            LABOR_TIME: null,\r\n            LABOR_RATE_TYPE: laborRate,\r\n            NOTE:note,\r\n            STATUS: \"C\"\r\n        }\r\n        console.log('saveChange', {\r\n            stopTime,\r\n            stopDate,\r\n            note,\r\n            laborRate,\r\n            startTime,\r\n            startDate\r\n        })\r\n    }\r\n    const onSubmit = (e) => {\r\n      e.preventDefault();\r\n      let serviceParams = {\r\n          PLANT_KEY: pendingLaborRecord.PLANT_KEY,\r\n          DEPARTMENT_KEY: pendingLaborRecord.DEPARTMENT_KEY,\r\n          EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n          WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n          WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n          LABOR_CLASS: null,\r\n          WORK_ORDER_NUMBER: pendingLaborRecord.WORK_ORDER_NUMBER,\r\n          START_TIME: pendingLaborRecord.START_TIME,\r\n          STOP_TIME: pendingLaborRecord.STOP_TIME,\r\n          LABOR_TIME: null,\r\n          LABOR_RATE_TYPE: null,\r\n          STATUS: \"C\"\r\n      }\r\n      putPendingLaborService(pendingLaborRecord.KEY, serviceParams).then((res)=>{\r\n        history.push(`/labor-record-complete/${pendingLaborRecord.KEY}`)\r\n      })\r\n    }\r\n\r\n    const contentHtml = <>\r\n      {workCellData.length > 0 ? workCellData.map((item, index)=><Option key={index} value={item.WORK_CELL_NAME} >{item.WORK_CELL_NAME}</Option>) : null}\r\n    </>;\r\n    const contentHtmlForEmployee = <>\r\n      {panelShop.length > 0 ? panelShop.map((item, index)=><Option key={index} value={item.NAME} >{item.NAME}</Option>) : null}\r\n    </>;\r\n    const contentHtmlForRate = <>\r\n        {Constants.LABOR_RATE.map((item, index)=><Option key={index} value={item} >{item}</Option>)}\r\n    </>;\r\n    \r\n    return (\r\n      <>\r\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n        <Col className=\"gutter-row\" span={20}>\r\n          <div>\r\n            <UiPageHeader content={Constants.WORKCELL_PROGRESS_TIMERS} />\r\n            <UiGrid title=\"Work Order\" >\r\n              <Input placeholder=\"\" name=\"workOrder\" onChange={onChange} />\r\n            </UiGrid>\r\n            <UiGrid title=\"Customar\" >\r\n              <Input placeholder=\"\" name=\"customar\" onChange={onChange} />\r\n            </UiGrid>\r\n             <UiGrid title=\"Work Cell\" >\r\n              <Input.Group compact>\r\n                <Select defaultValue={pendingLaborRecord.WORK_CELL_NAME} name=\"workCellName\" >\r\n                  {contentHtml}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Employee\" >\r\n              <Input.Group compact>\r\n                <Select defaultValue={pendingLaborRecord.EMPLOYEE_NAME}  name=\"employee\">\r\n                  {contentHtmlForEmployee}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Performed\" >\r\n              <Input.Group compact>\r\n              <Select defaultValue={page.INVENTORY_NAME} onChange={onChange} name=\"laborPerformed\">\r\n                <Option >{page.INVENTORY_NAME}</Option>\r\n              </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Start Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact >\r\n                    <DatePicker onChange={onChangeStartDate} defaultValue={moment(startDate, dateFormat)} format={dateFormat}/>\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss A\" onChange={onChange} value={moment(startTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Stop Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact>\r\n                    <DatePicker onChange={onChange} defaultValue={moment(stopDate, dateFormat)} format={dateFormat} />\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss A\" onChange={onChange} value={moment(stopTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Hours \" number={pendingLaborRecord.LABOR_TIME} />\r\n            <UiGrid title=\"Labar Rate\" >\r\n              <Input.Group compact>\r\n                <Select defaultValue={laborRate} value={laborRate} onChange={onChangeRate} >\r\n                  {contentHtmlForRate}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <div >\r\n                <p>Note *</p>\r\n                <TextArea rows={4} name='note' value={note} onChange={onChange} placeholder=\"Note\"/>\r\n            </div>\r\n            <div className=\"footer-button\">\r\n                <Button \r\n                    type=\"primary\" \r\n                    style={{backgroundColor:'red'}} \r\n                    className=\"time-button\" \r\n                    onClick={cancleChanges} \r\n                > <b>Cancel <br></br> Do not save changes </b>\r\n                </Button>\r\n                <Button \r\n                    type=\"primary\" \r\n                    className=\"time-button\" \r\n                    onClick={saveChange} \r\n                    style={{padding: '27px'}} \r\n                > <b>Save Changes</b> \r\n                </Button>  \r\n            </div>\r\n          </div>\r\n        </Col>\r\n\r\n    </Row>\r\n      </>\r\n    )\r\n}\r\nexport default LaborReviewAndPostingAdd","import WorkCell from './../pages/work-cell/work-cell';\r\nimport PanelShop from './../pages/panel-shop/panel-shop';\r\nimport JobPosting from './../pages/job-posting/job-posting';\r\nimport LaborActivity from './../pages/labor-activity/labor-activity';\r\nimport LaborConfirm from './../pages/labor-confirm/labor-confirm';\r\nimport ProgressTimers from './../pages/progress-timers/progress-timers';\r\nimport ReviewTimer from './../pages/review-timer/review-timer';\r\nimport ProgressTimeStop from './../pages/progress-time-stop/progress-time-stop';\r\nimport LaborRecordComplete from './../pages/labor-record-complete/labor-record-complete'\r\nimport LaborReviewAndPosting from './../pages/labor-review-and-posting/labor-review-and-posting';\r\nimport LaborReviewAndPostingEdit from  './../pages/labor-review-and-posting/labor-review-and-posting-edit'\r\nimport LaborReviewAndPostingView from './../pages/labor-review-and-posting/labor-review-and-posting-view'\r\nimport LaborReviewAndPostingAdd from './../pages/labor-review-and-posting/labor-review-and-posting-add'\r\nexport const Routes = [\r\n    {\r\n        component: WorkCell,\r\n        path: '/work-cell',\r\n        exact: true,\r\n        title: 'Work Cell'\r\n    },\r\n    {\r\n        component: PanelShop,\r\n        path: '/panel-shop/:id',\r\n        exact: true,\r\n        title: 'PanelShop'\r\n    },\r\n    {\r\n        component: JobPosting,\r\n        path: '/job-posting-employee/:id',\r\n        exact: true,\r\n        title: 'JobPosting'\r\n    },\r\n    {\r\n        component: LaborActivity,\r\n        path: '/labor-activity/:id',\r\n        exact: true,\r\n        title: 'LaborActivity'\r\n    },\r\n    {\r\n        component: LaborConfirm,\r\n        path: '/labor-confirm',\r\n        exact: true,\r\n        title: 'labor-confirm'\r\n    },\r\n    {\r\n        component: ProgressTimers,\r\n        path: '/progress-timers',\r\n        exact: true,\r\n        title: 'ProgressTimers'\r\n    },\r\n    {\r\n        component: ReviewTimer,\r\n        path: '/review-timer',\r\n        exact: true,\r\n        title: 'ReviewTimer'\r\n    },\r\n    {\r\n        component: ProgressTimeStop,\r\n        path: '/progress-time-stop/:id',\r\n        exact: true,\r\n        title: 'ProgressTimeStop'\r\n    },\r\n    {\r\n        component: LaborRecordComplete,\r\n        path: '/labor-record-complete/:id',\r\n        exact: true,\r\n        title: 'LaborRecordComplete'\r\n    },\r\n    {\r\n        component: LaborReviewAndPosting,\r\n        path: '/labor-review-and-posting',\r\n        exact: true,\r\n        title: 'LaborReviewAndPosting'\r\n    },\r\n    {\r\n        component: LaborReviewAndPostingEdit,\r\n        path: '/labor-review-and-posting/edit/:id',\r\n        exact: true,\r\n        title: 'LaborReviewAndPostingEdit'\r\n    },\r\n    {\r\n        component: LaborReviewAndPostingView,\r\n        path: '/labor-review-and-posting/:id',\r\n        exact: true,\r\n        title: 'LaborReviewAndPosting'\r\n    },\r\n    {\r\n        component: LaborReviewAndPostingAdd,\r\n        path: '/labor-review-and-posting-add-labor-record',\r\n        exact: true,\r\n        title: 'LaborReviewAndPostingAdd'\r\n    }\r\n];\r\n","import React, {useContext} from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\n// context\r\nimport { GlobalContext } from \"./../context/GlobalState\";\r\n\r\nexport const Router = (props) => {\r\n    const { routes, defaultRoute } = props;\r\n    const { keyData } = useContext(GlobalContext);\r\n    return (\r\n        <Switch>\r\n            {routes.map((route, index) => {\r\n                const { component: RouteComponent, routes, exact, path } = route;\r\n                return <Route\r\n                    exact={exact}\r\n                    key={index}\r\n                    path={path}\r\n                    render={() => <RouteComponent {...props} routes={routes} />} />;\r\n            })} \r\n            <Redirect to={defaultRoute} />\r\n        </Switch>\r\n    );\r\n};\r\n","import React, {Suspense, useMemo, useContext} from 'react';\nimport './App.scss';\n// Components\nimport UiHeader from './views/UiHeader'\nimport TopNavBar  from './views/TopNavBar';\nimport Timer from './views/Timer'\nimport Spinner from './views/Spinner'\n// Routers\nimport { Routes, Router } from './routes';\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\n// context\nimport { GlobalContext } from \"./context/GlobalState\";\nimport { GlobalProvider } from './context/GlobalState';\n\n// Antd\nimport { ArrowLeftOutlined  } from '@ant-design/icons';\nimport { Layout, Button } from 'antd';\nconst { Content } = Layout;\n\nconst App = () => {\n\n    const history = useHistory();\n    let location = useLocation();\n    const { keyData, getKeyData, getPendingLabor,isActive, isActiveFun } = useContext(GlobalContext);\n    let {id} = useParams();\n    // Back Button\n    const goBack = () => {\n        history.goBack();\n      }\n    return (\n        <GlobalProvider>\n          <Suspense fallback={<Spinner />}> {/* Show a loader component here as a fallback*/}\n          \n          {location.pathname.includes('labor-review-and-posting') \n            ? <UiHeader for=\"supervisor\" /> \n            :<><UiHeader /><TopNavBar /></>\n          }\n              {/* <UiHeader />\n              <TopNavBar /> */}\n              {/* <Timer /> */}\n              <Layout className=\"layout\">\n                <Content style={{ padding: '0 50px' }} > \n                    <Router routes={Routes} defaultRoute={Routes[0].path} />\n                </Content>\n              </Layout>\n              {location.pathname !== '/work-cell' ?\n              <Layout className=\"layout\">\n                <Content style={{ padding: '0 50px' }} > \n                  <Button type=\"primary\" className=\"back-button\" onClick={goBack} icon={<ArrowLeftOutlined  />}>Back</Button>\n                </Content>\n              </Layout>\n              : null}\n          </Suspense>\n        </GlobalProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"antd/dist/antd.css\";\n//Grid\nimport 'ag-grid-community/dist/styles/ag-grid.css'\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render( \n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}