{"version":3,"sources":["views/MainHamber/index.js","views/UiHeader/index.js","context/AppReducer.js","service/employee.js","service/pendingLabor.js","context/GlobalState.js","views/BreadcurmbList/index.js","views/TopNavBar/index.js","views/Spinner/index.js","views/UiCard/index.js","views/UiPageHeader/index.js","constants/index.js","pages/work-cell/work-cell.js","pages/panel-shop/panel-shop.js","views/UiGrid/index.js","views/UiTimerButton/index.js","views/UiGridProgress/index.js","pages/review-timer/review-timer.js","views/UiTimerButtonComplete/index.js","views/MainHamber/MaintenancePageDetailDropdown.js","pages/labor-tracker/labor-tracker.js","pages/labor-review-and-posting/labor-review-and-posting.js","pages/labor-review-and-posting/labor-review-and-posting-edit.js","pages/labor-review-and-posting/labor-review-and-posting-add.js","views/BackButton/index.js","App.js","serviceWorker.js","index.js"],"names":["MainHamber","keyValue","data","history","useHistory","useLocation","overlay","onClick","e","key","push","Item","icon","UserOutlined","MenuOutlined","Header","Layout","UiHeader","props","Fragment","className","for","state","payload","type","workCellData","panelShop","keyData","laborActivity","laborConfirm","pendingLabor","pendingLaborRecord","startTime","isActive","breadcurmbList","error","endPoint","getWorkCellService","axios","get","then","res","getPanelShopService","id","getWorkOrderService","getPendingLaborService","deletePendingLaborService","delete","getLaborPostingFilterService","wOrder","filterData","_","filter","item","STATUS","initialState","jobPosting","endTime","laborPostingFilter","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","keyEmpty","Provider","value","getWorkCell","getPendingLabor","getPanalShop","getKeyData","keyName","splice","length","getWorkOrder","DEPARTMENT_KEY","STATUS_MESSAGE","getLaborActivityService","getLaborConfirm","serviceParams","deptKey","woNo","plantKey","wcellKey","wcenterKey","employee","getLaborConfirmService","startTimer","count","isActiveFun","getPendingLaborRecord","pendingLaborKeyData","find","o","KEY","getLaborPostingFilter","getBreadcurmbList","path","name","BreadcurmbList","href","useContext","breadcurmb","uniqBy","tempalate","map","index","onClickBreadcrumb","indexVal","findIndex","itemValue","console","log","to","TopNavBar","location","track","pathname","Spinner","size","style","background","padding","UiCard","text","onClickHandler","span","hoverable","UiPageHeader","content","color","PlusCircleOutlined","CONSTANTS","WORKCELL","JOBPOSTING","LABORCONFIRM","WORKORDER","CUSTOMER","PLANT","DEPARTMENT","WORKCELLS","EMPLOYEE","LOBARACTIVITY","WORKCELL_PROGRESS_TIMERS","PANALSHOP","LABOR_ACTIVITY","PROGRESS_TIME","REVIEW_TIMER","LABOR_RATE","WorkCell","useState","page","useEffect","Constants","gutter","DEPARTMENT_NAME","WORK_CELL_NAME","panelShopClick","PanelShop","useParams","NAME","UiGrid","UiTimerButton","timerHandler","time","hours","border","txtColor","width","height","start","setStart","setStartTimer","interval","setInterval","timer","undefined","split","moment","format","finalTimeSub","diff","clearInterval","UiGridProgress","employe","activity","start_time","start_time_count","employeName","wcName","woDes","styles","bold","fontWeight","colorGreen","xs","sm","md","lg","Select","Option","Input","TextArea","UiTimerButtonComplete","MaintenancePageDetailDropdown","refresh","deleteItem","message","success","setTimeout","window","reload","this","match","itemKey","allowEdit","allowDelete","menuItems","deleteTooltip","deleteFunction","url","confirm","trigger","React","Component","withRouter","LaborTracker","workCellValue","tempalte","progressDataFilter","orderBy","STOP_TIME","START_TIME","EMPLOYEE_KEY","WORK_ORDER_NUMBER","EMPLOYEE_NAME","WO_DESCRIPTION","Group","compact","marginRight","textAlign","Content","BackButton","goBack","ArrowLeftOutlined","includes","App","fallback","exact","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8958646b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button ,Menu, Dropdown, message } from 'antd';\r\nimport { MenuOutlined , UserOutlined } from '@ant-design/icons';\r\n// Router\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\n\r\nconst MainHamber = ({keyValue,data}) => {\r\n    const history = useHistory();\r\n    let location = useLocation();\r\n    const handleMenuClick = (e) => {\r\n        if(e.key === 'add'){\r\n            history.push(`labor-review-and-posting-add-labor-record`);\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Dropdown overlay= {\r\n                <Menu onClick={handleMenuClick}>\r\n                <Menu.Item key='add' icon={<UserOutlined />}>\r\n                    Add a Labor Record \r\n                </Menu.Item>\r\n              </Menu>\r\n            } >\r\n            <Button>\r\n                 <MenuOutlined />\r\n            </Button>\r\n            </Dropdown>\r\n        </div>\r\n    )\r\n}\r\nexport default MainHamber","import React from 'react'\r\nimport { Layout } from 'antd';\r\nimport MainHamber from './../MainHamber'\r\nconst { Header } = Layout;\r\n\r\nconst UiHeader = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Header>\r\n        <div className=\"logo\">\r\n          {\r\n            props.for === 'supervisor' \r\n              ? <div className=\"supervisor\"><MainHamber />  <h3 className=\"logo-white\">Logo</h3></div>\r\n              : <h3 className=\"logo-white\">Logo</h3>\r\n          }\r\n          \r\n        </div>\r\n      </Header>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default UiHeader\r\n","export default (state, {\r\n  payload, type\r\n}) => {\r\n    switch (type) {\r\n      case \"GET_WORK_CELL\":\r\n        return {\r\n          ...state,\r\n          workCellData: payload\r\n        };\r\n        case \"GET_PANEL_SHOP\":\r\n        return {\r\n          ...state,\r\n          panelShop: payload\r\n        };\r\n        case \"GET_KEY_DATA\":\r\n        return {\r\n          ...state,\r\n          keyData: [...state.keyData, payload]\r\n        };\r\n        case \"GET_KEY_DATA_EMPTY\":\r\n          return {\r\n            ...state,\r\n            keyData: []\r\n          };\r\n        case \"GET_WORK_ORDER\":\r\n        return {\r\n          ...state,\r\n          laborActivity: payload\r\n        };\r\n        case \"GET_LABOR_CONFIRM\":\r\n          return {\r\n            ...state,\r\n            laborConfirm: payload\r\n          };\r\n        case \"GET_PENDING_LABOR\":\r\n        return {\r\n          ...state,\r\n          pendingLabor: payload\r\n        };\r\n        case \"GET_PENDING_LABOR_RECORD\":\r\n          return {\r\n            ...state,\r\n            pendingLaborRecord: payload\r\n          };\r\n        case \"GET_START_TIME\":\r\n          return {\r\n            ...state,\r\n            startTime: payload\r\n          };\r\n        case \"GET_IS_ACTIVE\":\r\n        return {\r\n          ...state,\r\n          isActive: payload\r\n        };\r\n        case \"GET_BREADCURMB\":\r\n          return {\r\n            ...state,\r\n            breadcurmbList: [...state.breadcurmbList, payload]\r\n          };\r\n        case \"ERROR\":\r\n          return {\r\n            ...state,\r\n            error: payload\r\n          };\r\n      default:\r\n        return state;\r\n    }\r\n  };","import axios from 'axios';\r\nconst endPoint = \"http://34.206.72.199:3010/api/pc\"\r\nexport const getWorkCellService = () => {\r\n    return axios.get(`${endPoint}/workCells/`).then((res) => res.data);\r\n};\r\nexport const getWorkCellIdService = (id) => {\r\n    return axios.get(`${endPoint}/workCells/${id}`).then((res) => res.data);\r\n};\r\nexport const getPanelShopService = (id) => {\r\n    return axios.get(`${endPoint}/employee/${id}`).then((res) => res.data);\r\n};\r\nexport const getWorkOrderService = (id) => {\r\n    return axios.get(`${endPoint}/checkWorkOrder/${id}`).then((res) => res.data);\r\n};\r\nexport const getLaborActivityService = (key,id) => {\r\n    return axios.get(`${endPoint}/laborActivity/${key}/${id}`).then((res) => res.data);\r\n};\r\n// export const getLaborConfirmService = ({deptKey, woNo, plantKey, wcellKey, wcenterKey, employee}) => {\r\n//     return axios.get(`${endPoint}/laborConfirm/${deptKey}/${woNo}/${plantKey}/${wcellKey}/${wcenterKey}/${employee}`).then((res) => res.data);\r\n// };\r\n// demo \r\nexport const getLaborConfirmService = ({deptKey, woNo, plantKey, wcellKey, wcenterKey, employee}) => {\r\n    return axios.get(`${endPoint}/laborConfirm/31/3443151/97/2/157/55`).then((res) => res.data);\r\n};\r\n","import axios from 'axios';\r\nimport _ from 'lodash'\r\nconst endPoint = \"http://34.206.72.199:3010/api/pc\"\r\n// Pending Labor\r\n//get\r\nexport const getPendingLaborService = () => {\r\n    return axios.get(`${endPoint}/pendingLabor`).then((res) => res.data);\r\n}\r\n//get:id\r\nexport const getProgressTimeStopService = (key) => {\r\n    return axios.get(`${endPoint}/pendingLabor/${key}`).then((res) => res.data);\r\n}\r\n//post\r\nexport const postPendingLaborService = (body) => {\r\n    return axios.post(`${endPoint}/pendingLabor`, body).then((res) => res.data);\r\n}\r\n\r\n// put\r\nexport const putPendingLaborService = (key, body) => {\r\n    return axios.put(`${endPoint}/pendingLabor/${key}`, body).then((res) => res.data);\r\n}\r\n\r\n// Delete\r\nexport const deletePendingLaborService = (key) => {\r\n    return axios.delete(`${endPoint}/pendingLabor/${key}`).then((res) => res.data);\r\n}\r\n\r\n// getLaborPostingFilter\r\nexport const getLaborPostingFilterService = (wOrder) => {\r\n    let filterData = {\r\n        wOrder:wOrder\r\n    }\r\n    return axios.get(`${endPoint}/pendingLabor/${' '}/${' '}/${filterData.wOrder}`).then((res) => {\r\n        return _.filter(res.data, function(item) { \r\n            if(item.STATUS === \"I\"){\r\n                return item\r\n            }\r\n         });\r\n    });\r\n}\r\n\r\n// listLaborAuditTrail\r\nexport const getListLaborAuditTrail = (id) => {\r\n    return axios.get(`${endPoint}/listLaborAuditTrail/${id}`).then((res) => res.data);\r\n}","import React, { createContext, useReducer } from \"react\";\r\nimport _ from 'lodash'\r\nimport AppReducer from \"./AppReducer\";\r\nimport { \r\n    getWorkCellService, \r\n    getPanelShopService, \r\n    getWorkOrderService,\r\n    getLaborActivityService,\r\n    getLaborConfirmService \r\n} from './../service/employee'\r\nimport {getPendingLaborService ,getLaborPostingFilterService} from './../service/pendingLabor'\r\nconst initialState = {\r\n  workCellData:[],\r\n  panelShop:[],\r\n  jobPosting:[],\r\n  keyData:[],\r\n  laborActivity: [],\r\n  laborConfirm: {},\r\n  pendingLabor:{},\r\n  startTime:0,\r\n  endTime:null,\r\n  isActive:false,\r\n  pendingLaborRecord:{},\r\n  laborPostingFilter:{},\r\n  error:{},\r\n  breadcurmbList:[]\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  const getWorkCell = () => {\r\n    getWorkCellService().then((res)=>{\r\n        dispatch({\r\n            type: \"GET_WORK_CELL\",\r\n            payload: res\r\n        });\r\n    })\r\n  }\r\n\r\n  const getPanalShop = (key) => {\r\n    getPanelShopService(key).then((res)=>{\r\n        dispatch({\r\n            type: \"GET_PANEL_SHOP\",\r\n            payload: res\r\n        });\r\n    })\r\n  }\r\n\r\n  const getWorkOrder = (id) => {\r\n    let key = state.keyData[0].DEPARTMENT_KEY\r\n    getWorkOrderService(id).then((res)=>{\r\n        if(res[0].STATUS_MESSAGE === null){\r\n            getLaborActivityService(key,id).then((res)=>{\r\n                dispatch({\r\n                    type: \"GET_WORK_ORDER\",\r\n                    payload: res\r\n                });\r\n            })\r\n        }else{\r\n          dispatch({\r\n            type: \"ERROR\",\r\n            payload: res\r\n        });\r\n       }\r\n    })\r\n  }\r\n\r\n  const getLaborConfirm = (serviceParams) => {\r\n    getLaborConfirmService(serviceParams).then((res)=>{\r\n        dispatch({\r\n          type: \"GET_LABOR_CONFIRM\",\r\n          payload: res\r\n      });\r\n    })\r\n  }\r\n\r\n  const getProgressTimeStop = (key) => {\r\n    getProgressTimeStop(key).then((res)=>{\r\n        dispatch({\r\n          type: \"GET_PROGRESS_TIME_STOP\",\r\n          payload: res\r\n      });\r\n    })\r\n  }\r\n  \r\n  const getKeyData = (keyName, keyValue) => {\r\n    if(keyName === 'workcell'){\r\n      keyEmpty()\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    };\r\n    if(keyName === 'panel_shop'){\r\n      let data = state.keyData\r\n      data.splice(1, data.length-1);\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    }\r\n    if(keyName === 'post_labor'){\r\n      let data = state.keyData\r\n      data.splice(2, data.length-1);\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    }\r\n    if(keyName === 'work_center'){\r\n      let data = state.keyData\r\n      data.splice(3, data.length-1);\r\n      dispatch({\r\n        type: \"GET_KEY_DATA\",\r\n        payload: keyValue\r\n      });\r\n    }\r\n  }\r\n\r\n  const keyEmpty = () =>{\r\n    dispatch({\r\n        type: \"GET_KEY_DATA_EMPTY\",\r\n        payload: []\r\n    });\r\n  }\r\n  \r\n  const getPendingLabor = () => {\r\n    getPendingLaborService().then((res)=>{\r\n      dispatch({\r\n        type: \"GET_PENDING_LABOR\",\r\n        payload: res\r\n      });\r\n    })\r\n  }\r\n\r\n  const startTimer = (count) => {\r\n    dispatch({\r\n      type: \"GET_START_TIME\",\r\n      payload: count\r\n    });\r\n  }\r\n\r\n  const isActiveFun = (value) => {\r\n    dispatch({\r\n      type: \"GET_IS_ACTIVE\",\r\n      payload: value\r\n    });\r\n  }\r\n// laborPending\r\n  const getPendingLaborRecord = (id) => {\r\n    getPendingLaborService(id).then((res)=>{\r\n      let pendingLaborKeyData = _.find(res, function(o) { \r\n        if(o.KEY == id){\r\n            return o\r\n        }\r\n      });\r\n      dispatch({\r\n        type: \"GET_PENDING_LABOR_RECORD\",\r\n        payload: pendingLaborKeyData\r\n      });\r\n    })\r\n  }\r\n// labor review posting \r\n  const getLaborPostingFilter = (wOrder) => {\r\n    getLaborPostingFilterService(wOrder).then((res)=>{\r\n      dispatch({\r\n        type: \"GET_LABOR_POSTING_FILTER\",\r\n        payload: res\r\n      });\r\n    })\r\n  }\r\n  const getBreadcurmbList = (path,name) =>{\r\n    const res = {\r\n      path:path,\r\n      name:name\r\n    }\r\n    dispatch({\r\n      type: \"GET_BREADCURMB\",\r\n      payload: res\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        workCellData: state.workCellData,\r\n        panelShop: state.panelShop,\r\n        keyData: state.keyData,\r\n        laborActivity: state.laborActivity,\r\n        laborConfirm:state.laborConfirm,\r\n        pendingLabor:state.pendingLabor,\r\n        startTime:state.startTime,\r\n        endTime:state.endTime,\r\n        isActive:state.isActive,\r\n        pendingLaborRecord:state.pendingLaborRecord,\r\n        laborPostingFilter:state.laborPostingFilter,\r\n        error:state.error,\r\n        breadcurmbList:state.breadcurmbList,\r\n        getWorkCell,\r\n        getPendingLabor,\r\n        getPanalShop,\r\n        getKeyData,\r\n        getWorkOrder,\r\n        getLaborConfirm,\r\n        keyEmpty,\r\n        startTimer,\r\n        isActiveFun,\r\n        getPendingLaborRecord,\r\n        getLaborPostingFilter,\r\n        getBreadcurmbList\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};","import React, {useContext} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Breadcrumb } from 'antd';\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport _ from 'lodash'\r\nconst BreadcurmbList = (props)  =>{\r\n    const { href,name } = props;\r\n    const { breadcurmbList } = useContext(GlobalContext);\r\n    var breadcurmb = _.uniqBy(breadcurmbList, function (e) {\r\n        return e.name;\r\n    });\r\n    let tempalate = <p></p>\r\n    const onClickBreadcrumb =(item) =>{\r\n        let indexVal = breadcurmb.findIndex(itemValue=>{\r\n            if(itemValue.name === item.name){\r\n                return itemValue\r\n            }\r\n        })\r\n        breadcurmb.splice(indexVal,breadcurmb.length)\r\n        console.log(breadcurmb)\r\n        tempalate = (\r\n            <Breadcrumb>\r\n                {breadcurmb.length > 0 ? breadcurmb.map((item,index) => (\r\n                    <Breadcrumb.Item onClick={(e) => onClickBreadcrumb(item)} >\r\n                        <Link key={index} to={item.path}>\r\n                            {item.name}\r\n                        </Link>\r\n                    </Breadcrumb.Item>\r\n                )):<p></p>}  \r\n            </Breadcrumb>\r\n        )\r\n    }\r\n    if(breadcurmb.length > 0){\r\n        tempalate = (\r\n            <Breadcrumb>\r\n                { breadcurmb.map((item,index) => (\r\n                    <Breadcrumb.Item onClick={(e) => onClickBreadcrumb(item)} >\r\n                        <Link key={index} to={item.path}>\r\n                            {item.name}\r\n                        </Link>\r\n                    </Breadcrumb.Item>\r\n                ))}\r\n            </Breadcrumb>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n        {tempalate}\r\n        </>\r\n    )\r\n}\r\nexport default BreadcurmbList","import React, {useContext} from 'react'\r\nimport BreadcurmbList from './../BreadcurmbList';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nimport {  useLocation } from 'react-router-dom';\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport './topNavBar.scss'\r\nfunction TopNavBar(props) {\r\n  const { keyData } = useContext(GlobalContext);\r\n  let location = useLocation();\r\n  let track = keyData.length > 0 ? `/panel-shop/${keyData[0].DEPARTMENT_KEY}` :'/'\r\n  let tempalate\r\n    if(location.pathname === '/labor-tracker'){\r\n      return tempalate = (\r\n        <div className=\"main-flex\">\r\n          <div>\r\n              <BreadcurmbList />\r\n          </div>\r\n        </div>\r\n      )\r\n    }else{\r\n      if(location.pathname === '/progress-timers'){\r\n        return tempalate = (\r\n          <div className=\"main-flex\">\r\n            <div>\r\n                <BreadcurmbList />\r\n            </div>\r\n            <div>\r\n                <Link to={track}>Track Another Job in this Work Cell</Link>\r\n            </div>\r\n          </div>\r\n        )\r\n      }else{\r\n        tempalate = (\r\n          <div className=\"main-flex\">\r\n            <div>\r\n                <BreadcurmbList />\r\n            </div>\r\n            <div>\r\n            <Link to=\"/progress-timers\">See All In Progress</Link> \r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n    \r\n    \r\n    return (\r\n        <>\r\n          {tempalate}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TopNavBar;","import React from 'react'\r\nimport { Spin } from 'antd';\r\nimport './spinner.scss'\r\nconst Spinner = () => {\r\n    return (\r\n        <section className=\"spinner\">\r\n            <Spin size=\"large\" />\r\n        </section>\r\n    )\r\n}\r\nexport default Spinner","import React from 'react'\r\nimport { Card, Col } from 'antd';\r\nimport './ui-card.scss'\r\nconst style = { background: '#bfbfbf', padding: '8px 0' };\r\nfunction UiCard(props) {\r\n  const { text, onClickHandler, name} = props\r\n  return (\r\n    <React.Fragment>\r\n      <Col className=\"gutter-row\" span={6}>\r\n        <Card\r\n          hoverable\r\n          style={style}\r\n          className=\"card-body\" \r\n          onClick={onClickHandler}\r\n        >\r\n          <p  >{text}   </p>\r\n          <p>{name}</p>\r\n        </Card>\r\n      </Col>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default UiCard\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './page-header.scss'\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nexport default function UiPageHeader(props) {\r\n    const {content, track, color} = props\r\n    return (\r\n      <div className=\"page-header-flex\">\r\n        <div className=\"main-title\">\r\n          <h3 style={{color:color}}>{content}</h3>\r\n        </div>\r\n        {track \r\n          ?<div className=\"plus-icons\">\r\n             <span><PlusCircleOutlined /></span> <Link to=\"/\">Link Another Job in this Work Cell</Link>\r\n            </div> \r\n          : null\r\n        }\r\n        \r\n      </div>\r\n    )\r\n}\r\n","const CONSTANTS = {\r\n    WORKCELL: 'Clock in to a Work Cell',\r\n    JOBPOSTING: 'Which Job Are You Posting Labor To',\r\n    LABORCONFIRM:'Post Labor To',\r\n    WORKORDER:'Work Order',\r\n    CUSTOMER:'Customer',\r\n    PLANT:'Plant',\r\n    DEPARTMENT:'Department',\r\n    WORKCELLS:'Work Cell',\r\n    EMPLOYEE:'Employee',\r\n    LOBARACTIVITY: 'Labor Activity',\r\n    WORKCELL_PROGRESS_TIMERS: 'Work Cell Panal Shop In Progress Timers ',\r\n    PANALSHOP:'Which Employee is Posting Labor in Panel Shop Wiring',\r\n    LABOR_ACTIVITY:'Which labor Activity is Being Performed',\r\n    PROGRESS_TIME:'In Progress Timer',\r\n    REVIEW_TIMER:'Review Timer',\r\n    LABOR_RATE:[\r\n      \"Standard Rate\",\r\n      \"Standard Rate 2\",\r\n      \"Standard Rate 3\",\r\n      \"Standard Rate 4\"\r\n    ]\r\n  };\r\n  \r\n  export default CONSTANTS;","import React, { useState, useEffect, useContext } from 'react';\r\n//components\r\nimport UiCard from './../../views/UiCard'\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport Spinner from './../../views/Spinner'\r\n//Constants\r\nimport Constants from './../../constants'\r\n// Router\r\nimport {useHistory} from 'react-router-dom';\r\n//antd\r\nimport { Row } from 'antd';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n\r\nconst WorkCell = () => {\r\n  const [page, setPage] = useState(1);\r\n  const { getWorkCell, workCellData , getKeyData, getPanalShop, getBreadcurmbList} = useContext(GlobalContext);\r\n  const history = useHistory();\r\n    useEffect(() => {\r\n      getWorkCell()\r\n    }, [page]);\r\n\r\n  const panelShopClick = (key, name) => {\r\n    let data = workCellData\r\n    let keyValue;\r\n    data.map(item=>{\r\n        if(item.DEPARTMENT_KEY === key){\r\n            keyValue =  item\r\n        }\r\n    })\r\n    getPanalShop(key)\r\n    getKeyData('workcell', keyValue)\r\n    getBreadcurmbList('/workcell',name)\r\n    history.push(`/panel-shop/${key}`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <UiPageHeader content={Constants.WORKCELL} />\r\n      <Row gutter={16}>\r\n        {workCellData.length >= 1 ? workCellData.map((item, index)=>{\r\n          return <UiCard key={item.KEY } text={item.DEPARTMENT_NAME} name={item.WORK_CELL_NAME} onClickHandler={() => panelShopClick(item.DEPARTMENT_KEY, item.WORK_CELL_NAME)}/>\r\n        }) : <Spinner />}\r\n      </Row>\r\n    </>\r\n  ); \r\n}\r\n\r\nexport default WorkCell;","import React, {useState,useEffect, useContext} from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\n//components\r\nimport UiCard from './../../views/UiCard'\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\n//Constants\r\nimport Constants from './../../constants'\r\n// Antd\r\nimport { Row } from 'antd';\r\nimport {useHistory} from 'react-router-dom';\r\n// context\r\nimport { GlobalContext } from \"./../../context//GlobalState\";\r\n\r\nconst PanelShop = () => {\r\n    const { panelShop , getBreadcurmbList, getKeyData ,keyData} = useContext(GlobalContext);\r\n    let { id } = useParams();\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n      if(keyData.length  === 0){\r\n        history.push(`/work-cell`)\r\n      }\r\n    }, [1]);\r\n\r\n    function jobPosting (key, name) {\r\n      let data = panelShop\r\n      let keyValue;\r\n      data.map(item=>{\r\n          if(item.EMPLOYEE === key){\r\n              keyValue =  item\r\n          }\r\n      })\r\n      getKeyData('panel_shop',keyValue)\r\n      getBreadcurmbList(`/panel-shop/${id}`,name)\r\n      history.push(`/job-posting-employee/${key}`);\r\n    };\r\n  \r\n    return (\r\n        <>\r\n        <UiPageHeader content={Constants.PANALSHOP} />\r\n          <Row gutter={16}>\r\n            {panelShop.length >= 1 ? panelShop.map((item, index)=>{\r\n              return <UiCard key={index } text={`#${item.EMPLOYEE}`} name={item.NAME} onClickHandler={() => jobPosting(item.EMPLOYEE, item.NAME)}/>\r\n            }):  null}\r\n          </Row>\r\n        </>\r\n    )\r\n}\r\nexport default PanelShop","\r\nimport React from 'react'\r\nfunction UiGrid({title,number,desc, children}) {\r\n    return (\r\n    <React.Fragment>\r\n        <div className=\"ui-grid\">\r\n            <p>{title}</p>\r\n            <p>{number || children}</p>\r\n            <p>{desc}</p>\r\n        </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nexport default UiGrid\r\n            ","\r\nimport React, {useState,useEffect,useContext} from 'react'\r\nimport moment from 'moment'\r\nimport './ui-timer-buuton.scss'\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n\r\nfunction UiTimerButton(props) {\r\n    const { timerHandler,name,time,hours, color, border,txtColor, width, height} = props;\r\n    const [start, setStart] = useState(0);\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [startTimer , setStartTimer] = useState(time)\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (isActive) {\r\n        interval = setInterval(() => {\r\n            setStart(start => start + 1);\r\n            if(startTimer !== 'null'){\r\n                var timer = time !== undefined ? time.split(' '):\"0 0\"\r\n                var endTime = moment().format('MM-DD-YYYY h:mm:ss')\r\n                var finalTimeSub = moment(moment(endTime).diff(moment(timer[1],\"hh:mm:ss\"))).format(\"hh:mm:ss\")\r\n                setStart(start => start + 1);\r\n                setStartTimer(finalTimeSub)\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && start !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isActive,start]);\r\n\r\n    return (\r\n    <React.Fragment>\r\n       <div className=\"ui-timer-button\" \r\n            style={{background:color, border:`1px solid ${border}`,color:txtColor,width:width,height:height}} \r\n            onClick={timerHandler}>\r\n            <p>{name}</p>\r\n            <p>{startTimer !== 'null' ? startTimer : 'and' }</p>\r\n            <p>{hours}</p>\r\n       </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nexport default UiTimerButton\r\n            ","\r\nimport React from 'react'\r\nimport UiTimerButton from './../UiTimerButton'\r\n//antd\r\nimport { Row,Col } from 'antd';\r\nimport './ui-grid-progress.scss'\r\nfunction UiGridProgress(props) {\r\n    const { employe,wOrder,activity,start_time,start_time_count, employeName,wcName,woDes, timerHandler} = props;\r\n    const style = {  padding: '8px 0' };\r\n    const styles = {\r\n        bold:{\r\n            fontWeight:'bold'\r\n        },\r\n        colorGreen:{\r\n            color:'green',\r\n            padding: '8px 0',\r\n            fontWeight: '500'\r\n        }\r\n    }\r\n    return (\r\n    <React.Fragment>\r\n         <div className=\"ui-grid-progress\" >\r\n            <hr></hr>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                <Col className=\"gutter-row\" span={3}>\r\n                    <div style={style} >\r\n                        <p>Employee</p>\r\n                        <p>Work Order</p>\r\n                        <p>Labor Activity</p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={3}>\r\n                    <div style={styles.bold} className=\"ui-grid-progress__grid\">\r\n                        <p>{employe}</p>\r\n                        <p>{wOrder}</p>\r\n                        <p>{activity}</p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    <div style={style} className=\"ui-grid-progress__grid\">\r\n                        <p style={styles.bold}>{employeName}</p>\r\n                        <p>{woDes} </p>\r\n                        <p style={styles.bold}>{wcName} </p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={4}>\r\n                    <div className=\"ui-grid-progress__grid\">\r\n                        <p style={styles.colorGreen}>Start Time</p>\r\n                        <p style={styles.bold}>{start_time}</p>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"gutter-row end\" span={6}>\r\n                    <div style={style} className=\"ui-grid-progress__grid\">\r\n                        <UiTimerButton name=\"Elasped\" time={start_time_count} hours='HoursMinutes' color=\"green\" timerHandler={timerHandler}/>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nexport default UiGridProgress\r\n            ","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Radio,\r\n    Select,\r\n    Input,\r\n    Col,\r\n    DatePicker,\r\n    TimePicker,\r\n    Row,\r\n    Button,\r\n    message\r\n  } from 'antd';\r\n\r\nimport moment from 'moment';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport {useHistory} from 'react-router-dom';\r\n  //components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport UiGrid from './../../views/UiGrid'\r\n//Constants\r\nimport Constants from './../../constants'\r\n// lodash\r\nimport _ from 'lodash'\r\n//scss \r\nimport './review-timer.scss'\r\n  // service\r\nimport { getProgressTimeStopService, putPendingLaborService } from './../../service/pendingLabor'\r\nimport { getPanelShopService,getWorkOrderService, getLaborActivityService } from './../../service/employee';\r\nimport { convertMonthToNumber, convertDateTime } from './../../utile/helpers' \r\n\r\nconst { Option } = Select;\r\nconst format = 'HH:mm';\r\nconst { TextArea } = Input;\r\nconst dateFormat = 'DD-MM-YYYY';\r\n\r\nconst ReviewTimer = () => {\r\n  const history = useHistory();\r\n  const {pendingLaborRecord, workCellData, getWorkCell } = useContext(GlobalContext);\r\n  const [page, setPage] = useState([]);\r\n  const [note, setNote] = useState('');\r\n  const [workOrderNumber, setWorkOrderNumber] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [stopTime, setStopTime] = useState('');\r\n  const [stopDate, setStopDate] = useState('');\r\n  const [workCell, setWorkCell] = useState('');\r\n  const [employe, setEmploye] = useState('');\r\n  const [workCenterName, setWorkCenterName] = useState('');\r\n  const [laborRate, setRaborRate] = useState(Constants.LABOR_RATE[0]);\r\n  const [employeeUpdate, setEmployeeUpdate] = useState([]);\r\n  const [workCellUpdate, setWorkCellUpdate] = useState(null)\r\n\r\n    useEffect(() => {\r\n       getWorkCell()\r\n       getProgressTimeStopService(pendingLaborRecord.KEY).then(res=>{\r\n        setPage(res[0])\r\n        let start = res[0].START_TIME.split(\" \");\r\n        let stop = res[0].STOP_TIME.split(\" \")\r\n        console.log(convertMonthToNumber(start[0]))\r\n        setStartTime(start[1])\r\n        setStartDate(convertMonthToNumber(start[0]))\r\n        setStopTime(stop[1])\r\n        setStopDate(convertMonthToNumber(stop[0]))\r\n        setWorkCell(res[0].WORK_CELL_NAME)\r\n        setEmploye(res[0].EMPLOYEE_NAME)\r\n        setWorkOrderNumber(res[0].WORK_ORDER_NUMBER);\r\n        setWorkCenterName(res[0].WORKCENTER_NAME)\r\n      });\r\n       getPanelShopService(pendingLaborRecord.DEPARTMENT_KEY).then(res=>{\r\n        setEmployeeUpdate(res)\r\n      })\r\n    }, [1]);\r\n\r\n    const onChange = (e) => {\r\n      setNote(e.target.value);\r\n  }\r\n    const onChangeWorkCell = (e) => {\r\n      workCellData.map(item =>{\r\n        if(item.WORK_CELL_NAME === e){\r\n          setWorkCell(e)\r\n          setWorkCellUpdate(item)\r\n          getPanelShopService(item.DEPARTMENT_KEY).then(res=>{\r\n            setEmployeeUpdate(res)\r\n            setEmploye(res[0].NAME)\r\n          })\r\n        }\r\n      })\r\n    }\r\n    const onChangeEmployee = (e) =>{\r\n      let update = workCellData.map(item=>{\r\n        if(e === item.WORK_CELL_NAME){\r\n          return item\r\n        }\r\n      })    \r\n      setEmploye(e)\r\n    }\r\n    const completeStartNew = () =>{\r\n      history.push('/')\r\n    }\r\n    const onChangeStartTime = (time, timeString) =>{\r\n        setStartTime(timeString);\r\n    }\r\n    const onChangeStopTime = (time, timeString) =>{\r\n        setStopTime(timeString);\r\n    }\r\n    const onChangeStartDate = (date, dateString) =>{\r\n        setStartDate(dateString);\r\n    }\r\n    const onChangeStopDate = (date, dateString) =>{\r\n        setStopDate(dateString);\r\n    }\r\n    const onChangeRate = (value) =>{\r\n        setRaborRate(value)\r\n    }\r\n    const onChangeWorkOrder =(e) =>{\r\n      setWorkOrderNumber(e.target.value)\r\n    }\r\n    const onSubmit = (e) => {\r\n      e.preventDefault();\r\n      let start_time = convertDateTime(startDate,startTime)\r\n      let stop_time = convertDateTime(stopDate,stopTime)\r\n      let serviceParams = {\r\n          PLANT_KEY: workCellUpdate === null ? page.PLANT_KEY : workCellUpdate.PLANT_KEY,\r\n          DEPARTMENT_KEY: workCellUpdate === null ? page.DEPARTMENT_KEY : workCellUpdate.DEPARTMENT_KEY,\r\n          EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n          WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n          WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n          LABOR_CLASS: null,\r\n          WORK_ORDER_NUMBER: workOrderNumber,\r\n          START_TIME: start_time,\r\n          STOP_TIME: stop_time,\r\n          LABOR_TIME: null,\r\n          LABOR_RATE_TYPE: null,\r\n          STATUS: \"C\"\r\n      }\r\n      let serviceParams1 = {\r\n        PLANT_KEY: pendingLaborRecord.PLANT_KEY,\r\n        DEPARTMENT_KEY: pendingLaborRecord.DEPARTMENT_KEY,\r\n        EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n        WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n        WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n        LABOR_CLASS: null,\r\n        WORK_ORDER_NUMBER: pendingLaborRecord.WORK_ORDER_NUMBER,\r\n        START_TIME: pendingLaborRecord.START_TIME,\r\n        STOP_TIME: pendingLaborRecord.STOP_TIME,\r\n        LABOR_TIME: null,\r\n        LABOR_RATE_TYPE: null,\r\n        STATUS: \"C\"\r\n    }\r\n      putPendingLaborService(pendingLaborRecord.KEY, serviceParams).then((res)=>{\r\n        message.success({ content: 'Successfully Recorded ' });\r\n        history.push(`/labor-record-complete/${pendingLaborRecord.KEY}`)\r\n      })\r\n    }\r\n\r\n    const contentHtml = <>\r\n      {workCellData.length > 0 ? workCellData.map((item, index)=><Option key={index} value={item.WORK_CELL_NAME} >{item.WORK_CELL_NAME}</Option>) : null}\r\n    </>;\r\n    const contentHtmlForEmployee = <>\r\n      {employeeUpdate.length > 0 ? employeeUpdate.map((item, index)=><Option key={index} value={item.NAME} >{item.NAME}</Option>) : null}\r\n    </>;\r\n    // const contentHtmlForWorkCenter = <>\r\n    //   {apiFetchData.laborActivityUpdate.length > 0 ? apiFetchData.laborActivityUpdate.map((item, index)=><Option key={index} value={item.CUSTOMER_NAME} >{item.CUSTOMER_NAME}</Option>) : null}\r\n    // </>;\r\n    const contentHtmlForRate = <>\r\n        {Constants.LABOR_RATE.map((item, index)=><Option key={index} value={item} >{item}</Option>)}\r\n    </>;\r\n    \r\n    return (\r\n      <>\r\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n      <form  onSubmit={onSubmit} className=\"labor-record-form\">\r\n        <Col className=\"gutter-row\" span={12}>\r\n          <div>\r\n            <UiPageHeader content={Constants.REVIEW_TIMER} color=\"green\"/>\r\n            <UiGrid title=\"Work Order\">\r\n              <Input placeholder=\"\" name=\"workOrder\" value={workOrderNumber} onChange={onChangeWorkOrder} />\r\n            </UiGrid>\r\n            <UiGrid title=\"Customar \" number={page.CUST_NAME} />\r\n            <UiGrid title=\"Plant \" number={workCellUpdate === null ? page.PLANT_KEY : workCellUpdate.PLANT_KEY}  />\r\n            <UiGrid title=\"Departement \" \r\n              number={workCellUpdate === null ? page.DEPARTMENT_KEY : workCellUpdate.DEPARTMENT_KEY} \r\n              desc={workCellUpdate === null ? page.DEPARTMENT_NAME : workCellUpdate.DEPARTMENT_NAME} \r\n            />\r\n            <UiGrid title=\"Work Cell\" >\r\n              <Input.Group compact>\r\n                <Select value={workCell} onChange={onChangeWorkCell}>\r\n                  {contentHtml}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Employee\" >\r\n              <Input.Group compact>\r\n                <Select value={employe} onChange={onChangeEmployee}>\r\n                  {contentHtmlForEmployee}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Activity\" >\r\n              <Input.Group compact>\r\n                <Select value={workCenterName} >\r\n                  <Option >{workCenterName}</Option>\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Performed\" >\r\n              <Input.Group compact>\r\n                <Select defaultValue={page.INVENTORY_NAME} value={page.INVENTORY_NAME} onChange={onChangeRate} name=\"laborPerformed\">\r\n                  <Option >{page.INVENTORY_NAME}</Option>\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Start Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact >\r\n                    <DatePicker onChange={onChangeStartDate} value={moment(startDate, 'DD-MM-YY')} format={dateFormat}/>\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStartTime} value={moment(startTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Stop Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact>\r\n                    <DatePicker onChange={onChangeStopDate} value={moment(stopDate, dateFormat)} format={dateFormat} />\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStopTime} value={moment(stopTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Hours\" number={pendingLaborRecord.LABOR_TIME} />\r\n          </div>\r\n        </Col>\r\n        <Col className=\"gutter-row\" span={12}>\r\n            <div>\r\n              <p>Note *</p>\r\n              <TextArea rows={4} name='note' value={note} onChange={onChange} placeholder=\"Note\"/>\r\n            </div>\r\n            <div className=\"check-time-button\">\r\n              <input type=\"submit\" className=\"time-button yellow\" value=\"Complete Tracking\" />\r\n              <Button type=\"primary\" className=\"time-button\" onClick={completeStartNew} >Complete Tracking And Start New Job</Button>  \r\n            </div>\r\n        </Col>\r\n      </form>\r\n    </Row> \r\n      </>\r\n    )\r\n}\r\nexport default ReviewTimer","\r\nimport React, {useState,useEffect,useContext} from 'react'\r\nimport moment from 'moment'\r\nimport './ui-button-complete.scss'\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\n\r\nfunction UiTimerButtonComplete(props) {\r\n    const { timerHandler,name,time,hours, color, border,txtColor, width, height} = props;\r\n    const [start, setStart] = useState(0);\r\n    const [startTimer , setStartTimer] = useState(time)\r\n    useEffect(() => {\r\n        var timer = time !== undefined ? time.split(' '):\"0 0\"\r\n        var endTime = moment().format('h:mm:ss')\r\n        var finalTimeSub = moment(moment(endTime,\"hh:mm:ss\").diff(moment(timer[1],\"hh:mm:ss\"))).format(\"hh:mm:ss\")\r\n        setStart(start => start + 1);\r\n        setStartTimer(finalTimeSub)\r\n        console.log(\"------ss\", finalTimeSub)\r\n    }, [1]);\r\n\r\n    return (\r\n    <React.Fragment>\r\n       <div className=\"ui-timer-button\" \r\n            style={{background:color, border:`1px solid ${border}`,color:txtColor,width:width,height:height}} \r\n            onClick={timerHandler}>\r\n            <p>{name}</p>\r\n            <p>{startTimer !== 'null' ? startTimer : 'and' }</p>\r\n            <p>{hours}</p>\r\n       </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nexport default UiTimerButtonComplete\r\n            ","import React from 'react'\r\nimport { Dropdown, Icon, Menu, Tooltip, message } from 'antd'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport { MenuOutlined , UserOutlined } from '@ant-design/icons';\r\nimport {deletePendingLaborService} from './../../service/pendingLabor'\r\nclass MaintenancePageDetailDropdown extends React.Component {\r\n  refresh = () => true\r\n  deleteItem = (e) =>{\r\n    return deletePendingLaborService(e).then(res=>{\r\n        if(res){\r\n            message.success('successfully deleted');\r\n            setTimeout(function(){ window.location.reload(false); }, 2000);\r\n        }\r\n    })\r\n}\r\n  render() {\r\n    const {\r\n      match,\r\n      itemKey,\r\n      allowDelete = true,\r\n      allowEdit,\r\n      deleteTooltip,\r\n      deleteFunction,\r\n    } = this.props\r\n\r\n    const menuItems = (\r\n      <Menu>\r\n        <Menu.Item key=\"0\">\r\n            <Link to={`${match.url}/${itemKey}`}>View</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"1\">\r\n          <Link to={`${match.url}/edit/${itemKey}`}>{allowEdit ? 'Edit' : 'View'}</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key='delete' icon={<UserOutlined />}>  \r\n            <a href=\"#\" onClick={(e) => { if (window.confirm('Are you sure you wish to delete this item?')) this.deleteItem(itemKey) } }>\r\n                Delete\r\n            </a>\r\n        </Menu.Item>\r\n      </Menu>\r\n    )\r\n\r\n    return (\r\n      <Dropdown overlay={menuItems} trigger={['click']}>\r\n        <a className=\"ant-dropdown-link\" href=\"#\">\r\n         <MenuOutlined />\r\n        </a>\r\n      </Dropdown>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(MaintenancePageDetailDropdown)","import React, { useState, useEffect, useContext } from 'react';\r\n//components\r\nimport UiGridProgress from './../../views/UiGridProgress'\r\nimport Spinner from './../../views/Spinner'\r\n// Router\r\nimport {useHistory} from 'react-router-dom';\r\n//antd\r\nimport { Input, Button, Select, Table ,Menu, Dropdown, message } from 'antd';\r\n// context\r\nimport { GlobalContext } from \"./../../context//GlobalState\";\r\nimport _ from 'lodash';\r\nimport moment from 'moment'\r\nimport './labor-tracker.scss'\r\n\r\nconst LaborTracker = () => {\r\n  const { getPendingLabor , pendingLabor, startTime} = useContext(GlobalContext);\r\n  const [page, setPage] = useState(1);\r\n  const [workCellValue, setWorkCellValue] = useState(\"All\");\r\n  const { Option } = Select;\r\n  const history = useHistory();\r\n    useEffect(() => {\r\n      getPendingLabor()\r\n    }, [page]);\r\n    const timerHandler = (key) =>{\r\n      history.push(`/progress-time-stop/${key}`)\r\n    }\r\n    const progressDataFilter = pendingLabor.length > 0 ? _.orderBy(pendingLabor, ['KEY'], ['desc']) : null\r\n    let tempalte\r\n    if(progressDataFilter){\r\n      let data =  _.filter(progressDataFilter, function(item) { return item.STOP_TIME === null });\r\n      tempalte = (\r\n        data.map((item, index)=>{\r\n          let itemStartTime = _.split(item.START_TIME, ' ');\r\n          let time = itemStartTime[1]\r\n          return  <UiGridProgress \r\n                key={index}\r\n                employe={item.EMPLOYEE_KEY} \r\n                wOrder={item.WORK_ORDER_NUMBER} \r\n                activity=\"22\" \r\n                start_time={time}\r\n                start_time_count={item.START_TIME}\r\n                employeName={item.EMPLOYEE_NAME}\r\n                wcName={item.WORK_CELL_NAME}\r\n                woDes={item.WO_DESCRIPTION}\r\n                timerHandler={() => timerHandler(item.KEY)} \r\n            />\r\n        })\r\n      )\r\n    }else{\r\n      return <Spinner />\r\n    }\r\n\r\n  return (\r\n    <>\r\n        <div className=\"labor-tracker\">\r\n            <div className=\"__work-order\">\r\n                <div className=\"__mr-2\">\r\n                    <p>Work Cell</p>\r\n                </div>\r\n                <div>\r\n                <Input.Group compact>\r\n                    <Select value={workCellValue}  name=\"workCell\">\r\n                        <Option value=\"All\" >{\"All\"}</Option>\r\n                    </Select>\r\n                </Input.Group>\r\n                </div>\r\n            </div>\r\n            <div style={{marginRight: \"25px\",textAlign:\"center\"}}>\r\n                <p >Click a timer to access <br></br> the job </p>\r\n            </div>\r\n        </div>\r\n        {tempalte}\r\n      \r\n    </>\r\n  ); \r\n}\r\n\r\nexport default LaborTracker;","import React, { Component } from 'react';\r\nimport { Input, Button, Select, Table ,Menu, Dropdown, message } from 'antd';\r\nimport './labor-review-and-posting.scss'\r\nimport { getLaborPostingFilterService, getPendingLaborService, deletePendingLaborService } from './../../service/pendingLabor'\r\nimport Spinner from './../../views/Spinner'\r\nimport MaintenancePageDetailDropdown from './../../views/MainHamber/MaintenancePageDetailDropdown'\r\nimport { AgGridReact } from 'ag-grid-react'\r\n\r\nclass LaborReviewAndPosting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { match, permissions } = this.props\r\n        this.state = {\r\n          columnDefs: [\r\n            {\r\n              headerName: 'KEY',\r\n              field: 'KEY',\r\n              pinned: true,\r\n              cellClass: ['lock-pinned', 'stringType'],\r\n              width: 125,\r\n              filter: 'agTextColumnFilter',\r\n            },\r\n            {\r\n              headerName: 'WORK_ORDER_NUMBER',\r\n              field: 'WORK_ORDER_NUMBER',\r\n              pinned: true,\r\n              cellClass: ['lock-pinned', 'stringType'],\r\n              width: 125,\r\n              filter: 'agTextColumnFilter',\r\n            },\r\n            {\r\n              headerName: 'CUST_NAME',\r\n              field: 'CUST_NAME',\r\n              width: 200,\r\n              filter: 'agTextColumnFilter',\r\n            },\r\n            {\r\n              headerName: 'EMPLOYEE_NAME',\r\n              field: 'EMPLOYEE_NAME',\r\n              width: 200,\r\n              filter: 'agTextColumnFilter',\r\n            },\r\n            {\r\n              headerName: 'LABOR_CLASS',\r\n              field: 'LABOR_CLASS',\r\n              cellStyle: { textAlign: 'center' },\r\n              width: 150,\r\n              filter: 'agNumberColumnFilter',\r\n              tooltipField: 'LABOR_CLASS',\r\n            },\r\n            {\r\n              headerName: 'WORK_CELL_NAME',\r\n              field: 'WORK_CELL_NAME',\r\n              cellStyle: { textAlign: 'center' },\r\n              width: 145,\r\n              filter: 'agNumberColumnFilter',\r\n              tooltipField: 'WORK_CELL_NAME',\r\n            },\r\n            {\r\n              headerName: 'START_TIME',\r\n              field: 'START_TIME',\r\n              cellStyle: { textAlign: 'left' },\r\n              filter: 'agTextColumnFilter',\r\n              width: 190,\r\n            },\r\n            {\r\n              headerName: 'STOP_TIME',\r\n              field: 'STOP_TIME',\r\n              cellStyle: { textAlign: 'left' },\r\n              filter: 'agTextColumnFilter',\r\n              width: 190,\r\n            },\r\n            {\r\n              headerName: 'LABOR_TIME',\r\n              field: 'LABOR_TIME',\r\n              cellStyle: { textAlign: 'center' },\r\n              width: 150,\r\n              sort: 'desc',\r\n            },\r\n            {\r\n              headerName: 'LABOR_RATE_TYPE',\r\n              field: 'LABOR_RATE_TYPE',\r\n              cellStyle: { textAlign: 'center' },\r\n              width: 150,\r\n              sort: 'desc',\r\n            },\r\n            {\r\n              headerName: null,\r\n              cellStyle: { border: '0px' },\r\n              cellRendererFramework: row => (\r\n                <MaintenancePageDetailDropdown\r\n                  itemKey={row.data.KEY}\r\n                  allowDelete={true}\r\n                  allowEdit={true}\r\n                  deleteTooltip=\"Sales Classes cannot be deleted\"\r\n                />\r\n              ),\r\n              width: 50,\r\n              pinned: 'right',\r\n              sortable: false,\r\n              filter: false,\r\n              menuTabs: [],\r\n              resizable: false,\r\n              selectable: false,\r\n            },\r\n          ],\r\n          defaultColDef: { sortable: true, filter: true, resizable: true, menuTabs: ['filterMenuTab'] },\r\n          rowData: [],\r\n          errors: [],\r\n          printMode: /print/g.test(match),\r\n          inputValue:{\r\n            workOrder:''\r\n          }\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.onChangeHandler = this.onChangeHandler.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        getPendingLaborService(this.state.inputValue.workOrder)\r\n        .then(this.assignListingData)\r\n        .catch(error => console.log(error))\r\n    }\r\n    assignListingData = rowData => {\r\n      if (rowData) {\r\n        const formattedrowData = rowData.map(data => {\r\n          return {\r\n            KEY:data.KEY,\r\n            WORK_ORDER_NUMBER: data.WORK_ORDER_NUMBER,\r\n            CUST_NAME: data.CUST_NAME,\r\n            EMPLOYEE_NAME: data.EMPLOYEE_NAME,\r\n            LABOR_CLASS: data.LABOR_CLASS,\r\n            WORK_CELL_NAME: data.WORK_CELL_NAME,\r\n            START_TIME: data.START_TIME,\r\n            STOP_TIME: data.STOP_TIME,\r\n            LABOR_TIME: data.LABOR_TIME,\r\n            LABOR_RATE_TYPE: data.LABOR_RATE_TYPE\r\n          }\r\n        })\r\n        this.setState({ rowData: formattedrowData })\r\n      }\r\n    }\r\n\r\n    handleError = (e, title) => {\r\n      const { errors } = this.state\r\n      const { setErrorState } = this.props\r\n      let errorData\r\n      const currentActivity = 'selecting Data to Display Sales Class Listing'\r\n      if (e.data) {\r\n        errorData = { ...e.data, currentActivity }\r\n      } else {\r\n        errorData = {\r\n          title,\r\n          sourceType: 'Network',\r\n          details: e.toString(),\r\n          sourceName: 'SalesClassListing.js',\r\n          currentActivity,\r\n          timestamp: Date().toString(),\r\n        }\r\n      }\r\n      console.log(e)\r\n      errors.push(errorData)\r\n      this.setState({ errors })\r\n      // setErrorState()\r\n    }\r\n\r\n    handleClick(event) {\r\n        event.preventDefault();\r\n        getLaborPostingFilterService(this.state.inputValue.workOrder)\r\n        .then((res) => this.setState({ rowData: res }))\r\n        .catch(error => console.log(error))\r\n    }\r\n    onChangeHandler(event){\r\n        this.setState({\r\n            inputValue:{\r\n                workOrder:event.target.value\r\n            }\r\n        })\r\n    }\r\n    onSelectChange = selectedRowKeys => {\r\n        console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n        this.setState({ selectedRowKeys });\r\n    };\r\n    render() {\r\n      const { Option } = Select;\r\n      const { columnDefs, defaultColDef, rowData, errors, printMode, selectedRowKeys, inputValue } = this.state\r\n      const rowSelection = {\r\n        selectedRowKeys,\r\n        onChange: this.onSelectChange,\r\n      };\r\n      const gridOptions = {\r\n        domLayout: printMode ? 'print' : 'normal',\r\n        popupParent: document.querySelector('body')\r\n        // rowClassRules: {\r\n        //   'inactive-row-item': params => params.data.ACTIVE_SALES_CLASS !== 'Yes',\r\n        // },\r\n      }\r\n      return errors.length ? (\r\n            \"\"\r\n          ) : (\r\n            <div\r\n            className=\"ag-theme-balham\"\r\n            style={{ height: '600px'}}\r\n        >\r\n            <div className=\"labor-review-filter\">\r\n                <div className=\"__work-order\">\r\n                    <div className=\"__mr-2\">\r\n                        <p>Plant</p>\r\n                    </div>\r\n                    <div>\r\n                    <Input.Group compact>\r\n                        <Select defaultValue={'All'}  name=\"plant\">\r\n                            <Option value=\"one\" >{\"one\"}</Option>\r\n                        </Select>\r\n                    </Input.Group>\r\n                    </div>\r\n                </div>\r\n                <div className=\"__work-order mt-2 mb-2\">\r\n                    <div className=\"__mr-1\">\r\n                        <p>Work Order</p>\r\n                    </div>\r\n                    <div>\r\n                        <Input name=\"workOrder\" onChange={this.onChangeHandler} value={inputValue.workOrder} />\r\n                    </div>\r\n                    <div className=\"ml-10\">\r\n                        <Button type=\"primary\" onClick={this.handleClick}>Enter</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <AgGridReact\r\n              animateRows\r\n              suppressRowClickSelection\r\n              defaultColDef={defaultColDef}\r\n              columnDefs={columnDefs}\r\n              rowData={rowData}\r\n              gridOptions={gridOptions}\r\n              scrollbarWidth={8}\r\n            />\r\n        </div>\r\n      )\r\n    }\r\n}\r\nexport default LaborReviewAndPosting","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Radio,\r\n    Select,\r\n    Input,\r\n    Col,\r\n    DatePicker,\r\n    TimePicker,\r\n    Row,\r\n    Button,\r\n    message\r\n  } from 'antd';\r\n\r\nimport moment from 'moment';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\r\n  //components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport UiGrid from './../../views/UiGrid'\r\nimport UiTimerButton from './../../views/UiTimerButton'\r\nimport Spinner from './../../views/Spinner'\r\nimport { convertMonthToNumber, convertDateTime } from './../../utile/helpers' \r\n//Constants\r\nimport Constants from './../../constants'\r\n//scss \r\nimport './labor-review-and-posting.scss'\r\n  // service\r\nimport { getProgressTimeStopService, putPendingLaborService } from './../../service/pendingLabor'\r\nconst { Option } = Select;\r\nconst format = 'HH:mm';\r\nconst { TextArea } = Input;\r\nconst dateFormat = 'DD-MM-YYYY';\r\n\r\nconst LaborReviewAndPostingEdit = () => {\r\n  const history = useHistory();\r\n  const {pendingLaborRecord,panelShop, workCellData, getWorkCell, getPanalShop, getPendingLaborRecord } = useContext(GlobalContext);\r\n  const [page, setPage] = useState([]);\r\n  const [note, setNote] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [stopTime, setStopTime] = useState('');\r\n  const [stopDate, setStopDate] = useState('');\r\n  const [laborPerform, setLaborPerform] = useState('');\r\n  const [laborRate, setRaborRate] = useState(Constants.LABOR_RATE[0]);\r\n  let { id } = useParams();\r\n    useEffect(() => {\r\n      getProgressTimeStopService(id).then(res=>{\r\n        setPage(res[0])\r\n        let start = res[0].START_TIME.split(\" \");\r\n        let stop = res[0].STOP_TIME !== null ? res[0].STOP_TIME.split(\" \"): ''\r\n        console.log(convertMonthToNumber(start[0]))\r\n        setStartTime(start[1])\r\n        setStartDate(convertMonthToNumber(start[0]))\r\n        setStopTime(stop[1])\r\n        setStopDate(convertMonthToNumber(stop[0]))\r\n        setLaborPerform(res[0].INVENTORY_NAME)\r\n      })\r\n    }, [1]);\r\n\r\n    const onChange = (e) => {\r\n      setNote(e.target.value);\r\n    }\r\n    const onChangeStartTime = (time, timeString) =>{\r\n      setStartTime(timeString);\r\n    }\r\n    const onChangeStopTime = (time, timeString) =>{\r\n        setStopTime(timeString);\r\n    }\r\n    const onChangeStartDate = (date, dateString) =>{\r\n        setStartDate(dateString);\r\n    }\r\n    const onChangeStopDate = (date, dateString) =>{\r\n        setStopDate(dateString);\r\n    }\r\n    const onChangeRate = (value) =>{\r\n      setRaborRate(value)\r\n    }\r\n    const onChangeLaborPerform = (value) =>{\r\n      setLaborPerform(value)\r\n    }\r\n    const cancleChanges = () =>{\r\n      history.goBack();\r\n    }\r\n    const saveChange = () =>{\r\n      let start_time = convertDateTime(startDate,startTime)\r\n      let stop_time = convertDateTime(stopDate,stopTime)\r\n        let serviceParams = {\r\n            PLANT_KEY: page.PLANT_KEY,\r\n            DEPARTMENT_KEY: page.DEPARTMENT_KEY,\r\n            EMPLOYEE_KEY: page.EMPLOYEE_KEY,\r\n            WORK_CENTER_KEY: page.WORK_CENTER_KEY,\r\n            WORK_CELL_KEY: page.WORK_CELL_KEY,\r\n            LABOR_CLASS: null,\r\n            WORK_ORDER_NUMBER: page.WORK_ORDER_NUMBER,\r\n            START_TIME: start_time,\r\n            STOP_TIME: stop_time,\r\n            LABOR_TIME: null,\r\n            LABOR_RATE_TYPE: null,\r\n            NOTE:note,\r\n            STATUS: \"C\"\r\n        }\r\n        console.log(laborRate, start_time, stop_time)\r\n        putPendingLaborService(page.KEY, serviceParams).then((res)=>{\r\n          message.success({ content: 'Successfully Updated ' });\r\n          history.push(`/labor-review-and-posting`)\r\n        })\r\n    }\r\n    const contentHtmlForRate = <>\r\n        {Constants.LABOR_RATE.map((item, index)=><Option key={index} value={item} >{item}</Option>)}\r\n    </>;\r\n    \r\n    return (\r\n      <>\r\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n      <form  className=\"labor-record-form\">\r\n        <Col className=\"gutter-row\" span={20}>\r\n          <div>\r\n            <UiPageHeader content={Constants.WORKCELL_PROGRESS_TIMERS} />\r\n            <UiGrid title=\"Work Order \" number={page.WORK_ORDER_NUMBER} />\r\n            <UiGrid title=\"Customar \" number={page.CUST_NAME} />\r\n            <UiGrid title=\"Work Cell \" number={page.WORK_CELL_NAME} />\r\n            <UiGrid title=\"Employee \" number={page.EMPLOYEE_NAME} />\r\n            <UiGrid title=\"Labor Performed\" >\r\n              <Input.Group compact>\r\n              <Select value={laborPerform} onChange={onChangeLaborPerform} name=\"laborPerformed\">\r\n                <Option value={page.INVENTORY_NAME} onChange={onChange}>{page.INVENTORY_NAME}</Option>\r\n              </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Start Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact >\r\n                    <DatePicker onChange={onChangeStartDate} value={moment(startDate, 'DD-MM-YY')} format={dateFormat}/>\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStartTime} value={moment(startTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Stop Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact>\r\n                    <DatePicker onChange={onChangeStopDate} value={moment(stopDate, dateFormat)} format={dateFormat} />\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStopTime} value={moment(stopTime, format)} />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Rate\" >\r\n              <Input.Group compact>\r\n                <Select value={laborRate} onChange={onChangeRate} name=\"laborRate\">\r\n                  {contentHtmlForRate}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Hours\" number={pendingLaborRecord.LABOR_TIME} />\r\n            <div>\r\n              <p>Note *</p>\r\n              <TextArea rows={4} name='note' value={note} onChange={onChange} placeholder=\"Note\"/>\r\n            </div>\r\n            <div className=\"footer-button\">\r\n                <Button \r\n                    type=\"primary\" \r\n                    style={{backgroundColor:'red'}} \r\n                    className=\"time-button\" \r\n                    onClick={cancleChanges} \r\n                > <b>Cancel <br></br> Do not save changes </b>\r\n                </Button>\r\n                <Button \r\n                    type=\"primary\" \r\n                    className=\"time-button\" \r\n                    onClick={saveChange} \r\n                    style={{padding: '27px'}} \r\n                > <b>Save Changes</b> \r\n                </Button>  \r\n            </div>\r\n          </div>\r\n        </Col>\r\n        </form>\r\n    </Row> \r\n      </>\r\n    )\r\n}\r\nexport default LaborReviewAndPostingEdit","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Radio,\r\n    Select,\r\n    Input,\r\n    Col,\r\n    DatePicker,\r\n    TimePicker,\r\n    Row,\r\n    Button,\r\n    message\r\n  } from 'antd';\r\n\r\nimport moment from 'moment';\r\n// context\r\nimport { GlobalContext } from \"./../../context/GlobalState\";\r\nimport {useHistory,useParams} from 'react-router-dom';\r\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\r\n  //components\r\nimport UiPageHeader from './../../views/UiPageHeader'\r\nimport { convertMonthToNumber, convertDateTime } from './../../utile/helpers' \r\nimport UiGrid from './../../views/UiGrid'\r\n//Constants\r\nimport Constants from './../../constants'\r\n//scss \r\nimport './labor-review-and-posting.scss'\r\n  // service\r\nimport { getProgressTimeStopService, putPendingLaborService } from './../../service/pendingLabor'\r\nimport { getPanelShopService,getWorkOrderService, getWorkCellService } from './../../service/employee';\r\n\r\nconst { Option } = Select;\r\nconst format = 'HH:mm';\r\nconst { TextArea } = Input;\r\nconst dateFormat = 'YYYY-MM-DD';\r\n\r\nconst LaborReviewAndPostingAdd = () => {\r\n  const history = useHistory();\r\n  const {pendingLaborRecord,panelShop, workCellData, getWorkCell, getPanalShop, getPendingLaborRecord } = useContext(GlobalContext);\r\n  const [customar, setCustomar] = useState('');\r\n  const [page, setPage] = useState([]);\r\n  const [note, setNote] = useState('');\r\n  const [workOrderNumber, setWorkOrderNumber] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [stopTime, setStopTime] = useState('');\r\n  const [stopDate, setStopDate] = useState('');\r\n  const [workCell, setWorkCell] = useState('');\r\n  const [employe, setEmploye] = useState('');\r\n  const [workCenterName, setWorkCenterName] = useState('');\r\n  const [laborRate, setRaborRate] = useState(Constants.LABOR_RATE[0]);\r\n  const [employeeUpdate, setEmployeeUpdate] = useState([]);\r\n  const [workCellUpdate, setWorkCellUpdate] = useState([])\r\n  const [laborActivityUpdate, setLaborActivityUpdate] = useState([])\r\n  let { id } = useParams();\r\n    useEffect(() => {\r\n      getWorkCellService().then(res=>{\r\n        setWorkCell(res[0].WORK_CELL_NAME)\r\n        setWorkCellUpdate(res)\r\n      })\r\n    }, [1]);\r\n    const onChangeWorkCell = (e) => {\r\n      workCellUpdate.map(item =>{\r\n        if(item.WORK_CELL_NAME === e){\r\n          setWorkCell(e)\r\n          getPanelShopService(item.DEPARTMENT_KEY).then(res=>{\r\n            setWorkCenterName(res[0].DESCRIPTION)\r\n            setEmployeeUpdate(res)\r\n            setEmploye(res[0].NAME)\r\n          })\r\n        }\r\n      })\r\n    }\r\n    const onChangeCustomar = (e) =>{\r\n      setCustomar(e.target.value);\r\n    }\r\n    const onChange = (e) => {\r\n      setNote(e.target.value);\r\n    }\r\n    const onChangeEmployee = (e) =>{\r\n      let update = workCellData.map(item=>{\r\n        if(e === item.WORK_CELL_NAME){\r\n          return item\r\n        }\r\n      })    \r\n      setEmploye(e)\r\n    }\r\n    const completeStartNew = () =>{\r\n      history.push('/')\r\n    }\r\n    const onChangeStartTime = (time, timeString) =>{\r\n        setStartTime(timeString);\r\n    }\r\n    const onChangeStopTime = (time, timeString) =>{\r\n        setStopTime(timeString);\r\n    }\r\n    const onChangeStartDate = (date, dateString) =>{\r\n        setStartDate(dateString);\r\n    }\r\n    const onChangeStopDate = (date, dateString) =>{\r\n        setStopDate(dateString);\r\n    }\r\n    const onChangeRate = (value) =>{\r\n        setRaborRate(value)\r\n    }\r\n    const onChangeWorkOrder =(e) =>{\r\n      getWorkOrderService(e.target.value).then(res=>{\r\n        setLaborActivityUpdate(res)\r\n        console.log(res)\r\n      })\r\n      \r\n      setWorkOrderNumber(e.target.value)\r\n    }\r\n    const cancleChanges = () =>{\r\n      history.goBack();\r\n    }\r\n    const saveChange = () =>{\r\n      let start_time = convertDateTime(startDate,startTime)\r\n      let stop_time = convertDateTime(stopDate,stopTime)\r\n      let serviceParams = {\r\n          PLANT_KEY: workCellUpdate === null ? page.PLANT_KEY : workCellUpdate.PLANT_KEY,\r\n          DEPARTMENT_KEY: workCellUpdate === null ? page.DEPARTMENT_KEY : workCellUpdate.DEPARTMENT_KEY,\r\n          EMPLOYEE_KEY: pendingLaborRecord.EMPLOYEE_KEY,\r\n          WORK_CENTER_KEY: pendingLaborRecord.WORK_CENTER_KEY,\r\n          WORK_CELL_KEY: pendingLaborRecord.WORK_CELL_KEY,\r\n          LABOR_CLASS: null,\r\n          WORK_ORDER_NUMBER: workOrderNumber,\r\n          START_TIME: start_time,\r\n          STOP_TIME: stop_time,\r\n          LABOR_TIME: null,\r\n          LABOR_RATE_TYPE: null,\r\n          STATUS: \"C\"\r\n      }\r\n        console.log('saveChange', {\r\n          start_time,\r\n          stop_time,\r\n            note,\r\n            laborRate,\r\n            startTime,\r\n            startDate,\r\n            workOrderNumber,\r\n            customar\r\n        })\r\n        message.success({ content: 'please check data in console '});\r\n        // putPendingLaborService(pendingLaborRecord.KEY, serviceParams).then((res)=>{\r\n        //   history.push(`/labor-record-complete/${pendingLaborRecord.KEY}`)\r\n        // })\r\n    }\r\n    const contentHtml = <>\r\n      {workCellUpdate.length > 0 ? workCellUpdate.map((item, index)=><Option key={index} value={item.WORK_CELL_NAME} >{item.WORK_CELL_NAME}</Option>) : null}\r\n    </>;\r\n    const contentHtmlForEmployee = <>\r\n      {employeeUpdate.length > 0 ? employeeUpdate.map((item, index)=><Option key={index} value={item.NAME} >{item.NAME}</Option>) : null}\r\n    </>;\r\n\r\n    return (\r\n      <>\r\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n        <Col className=\"gutter-row\" span={20}>\r\n          <div>\r\n            <UiPageHeader content={Constants.WORKCELL_PROGRESS_TIMERS} />\r\n            <UiGrid title=\"Work Order\" >\r\n              <Input placeholder=\"Enter Work Order\" value={workOrderNumber} name=\"workOrder\" onChange={onChangeWorkOrder} />\r\n            </UiGrid>\r\n            <UiGrid title=\"Customar\" >\r\n              <Input placeholder=\"Customar\" name=\"customar\" value={customar} onChange={onChangeCustomar} />\r\n            </UiGrid>\r\n            <UiGrid title=\"Work Cell\" >\r\n              <Input.Group compact>\r\n                <Select value={workCell} onChange={onChangeWorkCell}>\r\n                  {contentHtml}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Employee\" >\r\n              <Input.Group compact>\r\n                <Select value={employe} onChange={onChangeEmployee}>\r\n                  {contentHtmlForEmployee}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Activity\" >\r\n              <Input.Group compact>\r\n                <Select value={workCenterName} >\r\n                  {/* <Option >{workCenterName}</Option> */}\r\n                </Select>\r\n              </Input.Group>\r\n            </UiGrid>\r\n            <UiGrid title=\"Start Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact >\r\n                    <DatePicker onChange={onChangeStartDate}  format={dateFormat}/>\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStartTime}  />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Stop Time\" >\r\n              <div className=\"data-set\">\r\n                <div>\r\n                  <Input.Group compact>\r\n                    <DatePicker onChange={onChangeStopDate}  format={dateFormat} />\r\n                  </Input.Group>\r\n                </div>\r\n                <div>\r\n                  <TimePicker use12Hours format=\"h:mm:ss\" onChange={onChangeStopTime}  />\r\n                </div>\r\n              </div>\r\n            </UiGrid>\r\n            <UiGrid title=\"Labor Hours\" number={pendingLaborRecord.LABOR_TIME} />\r\n            <div >\r\n                <p>Note *</p>\r\n                <TextArea rows={4} name='note' value={note}  placeholder=\"Note\"/>\r\n            </div>\r\n            <div className=\"footer-button\">\r\n                <Button \r\n                    type=\"primary\" \r\n                    style={{backgroundColor:'red'}} \r\n                    className=\"time-button\" \r\n                    onClick={cancleChanges} \r\n                > <b>Cancel <br></br> Do not save changes </b>\r\n                </Button>\r\n                <Button \r\n                    type=\"primary\" \r\n                    className=\"time-button\" \r\n                    onClick={saveChange} \r\n                    style={{padding: '27px'}} \r\n                > <b>Save Changes</b> \r\n                </Button>  \r\n            </div>\r\n          </div>\r\n        </Col>\r\n\r\n    </Row>\r\n      </>\r\n    )\r\n}\r\nexport default LaborReviewAndPostingAdd","import React from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ArrowLeftOutlined  } from '@ant-design/icons';\r\nimport { Layout, Button } from 'antd';\r\nconst { Content } = Layout;\r\nexport default function BackButton() {\r\n    const history = useHistory();\r\n    let tempalate\r\n    // Back Button\r\n    const goBack = () => {\r\n        history.goBack();\r\n    }\r\n    console.log('---',window.location.pathname )\r\n    if(window.location.pathname === \"/work-cell\"){\r\n        tempalate= null\r\n    }else{\r\n        tempalate = (<Layout className=\"layout\">\r\n        <Content style={{ padding: '0 50px' }} > \r\n          <Button type=\"primary\" className=\"back-button\" onClick={goBack} icon={<ArrowLeftOutlined  />}>Back</Button>\r\n        </Content>\r\n      </Layout>)\r\n    }\r\n    if(window.location.pathname.includes(\"/labor-review-and-posting\")){\r\n        tempalate= null\r\n    }\r\n    if(window.location.pathname === \"/labor-tracker\"){\r\n        tempalate=null\r\n    }\r\n    return (\r\n        <>\r\n            {tempalate}\r\n        </>\r\n    )\r\n}\r\n","import React, {Suspense, useContext} from 'react';\nimport './App.scss';\n// Components\nimport UiHeader from './views/UiHeader'\nimport TopNavBar  from './views/TopNavBar';\nimport Spinner from './views/Spinner'\n// Routers\nimport WorkCell from './pages/work-cell/work-cell';\nimport PanelShop from './pages/panel-shop/panel-shop';\nimport JobPosting from './pages/job-posting/job-posting';\nimport LaborActivity from './pages/labor-activity/labor-activity';\nimport LaborConfirm from './pages/labor-confirm/labor-confirm';\nimport ProgressTimers from './pages/progress-timers/progress-timers';\nimport ReviewTimer from './pages/review-timer/review-timer';\nimport ProgressTimeStop from './pages/progress-time-stop/progress-time-stop';\nimport LaborRecordComplete from './pages/labor-record-complete/labor-record-complete'\nimport LaborReviewAndPosting from './pages/labor-review-and-posting/labor-review-and-posting';\nimport LaborReviewAndPostingEdit from  './pages/labor-review-and-posting/labor-review-and-posting-edit'\nimport LaborReviewAndPostingView from './pages/labor-review-and-posting/labor-review-and-posting-view'\nimport LaborReviewAndPostingAdd from './pages/labor-review-and-posting/labor-review-and-posting-add'\nimport LaborTracker from './pages/labor-tracker/labor-tracker'\n\nimport { Route, Switch } from \"react-router-dom\";\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\n// context\nimport { GlobalContext } from \"./context/GlobalState\";\nimport { GlobalProvider } from './context/GlobalState';\n\n// Antd\nimport { Layout, Button } from 'antd';\nimport BackButton from './views/BackButton';\nconst { Content } = Layout;\n\n\n\n\nconst App = () => {;\n    let location = useLocation();\n    const { keyData, getKeyData, getPendingLabor,isActive, isActiveFun } = useContext(GlobalContext);\n    let {id} = useParams();\n    return (\n        <GlobalProvider>\n            <Suspense fallback={<Spinner />}> {/* Show a loader component here as a fallback*/}\n            \n            {location.pathname.includes('labor-review-and-posting') \n              ? <UiHeader for=\"supervisor\" /> \n              :<><UiHeader /><TopNavBar /></>\n            }\n                <Layout className=\"layout\">\n                  <Content style={{ padding: '0 50px' }} > \n                    \n                    <Route exact path=\"/labor-tracker\" component={LaborTracker} />\n                    <Switch>\n                      <Route exact path=\"/work-cell\" component={WorkCell} />\n                      <Route exact path=\"/\" component={WorkCell} />\n                      <Route exact path=\"/\" component={PanelShop} />\n                    </Switch>\n                  </Content>\n                </Layout>\n                <BackButton />\n            </Suspense>\n        </GlobalProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"antd/dist/antd.css\";\n//Grid\nimport 'ag-grid-community/dist/styles/ag-grid.css'\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render( \n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}